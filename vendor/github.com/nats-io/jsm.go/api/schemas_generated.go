// auto generated 2021-02-24 15:57:32.427339 +0100 CET m=+12.267384524

package api

import (
	"encoding/base64"

	jsadvisory "github.com/nats-io/jsm.go/api/jetstream/advisory"
	jsmetric "github.com/nats-io/jsm.go/api/jetstream/metric"
	srvadvisory "github.com/nats-io/jsm.go/api/server/advisory"
	srvmetric "github.com/nats-io/jsm.go/api/server/metric"
)

var schemas map[string][]byte

var schemaTypes = map[string]func() interface{}{
	"io.nats.server.advisory.v1.client_connect":                  func() interface{} { return &srvadvisory.ConnectEventMsgV1{} },
	"io.nats.server.advisory.v1.client_disconnect":               func() interface{} { return &srvadvisory.DisconnectEventMsgV1{} },
	"io.nats.server.advisory.v1.account_connections":             func() interface{} { return &srvadvisory.AccountConnectionsV1{} },
	"io.nats.server.metric.v1.service_latency":                   func() interface{} { return &srvmetric.ServiceLatencyV1{} },
	"io.nats.jetstream.advisory.v1.api_audit":                    func() interface{} { return &jsadvisory.JetStreamAPIAuditV1{} },
	"io.nats.jetstream.advisory.v1.max_deliver":                  func() interface{} { return &jsadvisory.ConsumerDeliveryExceededAdvisoryV1{} },
	"io.nats.jetstream.advisory.v1.terminated":                   func() interface{} { return &jsadvisory.JSConsumerDeliveryTerminatedAdvisoryV1{} },
	"io.nats.jetstream.advisory.v1.stream_action":                func() interface{} { return &jsadvisory.JSStreamActionAdvisoryV1{} },
	"io.nats.jetstream.advisory.v1.consumer_action":              func() interface{} { return &jsadvisory.JSConsumerActionAdvisoryV1{} },
	"io.nats.jetstream.advisory.v1.snapshot_create":              func() interface{} { return &jsadvisory.JSSnapshotCreateAdvisoryV1{} },
	"io.nats.jetstream.advisory.v1.snapshot_complete":            func() interface{} { return &jsadvisory.JSSnapshotCompleteAdvisoryV1{} },
	"io.nats.jetstream.advisory.v1.restore_create":               func() interface{} { return &jsadvisory.JSRestoreCreateAdvisoryV1{} },
	"io.nats.jetstream.advisory.v1.restore_complete":             func() interface{} { return &jsadvisory.JSRestoreCompleteAdvisoryV1{} },
	"io.nats.jetstream.advisory.v1.stream_leader_elected":        func() interface{} { return &jsadvisory.JSStreamLeaderElectedV1{} },
	"io.nats.jetstream.advisory.v1.consumer_leader_elected":      func() interface{} { return &jsadvisory.JSConsumerLeaderElectedV1{} },
	"io.nats.jetstream.advisory.v1.stream_quorum_lost":           func() interface{} { return &jsadvisory.JSStreamQuorumLostV1{} },
	"io.nats.jetstream.advisory.v1.consumer_quorum_lost":         func() interface{} { return &jsadvisory.JSConsumerQuorumLostV1{} },
	"io.nats.jetstream.metric.v1.consumer_ack":                   func() interface{} { return &jsmetric.ConsumerAckMetricV1{} },
	"io.nats.jetstream.api.v1.consumer_configuration":            func() interface{} { return &ConsumerConfig{} },
	"io.nats.jetstream.api.v1.stream_configuration":              func() interface{} { return &StreamConfig{} },
	"io.nats.jetstream.api.v1.stream_template_configuration":     func() interface{} { return &StreamTemplateConfig{} },
	"io.nats.jetstream.api.v1.account_info_response":             func() interface{} { return &JSApiAccountInfoResponse{} },
	"io.nats.jetstream.api.v1.consumer_create_request":           func() interface{} { return &JSApiConsumerCreateRequest{} },
	"io.nats.jetstream.api.v1.consumer_create_response":          func() interface{} { return &JSApiConsumerCreateResponse{} },
	"io.nats.jetstream.api.v1.consumer_delete_response":          func() interface{} { return &JSApiConsumerDeleteResponse{} },
	"io.nats.jetstream.api.v1.consumer_info_response":            func() interface{} { return &JSApiConsumerInfoResponse{} },
	"io.nats.jetstream.api.v1.consumer_list_request":             func() interface{} { return &JSApiConsumerListRequest{} },
	"io.nats.jetstream.api.v1.consumer_list_response":            func() interface{} { return &JSApiConsumerListResponse{} },
	"io.nats.jetstream.api.v1.consumer_names_request":            func() interface{} { return &JSApiConsumerNamesRequest{} },
	"io.nats.jetstream.api.v1.consumer_names_response":           func() interface{} { return &JSApiConsumerNamesResponse{} },
	"io.nats.jetstream.api.v1.consumer_getnext_request":          func() interface{} { return &JSApiConsumerGetNextRequest{} },
	"io.nats.jetstream.api.v1.consumer_leader_stepdown_response": func() interface{} { return &JSApiConsumerLeaderStepDownResponse{} },
	"io.nats.jetstream.api.v1.stream_create_request":             func() interface{} { return &JSApiStreamCreateRequest{} },
	"io.nats.jetstream.api.v1.stream_create_response":            func() interface{} { return &JSApiStreamCreateResponse{} },
	"io.nats.jetstream.api.v1.stream_delete_response":            func() interface{} { return &JSApiStreamDeleteResponse{} },
	"io.nats.jetstream.api.v1.stream_info_response":              func() interface{} { return &JSApiStreamInfoResponse{} },
	"io.nats.jetstream.api.v1.stream_list_request":               func() interface{} { return &JSApiStreamListRequest{} },
	"io.nats.jetstream.api.v1.stream_list_response":              func() interface{} { return &JSApiStreamListResponse{} },
	"io.nats.jetstream.api.v1.stream_msg_delete_response":        func() interface{} { return &JSApiMsgDeleteResponse{} },
	"io.nats.jetstream.api.v1.stream_msg_get_request":            func() interface{} { return &JSApiMsgGetRequest{} },
	"io.nats.jetstream.api.v1.stream_msg_get_response":           func() interface{} { return &JSApiMsgGetResponse{} },
	"io.nats.jetstream.api.v1.stream_names_request":              func() interface{} { return &JSApiStreamNamesRequest{} },
	"io.nats.jetstream.api.v1.stream_names_response":             func() interface{} { return &JSApiStreamNamesResponse{} },
	"io.nats.jetstream.api.v1.stream_purge_response":             func() interface{} { return &JSApiStreamPurgeResponse{} },
	"io.nats.jetstream.api.v1.stream_snapshot_response":          func() interface{} { return &JSApiStreamSnapshotResponse{} },
	"io.nats.jetstream.api.v1.stream_snapshot_request":           func() interface{} { return &JSApiStreamSnapshotRequest{} },
	"io.nats.jetstream.api.v1.stream_restore_request":            func() interface{} { return &JSApiStreamRestoreRequest{} },
	"io.nats.jetstream.api.v1.stream_restore_response":           func() interface{} { return &JSApiStreamRestoreResponse{} },
	"io.nats.jetstream.api.v1.stream_template_create_request":    func() interface{} { return &JSApiStreamTemplateCreateRequest{} },
	"io.nats.jetstream.api.v1.stream_template_create_response":   func() interface{} { return &JSApiStreamTemplateCreateResponse{} },
	"io.nats.jetstream.api.v1.stream_template_delete_response":   func() interface{} { return &JSApiStreamTemplateDeleteResponse{} },
	"io.nats.jetstream.api.v1.stream_template_info_response":     func() interface{} { return &JSApiStreamTemplateInfoResponse{} },
	"io.nats.jetstream.api.v1.stream_template_names_response":    func() interface{} { return &JSApiStreamTemplateNamesResponse{} },
	"io.nats.jetstream.api.v1.stream_template_names_request":     func() interface{} { return &JSApiStreamTemplateNamesRequest{} },
	"io.nats.jetstream.api.v1.stream_update_response":            func() interface{} { return &JSApiStreamUpdateResponse{} },
	"io.nats.jetstream.api.v1.stream_remove_peer_request":        func() interface{} { return &JSApiStreamRemovePeerRequest{} },
	"io.nats.jetstream.api.v1.stream_remove_peer_response":       func() interface{} { return &JSApiStreamRemovePeerResponse{} },
	"io.nats.jetstream.api.v1.stream_leader_stepdown_response":   func() interface{} { return &JSApiStreamLeaderStepDownResponse{} },
	"io.nats.jetstream.api.v1.pub_ack_response":                  func() interface{} { return &JSPubAckResponse{} },
	"io.nats.jetstream.api.v1.meta_leader_stepdown_request":      func() interface{} { return &JSApiLeaderStepDownRequest{} },
	"io.nats.jetstream.api.v1.meta_leader_stepdown_response":     func() interface{} { return &JSApiLeaderStepDownResponse{} },
	"io.nats.unknown_message":                                    func() interface{} { return &UnknownMessage{} },
}

// Validate performs a JSON Schema validation of the configuration
func (t ConsumerConfig) Validate(v ...StructValidator) (valid bool, errors []string) {
	if len(v) == 0 || v[0] == nil {
		return true, nil
	}

	return v[0].ValidateStruct(t, t.SchemaType())
}

// SchemaType is the NATS schema type io.nats.jetstream.api.v1.consumer_configuration
func (t ConsumerConfig) SchemaType() string {
	return "io.nats.jetstream.api.v1.consumer_configuration"
}

// SchemaID is the url to the JSON Schema for JetStream Consumer Configuration
func (t ConsumerConfig) SchemaID() string {
	return "https://raw.githubusercontent.com/nats-io/jetstream/master/schemas/jetstream/api/v1/consumer_configuration.json"
}

// Schema is a JSON Schema document for the JetStream Consumer Configuration
func (t ConsumerConfig) Schema() []byte {
	return schemas[t.SchemaType()]
}

// Validate performs a JSON Schema validation of the configuration
func (t StreamConfig) Validate(v ...StructValidator) (valid bool, errors []string) {
	if len(v) == 0 || v[0] == nil {
		return true, nil
	}

	return v[0].ValidateStruct(t, t.SchemaType())
}

// SchemaType is the NATS schema type io.nats.jetstream.api.v1.stream_configuration
func (t StreamConfig) SchemaType() string {
	return "io.nats.jetstream.api.v1.stream_configuration"
}

// SchemaID is the url to the JSON Schema for JetStream Consumer Configuration
func (t StreamConfig) SchemaID() string {
	return "https://raw.githubusercontent.com/nats-io/jetstream/master/schemas/jetstream/api/v1/stream_configuration.json"
}

// Schema is a JSON Schema document for the JetStream Consumer Configuration
func (t StreamConfig) Schema() []byte {
	return schemas[t.SchemaType()]
}

// Validate performs a JSON Schema validation of the configuration
func (t StreamTemplateConfig) Validate(v ...StructValidator) (valid bool, errors []string) {
	if len(v) == 0 || v[0] == nil {
		return true, nil
	}

	return v[0].ValidateStruct(t, t.SchemaType())
}

// SchemaType is the NATS schema type io.nats.jetstream.api.v1.stream_template_configuration
func (t StreamTemplateConfig) SchemaType() string {
	return "io.nats.jetstream.api.v1.stream_template_configuration"
}

// SchemaID is the url to the JSON Schema for JetStream Consumer Configuration
func (t StreamTemplateConfig) SchemaID() string {
	return "https://raw.githubusercontent.com/nats-io/jetstream/master/schemas/jetstream/api/v1/stream_template_configuration.json"
}

// Schema is a JSON Schema document for the JetStream Consumer Configuration
func (t StreamTemplateConfig) Schema() []byte {
	return schemas[t.SchemaType()]
}

// Validate performs a JSON Schema validation of the configuration
func (t JSApiAccountInfoResponse) Validate(v ...StructValidator) (valid bool, errors []string) {
	if len(v) == 0 || v[0] == nil {
		return true, nil
	}

	return v[0].ValidateStruct(t, t.SchemaType())
}

// SchemaType is the NATS schema type io.nats.jetstream.api.v1.account_info_response
func (t JSApiAccountInfoResponse) SchemaType() string {
	return "io.nats.jetstream.api.v1.account_info_response"
}

// SchemaID is the url to the JSON Schema for JetStream Consumer Configuration
func (t JSApiAccountInfoResponse) SchemaID() string {
	return "https://raw.githubusercontent.com/nats-io/jetstream/master/schemas/jetstream/api/v1/account_info_response.json"
}

// Schema is a JSON Schema document for the JetStream Consumer Configuration
func (t JSApiAccountInfoResponse) Schema() []byte {
	return schemas[t.SchemaType()]
}

// Validate performs a JSON Schema validation of the configuration
func (t JSApiConsumerCreateRequest) Validate(v ...StructValidator) (valid bool, errors []string) {
	if len(v) == 0 || v[0] == nil {
		return true, nil
	}

	return v[0].ValidateStruct(t, t.SchemaType())
}

// SchemaType is the NATS schema type io.nats.jetstream.api.v1.consumer_create_request
func (t JSApiConsumerCreateRequest) SchemaType() string {
	return "io.nats.jetstream.api.v1.consumer_create_request"
}

// SchemaID is the url to the JSON Schema for JetStream Consumer Configuration
func (t JSApiConsumerCreateRequest) SchemaID() string {
	return "https://raw.githubusercontent.com/nats-io/jetstream/master/schemas/jetstream/api/v1/consumer_create_request.json"
}

// Schema is a JSON Schema document for the JetStream Consumer Configuration
func (t JSApiConsumerCreateRequest) Schema() []byte {
	return schemas[t.SchemaType()]
}

// Validate performs a JSON Schema validation of the configuration
func (t JSApiConsumerCreateResponse) Validate(v ...StructValidator) (valid bool, errors []string) {
	if len(v) == 0 || v[0] == nil {
		return true, nil
	}

	return v[0].ValidateStruct(t, t.SchemaType())
}

// SchemaType is the NATS schema type io.nats.jetstream.api.v1.consumer_create_response
func (t JSApiConsumerCreateResponse) SchemaType() string {
	return "io.nats.jetstream.api.v1.consumer_create_response"
}

// SchemaID is the url to the JSON Schema for JetStream Consumer Configuration
func (t JSApiConsumerCreateResponse) SchemaID() string {
	return "https://raw.githubusercontent.com/nats-io/jetstream/master/schemas/jetstream/api/v1/consumer_create_response.json"
}

// Schema is a JSON Schema document for the JetStream Consumer Configuration
func (t JSApiConsumerCreateResponse) Schema() []byte {
	return schemas[t.SchemaType()]
}

// Validate performs a JSON Schema validation of the configuration
func (t JSApiConsumerDeleteResponse) Validate(v ...StructValidator) (valid bool, errors []string) {
	if len(v) == 0 || v[0] == nil {
		return true, nil
	}

	return v[0].ValidateStruct(t, t.SchemaType())
}

// SchemaType is the NATS schema type io.nats.jetstream.api.v1.consumer_delete_response
func (t JSApiConsumerDeleteResponse) SchemaType() string {
	return "io.nats.jetstream.api.v1.consumer_delete_response"
}

// SchemaID is the url to the JSON Schema for JetStream Consumer Configuration
func (t JSApiConsumerDeleteResponse) SchemaID() string {
	return "https://raw.githubusercontent.com/nats-io/jetstream/master/schemas/jetstream/api/v1/consumer_delete_response.json"
}

// Schema is a JSON Schema document for the JetStream Consumer Configuration
func (t JSApiConsumerDeleteResponse) Schema() []byte {
	return schemas[t.SchemaType()]
}

// Validate performs a JSON Schema validation of the configuration
func (t JSApiConsumerInfoResponse) Validate(v ...StructValidator) (valid bool, errors []string) {
	if len(v) == 0 || v[0] == nil {
		return true, nil
	}

	return v[0].ValidateStruct(t, t.SchemaType())
}

// SchemaType is the NATS schema type io.nats.jetstream.api.v1.consumer_info_response
func (t JSApiConsumerInfoResponse) SchemaType() string {
	return "io.nats.jetstream.api.v1.consumer_info_response"
}

// SchemaID is the url to the JSON Schema for JetStream Consumer Configuration
func (t JSApiConsumerInfoResponse) SchemaID() string {
	return "https://raw.githubusercontent.com/nats-io/jetstream/master/schemas/jetstream/api/v1/consumer_info_response.json"
}

// Schema is a JSON Schema document for the JetStream Consumer Configuration
func (t JSApiConsumerInfoResponse) Schema() []byte {
	return schemas[t.SchemaType()]
}

// Validate performs a JSON Schema validation of the configuration
func (t JSApiConsumerListRequest) Validate(v ...StructValidator) (valid bool, errors []string) {
	if len(v) == 0 || v[0] == nil {
		return true, nil
	}

	return v[0].ValidateStruct(t, t.SchemaType())
}

// SchemaType is the NATS schema type io.nats.jetstream.api.v1.consumer_list_request
func (t JSApiConsumerListRequest) SchemaType() string {
	return "io.nats.jetstream.api.v1.consumer_list_request"
}

// SchemaID is the url to the JSON Schema for JetStream Consumer Configuration
func (t JSApiConsumerListRequest) SchemaID() string {
	return "https://raw.githubusercontent.com/nats-io/jetstream/master/schemas/jetstream/api/v1/consumer_list_request.json"
}

// Schema is a JSON Schema document for the JetStream Consumer Configuration
func (t JSApiConsumerListRequest) Schema() []byte {
	return schemas[t.SchemaType()]
}

// Validate performs a JSON Schema validation of the configuration
func (t JSApiConsumerListResponse) Validate(v ...StructValidator) (valid bool, errors []string) {
	if len(v) == 0 || v[0] == nil {
		return true, nil
	}

	return v[0].ValidateStruct(t, t.SchemaType())
}

// SchemaType is the NATS schema type io.nats.jetstream.api.v1.consumer_list_response
func (t JSApiConsumerListResponse) SchemaType() string {
	return "io.nats.jetstream.api.v1.consumer_list_response"
}

// SchemaID is the url to the JSON Schema for JetStream Consumer Configuration
func (t JSApiConsumerListResponse) SchemaID() string {
	return "https://raw.githubusercontent.com/nats-io/jetstream/master/schemas/jetstream/api/v1/consumer_list_response.json"
}

// Schema is a JSON Schema document for the JetStream Consumer Configuration
func (t JSApiConsumerListResponse) Schema() []byte {
	return schemas[t.SchemaType()]
}

// Validate performs a JSON Schema validation of the configuration
func (t JSApiConsumerNamesRequest) Validate(v ...StructValidator) (valid bool, errors []string) {
	if len(v) == 0 || v[0] == nil {
		return true, nil
	}

	return v[0].ValidateStruct(t, t.SchemaType())
}

// SchemaType is the NATS schema type io.nats.jetstream.api.v1.consumer_names_request
func (t JSApiConsumerNamesRequest) SchemaType() string {
	return "io.nats.jetstream.api.v1.consumer_names_request"
}

// SchemaID is the url to the JSON Schema for JetStream Consumer Configuration
func (t JSApiConsumerNamesRequest) SchemaID() string {
	return "https://raw.githubusercontent.com/nats-io/jetstream/master/schemas/jetstream/api/v1/consumer_names_request.json"
}

// Schema is a JSON Schema document for the JetStream Consumer Configuration
func (t JSApiConsumerNamesRequest) Schema() []byte {
	return schemas[t.SchemaType()]
}

// Validate performs a JSON Schema validation of the configuration
func (t JSApiConsumerNamesResponse) Validate(v ...StructValidator) (valid bool, errors []string) {
	if len(v) == 0 || v[0] == nil {
		return true, nil
	}

	return v[0].ValidateStruct(t, t.SchemaType())
}

// SchemaType is the NATS schema type io.nats.jetstream.api.v1.consumer_names_response
func (t JSApiConsumerNamesResponse) SchemaType() string {
	return "io.nats.jetstream.api.v1.consumer_names_response"
}

// SchemaID is the url to the JSON Schema for JetStream Consumer Configuration
func (t JSApiConsumerNamesResponse) SchemaID() string {
	return "https://raw.githubusercontent.com/nats-io/jetstream/master/schemas/jetstream/api/v1/consumer_names_response.json"
}

// Schema is a JSON Schema document for the JetStream Consumer Configuration
func (t JSApiConsumerNamesResponse) Schema() []byte {
	return schemas[t.SchemaType()]
}

// Validate performs a JSON Schema validation of the configuration
func (t JSApiConsumerGetNextRequest) Validate(v ...StructValidator) (valid bool, errors []string) {
	if len(v) == 0 || v[0] == nil {
		return true, nil
	}

	return v[0].ValidateStruct(t, t.SchemaType())
}

// SchemaType is the NATS schema type io.nats.jetstream.api.v1.consumer_getnext_request
func (t JSApiConsumerGetNextRequest) SchemaType() string {
	return "io.nats.jetstream.api.v1.consumer_getnext_request"
}

// SchemaID is the url to the JSON Schema for JetStream Consumer Configuration
func (t JSApiConsumerGetNextRequest) SchemaID() string {
	return "https://raw.githubusercontent.com/nats-io/jetstream/master/schemas/jetstream/api/v1/consumer_getnext_request.json"
}

// Schema is a JSON Schema document for the JetStream Consumer Configuration
func (t JSApiConsumerGetNextRequest) Schema() []byte {
	return schemas[t.SchemaType()]
}

// Validate performs a JSON Schema validation of the configuration
func (t JSApiConsumerLeaderStepDownResponse) Validate(v ...StructValidator) (valid bool, errors []string) {
	if len(v) == 0 || v[0] == nil {
		return true, nil
	}

	return v[0].ValidateStruct(t, t.SchemaType())
}

// SchemaType is the NATS schema type io.nats.jetstream.api.v1.consumer_leader_stepdown_response
func (t JSApiConsumerLeaderStepDownResponse) SchemaType() string {
	return "io.nats.jetstream.api.v1.consumer_leader_stepdown_response"
}

// SchemaID is the url to the JSON Schema for JetStream Consumer Configuration
func (t JSApiConsumerLeaderStepDownResponse) SchemaID() string {
	return "https://raw.githubusercontent.com/nats-io/jetstream/master/schemas/jetstream/api/v1/consumer_leader_stepdown_response.json"
}

// Schema is a JSON Schema document for the JetStream Consumer Configuration
func (t JSApiConsumerLeaderStepDownResponse) Schema() []byte {
	return schemas[t.SchemaType()]
}

// Validate performs a JSON Schema validation of the configuration
func (t JSApiStreamCreateRequest) Validate(v ...StructValidator) (valid bool, errors []string) {
	if len(v) == 0 || v[0] == nil {
		return true, nil
	}

	return v[0].ValidateStruct(t, t.SchemaType())
}

// SchemaType is the NATS schema type io.nats.jetstream.api.v1.stream_create_request
func (t JSApiStreamCreateRequest) SchemaType() string {
	return "io.nats.jetstream.api.v1.stream_create_request"
}

// SchemaID is the url to the JSON Schema for JetStream Consumer Configuration
func (t JSApiStreamCreateRequest) SchemaID() string {
	return "https://raw.githubusercontent.com/nats-io/jetstream/master/schemas/jetstream/api/v1/stream_create_request.json"
}

// Schema is a JSON Schema document for the JetStream Consumer Configuration
func (t JSApiStreamCreateRequest) Schema() []byte {
	return schemas[t.SchemaType()]
}

// Validate performs a JSON Schema validation of the configuration
func (t JSApiStreamCreateResponse) Validate(v ...StructValidator) (valid bool, errors []string) {
	if len(v) == 0 || v[0] == nil {
		return true, nil
	}

	return v[0].ValidateStruct(t, t.SchemaType())
}

// SchemaType is the NATS schema type io.nats.jetstream.api.v1.stream_create_response
func (t JSApiStreamCreateResponse) SchemaType() string {
	return "io.nats.jetstream.api.v1.stream_create_response"
}

// SchemaID is the url to the JSON Schema for JetStream Consumer Configuration
func (t JSApiStreamCreateResponse) SchemaID() string {
	return "https://raw.githubusercontent.com/nats-io/jetstream/master/schemas/jetstream/api/v1/stream_create_response.json"
}

// Schema is a JSON Schema document for the JetStream Consumer Configuration
func (t JSApiStreamCreateResponse) Schema() []byte {
	return schemas[t.SchemaType()]
}

// Validate performs a JSON Schema validation of the configuration
func (t JSApiStreamDeleteResponse) Validate(v ...StructValidator) (valid bool, errors []string) {
	if len(v) == 0 || v[0] == nil {
		return true, nil
	}

	return v[0].ValidateStruct(t, t.SchemaType())
}

// SchemaType is the NATS schema type io.nats.jetstream.api.v1.stream_delete_response
func (t JSApiStreamDeleteResponse) SchemaType() string {
	return "io.nats.jetstream.api.v1.stream_delete_response"
}

// SchemaID is the url to the JSON Schema for JetStream Consumer Configuration
func (t JSApiStreamDeleteResponse) SchemaID() string {
	return "https://raw.githubusercontent.com/nats-io/jetstream/master/schemas/jetstream/api/v1/stream_delete_response.json"
}

// Schema is a JSON Schema document for the JetStream Consumer Configuration
func (t JSApiStreamDeleteResponse) Schema() []byte {
	return schemas[t.SchemaType()]
}

// Validate performs a JSON Schema validation of the configuration
func (t JSApiStreamInfoResponse) Validate(v ...StructValidator) (valid bool, errors []string) {
	if len(v) == 0 || v[0] == nil {
		return true, nil
	}

	return v[0].ValidateStruct(t, t.SchemaType())
}

// SchemaType is the NATS schema type io.nats.jetstream.api.v1.stream_info_response
func (t JSApiStreamInfoResponse) SchemaType() string {
	return "io.nats.jetstream.api.v1.stream_info_response"
}

// SchemaID is the url to the JSON Schema for JetStream Consumer Configuration
func (t JSApiStreamInfoResponse) SchemaID() string {
	return "https://raw.githubusercontent.com/nats-io/jetstream/master/schemas/jetstream/api/v1/stream_info_response.json"
}

// Schema is a JSON Schema document for the JetStream Consumer Configuration
func (t JSApiStreamInfoResponse) Schema() []byte {
	return schemas[t.SchemaType()]
}

// Validate performs a JSON Schema validation of the configuration
func (t JSApiStreamListRequest) Validate(v ...StructValidator) (valid bool, errors []string) {
	if len(v) == 0 || v[0] == nil {
		return true, nil
	}

	return v[0].ValidateStruct(t, t.SchemaType())
}

// SchemaType is the NATS schema type io.nats.jetstream.api.v1.stream_list_request
func (t JSApiStreamListRequest) SchemaType() string {
	return "io.nats.jetstream.api.v1.stream_list_request"
}

// SchemaID is the url to the JSON Schema for JetStream Consumer Configuration
func (t JSApiStreamListRequest) SchemaID() string {
	return "https://raw.githubusercontent.com/nats-io/jetstream/master/schemas/jetstream/api/v1/stream_list_request.json"
}

// Schema is a JSON Schema document for the JetStream Consumer Configuration
func (t JSApiStreamListRequest) Schema() []byte {
	return schemas[t.SchemaType()]
}

// Validate performs a JSON Schema validation of the configuration
func (t JSApiStreamListResponse) Validate(v ...StructValidator) (valid bool, errors []string) {
	if len(v) == 0 || v[0] == nil {
		return true, nil
	}

	return v[0].ValidateStruct(t, t.SchemaType())
}

// SchemaType is the NATS schema type io.nats.jetstream.api.v1.stream_list_response
func (t JSApiStreamListResponse) SchemaType() string {
	return "io.nats.jetstream.api.v1.stream_list_response"
}

// SchemaID is the url to the JSON Schema for JetStream Consumer Configuration
func (t JSApiStreamListResponse) SchemaID() string {
	return "https://raw.githubusercontent.com/nats-io/jetstream/master/schemas/jetstream/api/v1/stream_list_response.json"
}

// Schema is a JSON Schema document for the JetStream Consumer Configuration
func (t JSApiStreamListResponse) Schema() []byte {
	return schemas[t.SchemaType()]
}

// Validate performs a JSON Schema validation of the configuration
func (t JSApiMsgDeleteResponse) Validate(v ...StructValidator) (valid bool, errors []string) {
	if len(v) == 0 || v[0] == nil {
		return true, nil
	}

	return v[0].ValidateStruct(t, t.SchemaType())
}

// SchemaType is the NATS schema type io.nats.jetstream.api.v1.stream_msg_delete_response
func (t JSApiMsgDeleteResponse) SchemaType() string {
	return "io.nats.jetstream.api.v1.stream_msg_delete_response"
}

// SchemaID is the url to the JSON Schema for JetStream Consumer Configuration
func (t JSApiMsgDeleteResponse) SchemaID() string {
	return "https://raw.githubusercontent.com/nats-io/jetstream/master/schemas/jetstream/api/v1/stream_msg_delete_response.json"
}

// Schema is a JSON Schema document for the JetStream Consumer Configuration
func (t JSApiMsgDeleteResponse) Schema() []byte {
	return schemas[t.SchemaType()]
}

// Validate performs a JSON Schema validation of the configuration
func (t JSApiMsgGetRequest) Validate(v ...StructValidator) (valid bool, errors []string) {
	if len(v) == 0 || v[0] == nil {
		return true, nil
	}

	return v[0].ValidateStruct(t, t.SchemaType())
}

// SchemaType is the NATS schema type io.nats.jetstream.api.v1.stream_msg_get_request
func (t JSApiMsgGetRequest) SchemaType() string {
	return "io.nats.jetstream.api.v1.stream_msg_get_request"
}

// SchemaID is the url to the JSON Schema for JetStream Consumer Configuration
func (t JSApiMsgGetRequest) SchemaID() string {
	return "https://raw.githubusercontent.com/nats-io/jetstream/master/schemas/jetstream/api/v1/stream_msg_get_request.json"
}

// Schema is a JSON Schema document for the JetStream Consumer Configuration
func (t JSApiMsgGetRequest) Schema() []byte {
	return schemas[t.SchemaType()]
}

// Validate performs a JSON Schema validation of the configuration
func (t JSApiMsgGetResponse) Validate(v ...StructValidator) (valid bool, errors []string) {
	if len(v) == 0 || v[0] == nil {
		return true, nil
	}

	return v[0].ValidateStruct(t, t.SchemaType())
}

// SchemaType is the NATS schema type io.nats.jetstream.api.v1.stream_msg_get_response
func (t JSApiMsgGetResponse) SchemaType() string {
	return "io.nats.jetstream.api.v1.stream_msg_get_response"
}

// SchemaID is the url to the JSON Schema for JetStream Consumer Configuration
func (t JSApiMsgGetResponse) SchemaID() string {
	return "https://raw.githubusercontent.com/nats-io/jetstream/master/schemas/jetstream/api/v1/stream_msg_get_response.json"
}

// Schema is a JSON Schema document for the JetStream Consumer Configuration
func (t JSApiMsgGetResponse) Schema() []byte {
	return schemas[t.SchemaType()]
}

// Validate performs a JSON Schema validation of the configuration
func (t JSApiStreamNamesRequest) Validate(v ...StructValidator) (valid bool, errors []string) {
	if len(v) == 0 || v[0] == nil {
		return true, nil
	}

	return v[0].ValidateStruct(t, t.SchemaType())
}

// SchemaType is the NATS schema type io.nats.jetstream.api.v1.stream_names_request
func (t JSApiStreamNamesRequest) SchemaType() string {
	return "io.nats.jetstream.api.v1.stream_names_request"
}

// SchemaID is the url to the JSON Schema for JetStream Consumer Configuration
func (t JSApiStreamNamesRequest) SchemaID() string {
	return "https://raw.githubusercontent.com/nats-io/jetstream/master/schemas/jetstream/api/v1/stream_names_request.json"
}

// Schema is a JSON Schema document for the JetStream Consumer Configuration
func (t JSApiStreamNamesRequest) Schema() []byte {
	return schemas[t.SchemaType()]
}

// Validate performs a JSON Schema validation of the configuration
func (t JSApiStreamNamesResponse) Validate(v ...StructValidator) (valid bool, errors []string) {
	if len(v) == 0 || v[0] == nil {
		return true, nil
	}

	return v[0].ValidateStruct(t, t.SchemaType())
}

// SchemaType is the NATS schema type io.nats.jetstream.api.v1.stream_names_response
func (t JSApiStreamNamesResponse) SchemaType() string {
	return "io.nats.jetstream.api.v1.stream_names_response"
}

// SchemaID is the url to the JSON Schema for JetStream Consumer Configuration
func (t JSApiStreamNamesResponse) SchemaID() string {
	return "https://raw.githubusercontent.com/nats-io/jetstream/master/schemas/jetstream/api/v1/stream_names_response.json"
}

// Schema is a JSON Schema document for the JetStream Consumer Configuration
func (t JSApiStreamNamesResponse) Schema() []byte {
	return schemas[t.SchemaType()]
}

// Validate performs a JSON Schema validation of the configuration
func (t JSApiStreamPurgeResponse) Validate(v ...StructValidator) (valid bool, errors []string) {
	if len(v) == 0 || v[0] == nil {
		return true, nil
	}

	return v[0].ValidateStruct(t, t.SchemaType())
}

// SchemaType is the NATS schema type io.nats.jetstream.api.v1.stream_purge_response
func (t JSApiStreamPurgeResponse) SchemaType() string {
	return "io.nats.jetstream.api.v1.stream_purge_response"
}

// SchemaID is the url to the JSON Schema for JetStream Consumer Configuration
func (t JSApiStreamPurgeResponse) SchemaID() string {
	return "https://raw.githubusercontent.com/nats-io/jetstream/master/schemas/jetstream/api/v1/stream_purge_response.json"
}

// Schema is a JSON Schema document for the JetStream Consumer Configuration
func (t JSApiStreamPurgeResponse) Schema() []byte {
	return schemas[t.SchemaType()]
}

// Validate performs a JSON Schema validation of the configuration
func (t JSApiStreamSnapshotResponse) Validate(v ...StructValidator) (valid bool, errors []string) {
	if len(v) == 0 || v[0] == nil {
		return true, nil
	}

	return v[0].ValidateStruct(t, t.SchemaType())
}

// SchemaType is the NATS schema type io.nats.jetstream.api.v1.stream_snapshot_response
func (t JSApiStreamSnapshotResponse) SchemaType() string {
	return "io.nats.jetstream.api.v1.stream_snapshot_response"
}

// SchemaID is the url to the JSON Schema for JetStream Consumer Configuration
func (t JSApiStreamSnapshotResponse) SchemaID() string {
	return "https://raw.githubusercontent.com/nats-io/jetstream/master/schemas/jetstream/api/v1/stream_snapshot_response.json"
}

// Schema is a JSON Schema document for the JetStream Consumer Configuration
func (t JSApiStreamSnapshotResponse) Schema() []byte {
	return schemas[t.SchemaType()]
}

// Validate performs a JSON Schema validation of the configuration
func (t JSApiStreamSnapshotRequest) Validate(v ...StructValidator) (valid bool, errors []string) {
	if len(v) == 0 || v[0] == nil {
		return true, nil
	}

	return v[0].ValidateStruct(t, t.SchemaType())
}

// SchemaType is the NATS schema type io.nats.jetstream.api.v1.stream_snapshot_request
func (t JSApiStreamSnapshotRequest) SchemaType() string {
	return "io.nats.jetstream.api.v1.stream_snapshot_request"
}

// SchemaID is the url to the JSON Schema for JetStream Consumer Configuration
func (t JSApiStreamSnapshotRequest) SchemaID() string {
	return "https://raw.githubusercontent.com/nats-io/jetstream/master/schemas/jetstream/api/v1/stream_snapshot_request.json"
}

// Schema is a JSON Schema document for the JetStream Consumer Configuration
func (t JSApiStreamSnapshotRequest) Schema() []byte {
	return schemas[t.SchemaType()]
}

// Validate performs a JSON Schema validation of the configuration
func (t JSApiStreamRestoreRequest) Validate(v ...StructValidator) (valid bool, errors []string) {
	if len(v) == 0 || v[0] == nil {
		return true, nil
	}

	return v[0].ValidateStruct(t, t.SchemaType())
}

// SchemaType is the NATS schema type io.nats.jetstream.api.v1.stream_restore_request
func (t JSApiStreamRestoreRequest) SchemaType() string {
	return "io.nats.jetstream.api.v1.stream_restore_request"
}

// SchemaID is the url to the JSON Schema for JetStream Consumer Configuration
func (t JSApiStreamRestoreRequest) SchemaID() string {
	return "https://raw.githubusercontent.com/nats-io/jetstream/master/schemas/jetstream/api/v1/stream_restore_request.json"
}

// Schema is a JSON Schema document for the JetStream Consumer Configuration
func (t JSApiStreamRestoreRequest) Schema() []byte {
	return schemas[t.SchemaType()]
}

// Validate performs a JSON Schema validation of the configuration
func (t JSApiStreamRestoreResponse) Validate(v ...StructValidator) (valid bool, errors []string) {
	if len(v) == 0 || v[0] == nil {
		return true, nil
	}

	return v[0].ValidateStruct(t, t.SchemaType())
}

// SchemaType is the NATS schema type io.nats.jetstream.api.v1.stream_restore_response
func (t JSApiStreamRestoreResponse) SchemaType() string {
	return "io.nats.jetstream.api.v1.stream_restore_response"
}

// SchemaID is the url to the JSON Schema for JetStream Consumer Configuration
func (t JSApiStreamRestoreResponse) SchemaID() string {
	return "https://raw.githubusercontent.com/nats-io/jetstream/master/schemas/jetstream/api/v1/stream_restore_response.json"
}

// Schema is a JSON Schema document for the JetStream Consumer Configuration
func (t JSApiStreamRestoreResponse) Schema() []byte {
	return schemas[t.SchemaType()]
}

// Validate performs a JSON Schema validation of the configuration
func (t JSApiStreamTemplateCreateRequest) Validate(v ...StructValidator) (valid bool, errors []string) {
	if len(v) == 0 || v[0] == nil {
		return true, nil
	}

	return v[0].ValidateStruct(t, t.SchemaType())
}

// SchemaType is the NATS schema type io.nats.jetstream.api.v1.stream_template_create_request
func (t JSApiStreamTemplateCreateRequest) SchemaType() string {
	return "io.nats.jetstream.api.v1.stream_template_create_request"
}

// SchemaID is the url to the JSON Schema for JetStream Consumer Configuration
func (t JSApiStreamTemplateCreateRequest) SchemaID() string {
	return "https://raw.githubusercontent.com/nats-io/jetstream/master/schemas/jetstream/api/v1/stream_template_create_request.json"
}

// Schema is a JSON Schema document for the JetStream Consumer Configuration
func (t JSApiStreamTemplateCreateRequest) Schema() []byte {
	return schemas[t.SchemaType()]
}

// Validate performs a JSON Schema validation of the configuration
func (t JSApiStreamTemplateCreateResponse) Validate(v ...StructValidator) (valid bool, errors []string) {
	if len(v) == 0 || v[0] == nil {
		return true, nil
	}

	return v[0].ValidateStruct(t, t.SchemaType())
}

// SchemaType is the NATS schema type io.nats.jetstream.api.v1.stream_template_create_response
func (t JSApiStreamTemplateCreateResponse) SchemaType() string {
	return "io.nats.jetstream.api.v1.stream_template_create_response"
}

// SchemaID is the url to the JSON Schema for JetStream Consumer Configuration
func (t JSApiStreamTemplateCreateResponse) SchemaID() string {
	return "https://raw.githubusercontent.com/nats-io/jetstream/master/schemas/jetstream/api/v1/stream_template_create_response.json"
}

// Schema is a JSON Schema document for the JetStream Consumer Configuration
func (t JSApiStreamTemplateCreateResponse) Schema() []byte {
	return schemas[t.SchemaType()]
}

// Validate performs a JSON Schema validation of the configuration
func (t JSApiStreamTemplateDeleteResponse) Validate(v ...StructValidator) (valid bool, errors []string) {
	if len(v) == 0 || v[0] == nil {
		return true, nil
	}

	return v[0].ValidateStruct(t, t.SchemaType())
}

// SchemaType is the NATS schema type io.nats.jetstream.api.v1.stream_template_delete_response
func (t JSApiStreamTemplateDeleteResponse) SchemaType() string {
	return "io.nats.jetstream.api.v1.stream_template_delete_response"
}

// SchemaID is the url to the JSON Schema for JetStream Consumer Configuration
func (t JSApiStreamTemplateDeleteResponse) SchemaID() string {
	return "https://raw.githubusercontent.com/nats-io/jetstream/master/schemas/jetstream/api/v1/stream_template_delete_response.json"
}

// Schema is a JSON Schema document for the JetStream Consumer Configuration
func (t JSApiStreamTemplateDeleteResponse) Schema() []byte {
	return schemas[t.SchemaType()]
}

// Validate performs a JSON Schema validation of the configuration
func (t JSApiStreamTemplateInfoResponse) Validate(v ...StructValidator) (valid bool, errors []string) {
	if len(v) == 0 || v[0] == nil {
		return true, nil
	}

	return v[0].ValidateStruct(t, t.SchemaType())
}

// SchemaType is the NATS schema type io.nats.jetstream.api.v1.stream_template_info_response
func (t JSApiStreamTemplateInfoResponse) SchemaType() string {
	return "io.nats.jetstream.api.v1.stream_template_info_response"
}

// SchemaID is the url to the JSON Schema for JetStream Consumer Configuration
func (t JSApiStreamTemplateInfoResponse) SchemaID() string {
	return "https://raw.githubusercontent.com/nats-io/jetstream/master/schemas/jetstream/api/v1/stream_template_info_response.json"
}

// Schema is a JSON Schema document for the JetStream Consumer Configuration
func (t JSApiStreamTemplateInfoResponse) Schema() []byte {
	return schemas[t.SchemaType()]
}

// Validate performs a JSON Schema validation of the configuration
func (t JSApiStreamTemplateNamesResponse) Validate(v ...StructValidator) (valid bool, errors []string) {
	if len(v) == 0 || v[0] == nil {
		return true, nil
	}

	return v[0].ValidateStruct(t, t.SchemaType())
}

// SchemaType is the NATS schema type io.nats.jetstream.api.v1.stream_template_names_response
func (t JSApiStreamTemplateNamesResponse) SchemaType() string {
	return "io.nats.jetstream.api.v1.stream_template_names_response"
}

// SchemaID is the url to the JSON Schema for JetStream Consumer Configuration
func (t JSApiStreamTemplateNamesResponse) SchemaID() string {
	return "https://raw.githubusercontent.com/nats-io/jetstream/master/schemas/jetstream/api/v1/stream_template_names_response.json"
}

// Schema is a JSON Schema document for the JetStream Consumer Configuration
func (t JSApiStreamTemplateNamesResponse) Schema() []byte {
	return schemas[t.SchemaType()]
}

// Validate performs a JSON Schema validation of the configuration
func (t JSApiStreamTemplateNamesRequest) Validate(v ...StructValidator) (valid bool, errors []string) {
	if len(v) == 0 || v[0] == nil {
		return true, nil
	}

	return v[0].ValidateStruct(t, t.SchemaType())
}

// SchemaType is the NATS schema type io.nats.jetstream.api.v1.stream_template_names_request
func (t JSApiStreamTemplateNamesRequest) SchemaType() string {
	return "io.nats.jetstream.api.v1.stream_template_names_request"
}

// SchemaID is the url to the JSON Schema for JetStream Consumer Configuration
func (t JSApiStreamTemplateNamesRequest) SchemaID() string {
	return "https://raw.githubusercontent.com/nats-io/jetstream/master/schemas/jetstream/api/v1/stream_template_names_request.json"
}

// Schema is a JSON Schema document for the JetStream Consumer Configuration
func (t JSApiStreamTemplateNamesRequest) Schema() []byte {
	return schemas[t.SchemaType()]
}

// Validate performs a JSON Schema validation of the configuration
func (t JSApiStreamUpdateResponse) Validate(v ...StructValidator) (valid bool, errors []string) {
	if len(v) == 0 || v[0] == nil {
		return true, nil
	}

	return v[0].ValidateStruct(t, t.SchemaType())
}

// SchemaType is the NATS schema type io.nats.jetstream.api.v1.stream_update_response
func (t JSApiStreamUpdateResponse) SchemaType() string {
	return "io.nats.jetstream.api.v1.stream_update_response"
}

// SchemaID is the url to the JSON Schema for JetStream Consumer Configuration
func (t JSApiStreamUpdateResponse) SchemaID() string {
	return "https://raw.githubusercontent.com/nats-io/jetstream/master/schemas/jetstream/api/v1/stream_update_response.json"
}

// Schema is a JSON Schema document for the JetStream Consumer Configuration
func (t JSApiStreamUpdateResponse) Schema() []byte {
	return schemas[t.SchemaType()]
}

// Validate performs a JSON Schema validation of the configuration
func (t JSApiStreamRemovePeerRequest) Validate(v ...StructValidator) (valid bool, errors []string) {
	if len(v) == 0 || v[0] == nil {
		return true, nil
	}

	return v[0].ValidateStruct(t, t.SchemaType())
}

// SchemaType is the NATS schema type io.nats.jetstream.api.v1.stream_remove_peer_request
func (t JSApiStreamRemovePeerRequest) SchemaType() string {
	return "io.nats.jetstream.api.v1.stream_remove_peer_request"
}

// SchemaID is the url to the JSON Schema for JetStream Consumer Configuration
func (t JSApiStreamRemovePeerRequest) SchemaID() string {
	return "https://raw.githubusercontent.com/nats-io/jetstream/master/schemas/jetstream/api/v1/stream_remove_peer_request.json"
}

// Schema is a JSON Schema document for the JetStream Consumer Configuration
func (t JSApiStreamRemovePeerRequest) Schema() []byte {
	return schemas[t.SchemaType()]
}

// Validate performs a JSON Schema validation of the configuration
func (t JSApiStreamRemovePeerResponse) Validate(v ...StructValidator) (valid bool, errors []string) {
	if len(v) == 0 || v[0] == nil {
		return true, nil
	}

	return v[0].ValidateStruct(t, t.SchemaType())
}

// SchemaType is the NATS schema type io.nats.jetstream.api.v1.stream_remove_peer_response
func (t JSApiStreamRemovePeerResponse) SchemaType() string {
	return "io.nats.jetstream.api.v1.stream_remove_peer_response"
}

// SchemaID is the url to the JSON Schema for JetStream Consumer Configuration
func (t JSApiStreamRemovePeerResponse) SchemaID() string {
	return "https://raw.githubusercontent.com/nats-io/jetstream/master/schemas/jetstream/api/v1/stream_remove_peer_response.json"
}

// Schema is a JSON Schema document for the JetStream Consumer Configuration
func (t JSApiStreamRemovePeerResponse) Schema() []byte {
	return schemas[t.SchemaType()]
}

// Validate performs a JSON Schema validation of the configuration
func (t JSApiStreamLeaderStepDownResponse) Validate(v ...StructValidator) (valid bool, errors []string) {
	if len(v) == 0 || v[0] == nil {
		return true, nil
	}

	return v[0].ValidateStruct(t, t.SchemaType())
}

// SchemaType is the NATS schema type io.nats.jetstream.api.v1.stream_leader_stepdown_response
func (t JSApiStreamLeaderStepDownResponse) SchemaType() string {
	return "io.nats.jetstream.api.v1.stream_leader_stepdown_response"
}

// SchemaID is the url to the JSON Schema for JetStream Consumer Configuration
func (t JSApiStreamLeaderStepDownResponse) SchemaID() string {
	return "https://raw.githubusercontent.com/nats-io/jetstream/master/schemas/jetstream/api/v1/stream_leader_stepdown_response.json"
}

// Schema is a JSON Schema document for the JetStream Consumer Configuration
func (t JSApiStreamLeaderStepDownResponse) Schema() []byte {
	return schemas[t.SchemaType()]
}

// Validate performs a JSON Schema validation of the configuration
func (t JSPubAckResponse) Validate(v ...StructValidator) (valid bool, errors []string) {
	if len(v) == 0 || v[0] == nil {
		return true, nil
	}

	return v[0].ValidateStruct(t, t.SchemaType())
}

// SchemaType is the NATS schema type io.nats.jetstream.api.v1.pub_ack_response
func (t JSPubAckResponse) SchemaType() string {
	return "io.nats.jetstream.api.v1.pub_ack_response"
}

// SchemaID is the url to the JSON Schema for JetStream Consumer Configuration
func (t JSPubAckResponse) SchemaID() string {
	return "https://raw.githubusercontent.com/nats-io/jetstream/master/schemas/jetstream/api/v1/pub_ack_response.json"
}

// Schema is a JSON Schema document for the JetStream Consumer Configuration
func (t JSPubAckResponse) Schema() []byte {
	return schemas[t.SchemaType()]
}

// Validate performs a JSON Schema validation of the configuration
func (t JSApiLeaderStepDownRequest) Validate(v ...StructValidator) (valid bool, errors []string) {
	if len(v) == 0 || v[0] == nil {
		return true, nil
	}

	return v[0].ValidateStruct(t, t.SchemaType())
}

// SchemaType is the NATS schema type io.nats.jetstream.api.v1.meta_leader_stepdown_request
func (t JSApiLeaderStepDownRequest) SchemaType() string {
	return "io.nats.jetstream.api.v1.meta_leader_stepdown_request"
}

// SchemaID is the url to the JSON Schema for JetStream Consumer Configuration
func (t JSApiLeaderStepDownRequest) SchemaID() string {
	return "https://raw.githubusercontent.com/nats-io/jetstream/master/schemas/jetstream/api/v1/meta_leader_stepdown_request.json"
}

// Schema is a JSON Schema document for the JetStream Consumer Configuration
func (t JSApiLeaderStepDownRequest) Schema() []byte {
	return schemas[t.SchemaType()]
}

// Validate performs a JSON Schema validation of the configuration
func (t JSApiLeaderStepDownResponse) Validate(v ...StructValidator) (valid bool, errors []string) {
	if len(v) == 0 || v[0] == nil {
		return true, nil
	}

	return v[0].ValidateStruct(t, t.SchemaType())
}

// SchemaType is the NATS schema type io.nats.jetstream.api.v1.meta_leader_stepdown_response
func (t JSApiLeaderStepDownResponse) SchemaType() string {
	return "io.nats.jetstream.api.v1.meta_leader_stepdown_response"
}

// SchemaID is the url to the JSON Schema for JetStream Consumer Configuration
func (t JSApiLeaderStepDownResponse) SchemaID() string {
	return "https://raw.githubusercontent.com/nats-io/jetstream/master/schemas/jetstream/api/v1/meta_leader_stepdown_response.json"
}

// Schema is a JSON Schema document for the JetStream Consumer Configuration
func (t JSApiLeaderStepDownResponse) Schema() []byte {
	return schemas[t.SchemaType()]
}

func init() {
	schemas = make(map[string][]byte)
	schemas["io.nats.server.advisory.v1.client_connect"], _ = base64.StdEncoding.DecodeString("ewogICIkc2NoZW1hIjogImh0dHA6Ly9qc29uLXNjaGVtYS5vcmcvZHJhZnQtMDcvc2NoZW1hIyIsCiAgIiRpZCI6ICJodHRwczovL25hdHMuaW8vc2NoZW1hcy9zZXJ2ZXIvYWR2aXNvcnkvdjEvY2xpZW50X2Nvbm5lY3QuanNvbiIsCiAgImRlc2NyaXB0aW9uIjogIkFkdmlzb3J5IHB1Ymxpc2hlZCBhIGNsaWVudCBjb25uZWN0cyB0byB0aGUgTkFUUyBTZXJ2ZXIiLAogICJ0aXRsZSI6ICJpby5uYXRzLnNlcnZlci5hZHZpc29yeS52MS5jbGllbnRfY29ubmVjdCIsCiAgInR5cGUiOiAib2JqZWN0IiwKICAicmVxdWlyZWQiOiBbCiAgICAidHlwZSIsCiAgICAiaWQiLAogICAgInRpbWVzdGFtcCIsCiAgICAic2VydmVyIiwKICAgICJjbGllbnQiCiAgXSwKICAiYWRkaXRpb25hbFByb3BlcnRpZXMiOiBmYWxzZSwKICAicHJvcGVydGllcyI6IHsKICAgICJ0eXBlIjogewogICAgICAidHlwZSI6ICJzdHJpbmciLAogICAgICAiY29uc3QiOiAiaW8ubmF0cy5zZXJ2ZXIuYWR2aXNvcnkudjEuY2xpZW50X2Nvbm5lY3QiCiAgICB9LAogICAgImlkIjogewogICAgICAidHlwZSI6ICJzdHJpbmciLAogICAgICAiZGVzY3JpcHRpb24iOiAiVW5pcXVlIGNvcnJlbGF0aW9uIElEIGZvciB0aGlzIGV2ZW50IgogICAgfSwKICAgICJ0aW1lc3RhbXAiOiB7CiAgICAgICJ0eXBlIjogInN0cmluZyIsCiAgICAgICJkZXNjcmlwdGlvbiI6ICJUaGUgdGltZSB0aGlzIGV2ZW50IHdhcyBjcmVhdGVkIGluIFJGQzMzMzkgZm9ybWF0IgogICAgfSwKICAgICJzZXJ2ZXIiOiB7CiAgICAgICJ0eXBlIjogIm9iamVjdCIsCiAgICAgICJhZGRpdGlvbmFsUHJvcGVydGllcyI6IGZhbHNlLAogICAgICAiZGVzY3JpcHRpb24iOiAiRGV0YWlscyBhYm91dCB0aGUgc2VydmVyIHRoZSBjbGllbnQgY29ubmVjdGVkIHRvIiwKICAgICAgInJlcXVpcmVkIjogWwogICAgICAgICJuYW1lIiwKICAgICAgICAiaG9zdCIsCiAgICAgICAgImlkIiwKICAgICAgICAidmVyIiwKICAgICAgICAic2VxIiwKICAgICAgICAiamV0c3RyZWFtIiwKICAgICAgICAidGltZSIKICAgICAgXSwKICAgICAgInByb3BlcnRpZXMiOiB7CiAgICAgICAgIm5hbWUiOiB7CiAgICAgICAgICAidHlwZSI6ICJzdHJpbmciLAogICAgICAgICAgImRlc2NyaXB0aW9uIjogIlRoZSBjb25maWd1cmVkIG5hbWUgZm9yIHRoZSBzZXJ2ZXIsIG1hdGNoZXMgSUQgd2hlbiB1bmNvbmZpZ3VyZWQiLAogICAgICAgICAgIm1pbkxlbmd0aCI6IDEKICAgICAgICB9LAogICAgICAgICJob3N0IjogewogICAgICAgICAgInR5cGUiOiAic3RyaW5nIiwKICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJUaGUgaG9zdCB0aGlzIHNlcnZlciBydW5zIG9uLCB0eXBpY2FsbHkgYSBJUCBhZGRyZXNzIgogICAgICAgIH0sCiAgICAgICAgImlkIjogewogICAgICAgICAgInR5cGUiOiAic3RyaW5nIiwKICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJUaGUgdW5pcXVlIHNlcnZlciBJRCBmb3IgdGhpcyBub2RlIgogICAgICAgIH0sCiAgICAgICAgImNsdXN0ZXIiOiB7CiAgICAgICAgICAidHlwZSI6ICJzdHJpbmciLAogICAgICAgICAgImRlc2NyaXB0aW9uIjogIlRoZSBjbHVzdGVyIHRoZSBzZXJ2ZXIgYmVsb25ncyB0byIKICAgICAgICB9LAogICAgICAgICJ2ZXIiOiB7CiAgICAgICAgICAidHlwZSI6ICJzdHJpbmciLAogICAgICAgICAgImRlc2NyaXB0aW9uIjogIlRoZSB2ZXJzaW9uIE5BVFMgcnVubmluZyBvbiB0aGUgc2VydmVyIgogICAgICAgIH0sCiAgICAgICAgInNlcSI6IHsKICAgICAgICAgICJ0eXBlIjogImludGVnZXIiLAogICAgICAgICAgImRlc2NyaXB0aW9uIjogIkludGVybmFsIHNlcnZlciBzZXF1ZW5jZSBJRCIKICAgICAgICB9LAogICAgICAgICJqZXRzdHJlYW0iOiB7CiAgICAgICAgICAidHlwZSI6ICJib29sZWFuIiwKICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJJbmRpY2F0ZXMgaWYgdGhpcyBzZXJ2ZXIgaGFzIEpldFN0cmVhbSBlbmFibGVkIgogICAgICAgIH0sCiAgICAgICAgInRpbWUiOiB7CiAgICAgICAgICAidHlwZSI6ICJzdHJpbmciLAogICAgICAgICAgImRlc2NyaXB0aW9uIjogIlRoZSBsb2NhbCB0aW1lIG9mIHRoZSBzZXJ2ZXIiCiAgICAgICAgfQogICAgICB9CiAgICB9LAogICAgImNsaWVudCI6IHsKICAgICAgInR5cGUiOiAib2JqZWN0IiwKICAgICAgImFkZGl0aW9uYWxQcm9wZXJ0aWVzIjogZmFsc2UsCiAgICAgICJkZXNjcmlwdGlvbiI6ICJEZXRhaWxzIGFib3V0IHRoZSBjbGllbnQgdGhhdCBjb25uZWN0ZWQgdG8gdGhlIHNlcnZlciIsCiAgICAgICJyZXF1aXJlZCI6IFsKICAgICAgICAiYWNjIgogICAgICBdLAogICAgICAicHJvcGVydGllcyI6IHsKICAgICAgICAic3RhcnQiOiB7CiAgICAgICAgICAidHlwZSI6ICJzdHJpbmciLAogICAgICAgICAgImRlc2NyaXB0aW9uIjogIlRpbWVzdGFtcCB3aGVuIHRoZSBjbGllbnQgY29ubmVjdGVkIgogICAgICAgIH0sCiAgICAgICAgInN0b3AiOiB7CiAgICAgICAgICAidHlwZSI6ICJzdHJpbmciLAogICAgICAgICAgImRlc2NyaXB0aW9uIjogIlRpbWVzdGFtcCB3aGVuIHRoZSBjbGllbnQgZGlzY29ubmVjdGVkIgogICAgICAgIH0sCiAgICAgICAgImhvc3QiOiB7CiAgICAgICAgICAidHlwZSI6ICJzdHJpbmciLAogICAgICAgICAgImRlc2NyaXB0aW9uIjogIlRoZSByZW1vdGUgaG9zdCB0aGUgY2xpZW50IGlzIGNvbm5lY3RlZCBmcm9tIgogICAgICAgIH0sCiAgICAgICAgImlkIjogewogICAgICAgICAgInR5cGUiOiAic3RyaW5nIiwKICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJUaGUgaW50ZXJuYWxseSBhc3NpZ25lZCBjbGllbnQgSUQgZm9yIHRoaXMgY29ubmVjdGlvbiIKICAgICAgICB9LAogICAgICAgICJhY2MiOiB7CiAgICAgICAgICAidHlwZSI6ICJzdHJpbmciLAogICAgICAgICAgImRlc2NyaXB0aW9uIjogIlRoZSBhY2NvdW50IHRoaXMgdXNlciBsb2dnZWQgaW4gdG8iCiAgICAgICAgfSwKICAgICAgICAidXNlciI6IHsKICAgICAgICAgICJ0eXBlIjogInN0cmluZyIsCiAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiVGhlIGNsaWVudHMgdXNlcm5hbWUiCiAgICAgICAgfSwKICAgICAgICAibmFtZSI6IHsKICAgICAgICAgICJ0eXBlIjogInN0cmluZyIsCiAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiVGhlIG5hbWUgcHJlc2VudGVkIGJ5IHRoZSBjbGllbnQgZHVyaW5nIGNvbm5lY3Rpb24iCiAgICAgICAgfSwKICAgICAgICAibGFuZyI6IHsKICAgICAgICAgICJ0eXBlIjogInN0cmluZyIsCiAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiVGhlIHByb2dyYW1taW5nIGxhbmd1YWdlIGxpYnJhcnkgaW4gdXNlIGJ5IHRoZSBjbGllbnQiCiAgICAgICAgfSwKICAgICAgICAidmVyIjogewogICAgICAgICAgInR5cGUiOiAic3RyaW5nIiwKICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJUaGUgdmVyc2lvbiBvZiB0aGUgY2xpZW50IGxpYnJhcnkgaW4gdXNlIgogICAgICAgIH0sCiAgICAgICAgInJ0dCI6IHsKICAgICAgICAgICJ0eXBlIjogIm51bWJlciIsCiAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiVGhlIGxhc3Qga25vd24gbGF0ZW5jeSBiZXR3ZWVuIHRoZSBOQVRTIFNlcnZlciBhbmQgdGhlIENsaWVudCBpbiBuYW5vc2Vjb25kcyIKICAgICAgICB9LAogICAgICAgICJzZXJ2ZXIiOiB7CiAgICAgICAgICAidHlwZSI6ICJzdHJpbmciLAogICAgICAgICAgImRlc2NyaXB0aW9uIjogIlRoZSBzZXJ2ZXIgdGhhdCB0aGUgY2xpZW50IHdhcyBjb25uZWN0ZWQgdG8iCiAgICAgICAgfSwKICAgICAgICAiY2x1c3RlciI6IHsKICAgICAgICAgICJ0eXBlIjogInN0cmluZyIsCiAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiVGhlIGNsdXN0ZXIgbmFtZSB0aGUgc2VydmVyIGlzIGNvbm5lY3RlZCB0byIKICAgICAgICB9LAogICAgICAgICJqd3QiOiB7CiAgICAgICAgICAidHlwZSI6ICJzdHJpbmciLAogICAgICAgICAgImRlc2NyaXB0aW9uIjogIlRoZSBKV1QgcHJlc2VudGVkIGluIHRoZSBjb25uZWN0aW9uIgogICAgICAgIH0sCiAgICAgICAgImlzc3Vlcl9rZXkiOiB7CiAgICAgICAgICAidHlwZSI6ICJzdHJpbmciLAogICAgICAgICAgImRlc2NyaXB0aW9uIjogIlRoZSBwdWJsaWMgc2lnbmluZyBrZXkgb3IgYWNjb3VudCBpZGVudGl0eSBrZXkgdXNlZCB0byBpc3N1ZSB0aGUgdXNlciIKICAgICAgICB9LAogICAgICAgICJuYW1lX3RhZyI6IHsKICAgICAgICAgICJ0eXBlIjogInN0cmluZyIsCiAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiVGhlIG5hbWUgZXh0cmFjdGVkIGZyb20gdGhlIHVzZXIgSldUIGNsYWltIgogICAgICAgIH0sCiAgICAgICAgInRhZ3MiOiB7CiAgICAgICAgICAidHlwZSI6ICJhcnJheSIsCiAgICAgICAgICAiaXRlbXMiOiB7CiAgICAgICAgICAgICJ0eXBlIjogInN0cmluZyIKICAgICAgICAgIH0sCiAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiVGFncyBleHRyYWN0ZWQgZnJvbSB0aGUgSldUIgogICAgICAgIH0KICAgICAgfQogICAgfQogIH0KfQo=")
	schemas["io.nats.server.advisory.v1.client_disconnect"], _ = base64.StdEncoding.DecodeString("ewogICIkc2NoZW1hIjogImh0dHA6Ly9qc29uLXNjaGVtYS5vcmcvZHJhZnQtMDcvc2NoZW1hIyIsCiAgIiRpZCI6ICJodHRwczovL25hdHMuaW8vc2NoZW1hcy9zZXJ2ZXIvYWR2aXNvcnkvdjEvY2xpZW50X2Rpc2Nvbm5lY3QuanNvbiIsCiAgImRlc2NyaXB0aW9uIjogIkFkdmlzb3J5IHB1Ymxpc2hlZCBhIGNsaWVudCBkaXNjb25uZWN0cyB0byB0aGUgTkFUUyBTZXJ2ZXIiLAogICJ0aXRsZSI6ICJpby5uYXRzLnNlcnZlci5hZHZpc29yeS52MS5jbGllbnRfZGlzY29ubmVjdCIsCiAgInR5cGUiOiAib2JqZWN0IiwKICAicmVxdWlyZWQiOiBbCiAgICAidHlwZSIsCiAgICAiaWQiLAogICAgInRpbWVzdGFtcCIsCiAgICAic2VydmVyIiwKICAgICJjbGllbnQiLAogICAgInNlbnQiLAogICAgInJlY2VpdmVkIiwKICAgICJyZWFzb24iCiAgXSwKICAiYWRkaXRpb25hbFByb3BlcnRpZXMiOiBmYWxzZSwKICAicHJvcGVydGllcyI6IHsKICAgICJ0eXBlIjogewogICAgICAidHlwZSI6ICJzdHJpbmciLAogICAgICAiY29uc3QiOiAiaW8ubmF0cy5zZXJ2ZXIuYWR2aXNvcnkudjEuY2xpZW50X2Rpc2Nvbm5lY3QiCiAgICB9LAogICAgImlkIjogewogICAgICAidHlwZSI6ICJzdHJpbmciLAogICAgICAiZGVzY3JpcHRpb24iOiAiVW5pcXVlIGNvcnJlbGF0aW9uIElEIGZvciB0aGlzIGV2ZW50IgogICAgfSwKICAgICJ0aW1lc3RhbXAiOiB7CiAgICAgICJ0eXBlIjogInN0cmluZyIsCiAgICAgICJkZXNjcmlwdGlvbiI6ICJUaGUgdGltZSB0aGlzIGV2ZW50IHdhcyBjcmVhdGVkIGluIFJGQzMzMzkgZm9ybWF0IgogICAgfSwKICAgICJzZXJ2ZXIiOiB7CiAgICAgICJ0eXBlIjogIm9iamVjdCIsCiAgICAgICJhZGRpdGlvbmFsUHJvcGVydGllcyI6IGZhbHNlLAogICAgICAiZGVzY3JpcHRpb24iOiAiRGV0YWlscyBhYm91dCB0aGUgc2VydmVyIHRoZSBjbGllbnQgY29ubmVjdGVkIHRvIiwKICAgICAgInJlcXVpcmVkIjogWwogICAgICAgICJuYW1lIiwKICAgICAgICAiaG9zdCIsCiAgICAgICAgImlkIiwKICAgICAgICAidmVyIiwKICAgICAgICAic2VxIiwKICAgICAgICAiamV0c3RyZWFtIiwKICAgICAgICAidGltZSIKICAgICAgXSwKICAgICAgInByb3BlcnRpZXMiOiB7CiAgICAgICAgIm5hbWUiOiB7CiAgICAgICAgICAidHlwZSI6ICJzdHJpbmciLAogICAgICAgICAgImRlc2NyaXB0aW9uIjogIlRoZSBjb25maWd1cmVkIG5hbWUgZm9yIHRoZSBzZXJ2ZXIsIG1hdGNoZXMgSUQgd2hlbiB1bmNvbmZpZ3VyZWQiLAogICAgICAgICAgIm1pbkxlbmd0aCI6IDEKICAgICAgICB9LAogICAgICAgICJob3N0IjogewogICAgICAgICAgInR5cGUiOiAic3RyaW5nIiwKICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJUaGUgaG9zdCB0aGlzIHNlcnZlciBydW5zIG9uLCB0eXBpY2FsbHkgYSBJUCBhZGRyZXNzIgogICAgICAgIH0sCiAgICAgICAgImlkIjogewogICAgICAgICAgInR5cGUiOiAic3RyaW5nIiwKICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJUaGUgdW5pcXVlIHNlcnZlciBJRCBmb3IgdGhpcyBub2RlIgogICAgICAgIH0sCiAgICAgICAgImNsdXN0ZXIiOiB7CiAgICAgICAgICAidHlwZSI6ICJzdHJpbmciLAogICAgICAgICAgImRlc2NyaXB0aW9uIjogIlRoZSBjbHVzdGVyIHRoZSBzZXJ2ZXIgYmVsb25ncyB0byIKICAgICAgICB9LAogICAgICAgICJ2ZXIiOiB7CiAgICAgICAgICAidHlwZSI6ICJzdHJpbmciLAogICAgICAgICAgImRlc2NyaXB0aW9uIjogIlRoZSB2ZXJzaW9uIE5BVFMgcnVubmluZyBvbiB0aGUgc2VydmVyIgogICAgICAgIH0sCiAgICAgICAgInNlcSI6IHsKICAgICAgICAgICJ0eXBlIjogImludGVnZXIiLAogICAgICAgICAgImRlc2NyaXB0aW9uIjogIkludGVybmFsIHNlcnZlciBzZXF1ZW5jZSBJRCIKICAgICAgICB9LAogICAgICAgICJqZXRzdHJlYW0iOiB7CiAgICAgICAgICAidHlwZSI6ICJib29sZWFuIiwKICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJJbmRpY2F0ZXMgaWYgdGhpcyBzZXJ2ZXIgaGFzIEpldFN0cmVhbSBlbmFibGVkIgogICAgICAgIH0sCiAgICAgICAgInRpbWUiOiB7CiAgICAgICAgICAidHlwZSI6ICJzdHJpbmciLAogICAgICAgICAgImRlc2NyaXB0aW9uIjogIlRoZSBsb2NhbCB0aW1lIG9mIHRoZSBzZXJ2ZXIiCiAgICAgICAgfQogICAgICB9CiAgICB9LAogICAgImNsaWVudCI6IHsKICAgICAgInR5cGUiOiAib2JqZWN0IiwKICAgICAgImFkZGl0aW9uYWxQcm9wZXJ0aWVzIjogZmFsc2UsCiAgICAgICJkZXNjcmlwdGlvbiI6ICJEZXRhaWxzIGFib3V0IHRoZSBjbGllbnQgdGhhdCBjb25uZWN0ZWQgdG8gdGhlIHNlcnZlciIsCiAgICAgICJyZXF1aXJlZCI6IFsKICAgICAgICAiYWNjIgogICAgICBdLAogICAgICAicHJvcGVydGllcyI6IHsKICAgICAgICAic3RhcnQiOiB7CiAgICAgICAgICAidHlwZSI6ICJzdHJpbmciLAogICAgICAgICAgImRlc2NyaXB0aW9uIjogIlRpbWVzdGFtcCB3aGVuIHRoZSBjbGllbnQgY29ubmVjdGVkIgogICAgICAgIH0sCiAgICAgICAgInN0b3AiOiB7CiAgICAgICAgICAidHlwZSI6ICJzdHJpbmciLAogICAgICAgICAgImRlc2NyaXB0aW9uIjogIlRpbWVzdGFtcCB3aGVuIHRoZSBjbGllbnQgZGlzY29ubmVjdGVkIgogICAgICAgIH0sCiAgICAgICAgImhvc3QiOiB7CiAgICAgICAgICAidHlwZSI6ICJzdHJpbmciLAogICAgICAgICAgImRlc2NyaXB0aW9uIjogIlRoZSByZW1vdGUgaG9zdCB0aGUgY2xpZW50IGlzIGNvbm5lY3RlZCBmcm9tIgogICAgICAgIH0sCiAgICAgICAgImlkIjogewogICAgICAgICAgInR5cGUiOiAic3RyaW5nIiwKICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJUaGUgaW50ZXJuYWxseSBhc3NpZ25lZCBjbGllbnQgSUQgZm9yIHRoaXMgY29ubmVjdGlvbiIKICAgICAgICB9LAogICAgICAgICJhY2MiOiB7CiAgICAgICAgICAidHlwZSI6ICJzdHJpbmciLAogICAgICAgICAgImRlc2NyaXB0aW9uIjogIlRoZSBhY2NvdW50IHRoaXMgdXNlciBsb2dnZWQgaW4gdG8iCiAgICAgICAgfSwKICAgICAgICAidXNlciI6IHsKICAgICAgICAgICJ0eXBlIjogInN0cmluZyIsCiAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiVGhlIGNsaWVudHMgdXNlcm5hbWUiCiAgICAgICAgfSwKICAgICAgICAibmFtZSI6IHsKICAgICAgICAgICJ0eXBlIjogInN0cmluZyIsCiAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiVGhlIG5hbWUgcHJlc2VudGVkIGJ5IHRoZSBjbGllbnQgZHVyaW5nIGNvbm5lY3Rpb24iCiAgICAgICAgfSwKICAgICAgICAibGFuZyI6IHsKICAgICAgICAgICJ0eXBlIjogInN0cmluZyIsCiAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiVGhlIHByb2dyYW1taW5nIGxhbmd1YWdlIGxpYnJhcnkgaW4gdXNlIGJ5IHRoZSBjbGllbnQiCiAgICAgICAgfSwKICAgICAgICAidmVyIjogewogICAgICAgICAgInR5cGUiOiAic3RyaW5nIiwKICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJUaGUgdmVyc2lvbiBvZiB0aGUgY2xpZW50IGxpYnJhcnkgaW4gdXNlIgogICAgICAgIH0sCiAgICAgICAgInJ0dCI6IHsKICAgICAgICAgICJ0eXBlIjogIm51bWJlciIsCiAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiVGhlIGxhc3Qga25vd24gbGF0ZW5jeSBiZXR3ZWVuIHRoZSBOQVRTIFNlcnZlciBhbmQgdGhlIENsaWVudCBpbiBuYW5vc2Vjb25kcyIKICAgICAgICB9LAogICAgICAgICJzZXJ2ZXIiOiB7CiAgICAgICAgICAidHlwZSI6ICJzdHJpbmciLAogICAgICAgICAgImRlc2NyaXB0aW9uIjogIlRoZSBzZXJ2ZXIgdGhhdCB0aGUgY2xpZW50IHdhcyBjb25uZWN0ZWQgdG8iCiAgICAgICAgfSwKICAgICAgICAiY2x1c3RlciI6IHsKICAgICAgICAgICJ0eXBlIjogInN0cmluZyIsCiAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiVGhlIGNsdXN0ZXIgbmFtZSB0aGUgc2VydmVyIGlzIGNvbm5lY3RlZCB0byIKICAgICAgICB9LAogICAgICAgICJqd3QiOiB7CiAgICAgICAgICAidHlwZSI6ICJzdHJpbmciLAogICAgICAgICAgImRlc2NyaXB0aW9uIjogIlRoZSBKV1QgcHJlc2VudGVkIGluIHRoZSBjb25uZWN0aW9uIgogICAgICAgIH0sCiAgICAgICAgImlzc3Vlcl9rZXkiOiB7CiAgICAgICAgICAidHlwZSI6ICJzdHJpbmciLAogICAgICAgICAgImRlc2NyaXB0aW9uIjogIlRoZSBwdWJsaWMgc2lnbmluZyBrZXkgb3IgYWNjb3VudCBpZGVudGl0eSBrZXkgdXNlZCB0byBpc3N1ZSB0aGUgdXNlciIKICAgICAgICB9LAogICAgICAgICJuYW1lX3RhZyI6IHsKICAgICAgICAgICJ0eXBlIjogInN0cmluZyIsCiAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiVGhlIG5hbWUgZXh0cmFjdGVkIGZyb20gdGhlIHVzZXIgSldUIGNsYWltIgogICAgICAgIH0sCiAgICAgICAgInRhZ3MiOiB7CiAgICAgICAgICAidHlwZSI6ICJhcnJheSIsCiAgICAgICAgICAiaXRlbXMiOiB7CiAgICAgICAgICAgICJ0eXBlIjogInN0cmluZyIKICAgICAgICAgIH0sCiAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiVGFncyBleHRyYWN0ZWQgZnJvbSB0aGUgSldUIgogICAgICAgIH0KICAgICAgfQogICAgfSwKICAgICJzZW50IjogewogICAgICAiZGVzY3JpcHRpb24iOiAiRGF0YSBzZW50IHRvIHRoZSBjbGllbnQiLAogICAgICAidHlwZSI6ICJvYmplY3QiLAogICAgICAiYWRkaXRpb25hbFByb3BlcnRpZXMiOiBmYWxzZSwKICAgICAgInByb3BlcnRpZXMiOiB7CiAgICAgICAgIm1zZ3MiOiB7CiAgICAgICAgICAidHlwZSI6ICJpbnRlZ2VyIiwKICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJUaGUgbnVtYmVyIG9mIG1lc3NhZ2VzIGhhbmRsZWQgYnkgdGhlIGNsaWVudCIKICAgICAgICB9LAogICAgICAgICJieXRlcyI6IHsKICAgICAgICAgICJ0eXBlIjogImludGVnZXIiLAogICAgICAgICAgImRlc2NyaXB0aW9uIjogIlRoZSBudW1iZXIgb2YgYnl0ZXMgaGFuZGxlZCBieSB0aGUgY2xpZW50IgogICAgICAgIH0KICAgICAgfQogICAgfSwKICAgICJyZWNlaXZlZCI6IHsKICAgICAgImRlc2NyaXB0aW9uIjogIkRhdGEgcmVjZWl2ZWQgZnJvbSB0aGUgY2xpZW50IiwKICAgICAgInR5cGUiOiAib2JqZWN0IiwKICAgICAgImFkZGl0aW9uYWxQcm9wZXJ0aWVzIjogZmFsc2UsCiAgICAgICJwcm9wZXJ0aWVzIjogewogICAgICAgICJtc2dzIjogewogICAgICAgICAgInR5cGUiOiAiaW50ZWdlciIsCiAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiVGhlIG51bWJlciBvZiBtZXNzYWdlcyBoYW5kbGVkIGJ5IHRoZSBjbGllbnQiCiAgICAgICAgfSwKICAgICAgICAiYnl0ZXMiOiB7CiAgICAgICAgICAidHlwZSI6ICJpbnRlZ2VyIiwKICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJUaGUgbnVtYmVyIG9mIGJ5dGVzIGhhbmRsZWQgYnkgdGhlIGNsaWVudCIKICAgICAgICB9CiAgICAgIH0KICAgIH0sCiAgICAicmVhc29uIjogewogICAgICAidHlwZSI6ICJzdHJpbmciLAogICAgICAiZGVzY3JpcHRpb24iOiAiVGhlIHJlYXNvbiB0aGUgY2xpZW50IGRpc2Nvbm5lY3RlZCIKICAgIH0KICB9Cn0K")
	schemas["io.nats.server.advisory.v1.account_connections"], _ = base64.StdEncoding.DecodeString("ewogICIkc2NoZW1hIjogImh0dHA6Ly9qc29uLXNjaGVtYS5vcmcvZHJhZnQtMDcvc2NoZW1hIyIsCiAgIiRpZCI6ICJodHRwczovL25hdHMuaW8vc2NoZW1hcy9zZXJ2ZXIvYWR2aXNvcnkvdjEvYWNjb3VudF9jb25uZWN0aW9ucy5qc29uIiwKICAiZGVzY3JpcHRpb24iOiAiUmVndWxhciBhZHZpc29yeSBwdWJsaXNoZWQgd2l0aCBhY2NvdW50IHN0YXRlcyIsCiAgInRpdGxlIjogImlvLm5hdHMuc2VydmVyLmFkdmlzb3J5LnYxLmFjY291bnRfY29ubmVjdGlvbnMiLAogICJ0eXBlIjogIm9iamVjdCIsCiAgInJlcXVpcmVkIjogWwogICAgInR5cGUiLAogICAgImlkIiwKICAgICJ0aW1lc3RhbXAiLAogICAgInNlcnZlciIsCiAgICAiYWNjIiwKICAgICJjb25ucyIsCiAgICAibGVhZm5vZGVzIiwKICAgICJ0b3RhbF9jb25ucyIKICBdLAogICJhZGRpdGlvbmFsUHJvcGVydGllcyI6IGZhbHNlLAogICJwcm9wZXJ0aWVzIjogewogICAgInR5cGUiOiB7CiAgICAgICJ0eXBlIjogInN0cmluZyIsCiAgICAgICJjb25zdCI6ICJpby5uYXRzLnNlcnZlci5hZHZpc29yeS52MS5hY2NvdW50X2Nvbm5lY3Rpb25zIgogICAgfSwKICAgICJpZCI6IHsKICAgICAgInR5cGUiOiAic3RyaW5nIiwKICAgICAgImRlc2NyaXB0aW9uIjogIlVuaXF1ZSBjb3JyZWxhdGlvbiBJRCBmb3IgdGhpcyBldmVudCIKICAgIH0sCiAgICAidGltZXN0YW1wIjogewogICAgICAidHlwZSI6ICJzdHJpbmciLAogICAgICAiZGVzY3JpcHRpb24iOiAiVGhlIHRpbWUgdGhpcyBldmVudCB3YXMgY3JlYXRlZCBpbiBSRkMzMzM5IGZvcm1hdCIKICAgIH0sCiAgICAic2VydmVyIjogewogICAgICAidHlwZSI6ICJvYmplY3QiLAogICAgICAiYWRkaXRpb25hbFByb3BlcnRpZXMiOiBmYWxzZSwKICAgICAgImRlc2NyaXB0aW9uIjogIkRldGFpbHMgYWJvdXQgdGhlIHNlcnZlciB0aGUgY2xpZW50IGNvbm5lY3RlZCB0byIsCiAgICAgICJyZXF1aXJlZCI6IFsKICAgICAgICAibmFtZSIsCiAgICAgICAgImhvc3QiLAogICAgICAgICJpZCIsCiAgICAgICAgInZlciIsCiAgICAgICAgInNlcSIsCiAgICAgICAgImpldHN0cmVhbSIsCiAgICAgICAgInRpbWUiCiAgICAgIF0sCiAgICAgICJwcm9wZXJ0aWVzIjogewogICAgICAgICJuYW1lIjogewogICAgICAgICAgInR5cGUiOiAic3RyaW5nIiwKICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJUaGUgY29uZmlndXJlZCBuYW1lIGZvciB0aGUgc2VydmVyLCBtYXRjaGVzIElEIHdoZW4gdW5jb25maWd1cmVkIiwKICAgICAgICAgICJtaW5MZW5ndGgiOiAxCiAgICAgICAgfSwKICAgICAgICAiaG9zdCI6IHsKICAgICAgICAgICJ0eXBlIjogInN0cmluZyIsCiAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiVGhlIGhvc3QgdGhpcyBzZXJ2ZXIgcnVucyBvbiwgdHlwaWNhbGx5IGEgSVAgYWRkcmVzcyIKICAgICAgICB9LAogICAgICAgICJpZCI6IHsKICAgICAgICAgICJ0eXBlIjogInN0cmluZyIsCiAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiVGhlIHVuaXF1ZSBzZXJ2ZXIgSUQgZm9yIHRoaXMgbm9kZSIKICAgICAgICB9LAogICAgICAgICJjbHVzdGVyIjogewogICAgICAgICAgInR5cGUiOiAic3RyaW5nIiwKICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJUaGUgY2x1c3RlciB0aGUgc2VydmVyIGJlbG9uZ3MgdG8iCiAgICAgICAgfSwKICAgICAgICAidmVyIjogewogICAgICAgICAgInR5cGUiOiAic3RyaW5nIiwKICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJUaGUgdmVyc2lvbiBOQVRTIHJ1bm5pbmcgb24gdGhlIHNlcnZlciIKICAgICAgICB9LAogICAgICAgICJzZXEiOiB7CiAgICAgICAgICAidHlwZSI6ICJpbnRlZ2VyIiwKICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJJbnRlcm5hbCBzZXJ2ZXIgc2VxdWVuY2UgSUQiCiAgICAgICAgfSwKICAgICAgICAiamV0c3RyZWFtIjogewogICAgICAgICAgInR5cGUiOiAiYm9vbGVhbiIsCiAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiSW5kaWNhdGVzIGlmIHRoaXMgc2VydmVyIGhhcyBKZXRTdHJlYW0gZW5hYmxlZCIKICAgICAgICB9LAogICAgICAgICJ0aW1lIjogewogICAgICAgICAgInR5cGUiOiAic3RyaW5nIiwKICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJUaGUgbG9jYWwgdGltZSBvZiB0aGUgc2VydmVyIgogICAgICAgIH0KICAgICAgfQogICAgfSwKICAgICJhY2MiOiB7CiAgICAgICJ0eXBlIjogInN0cmluZyIsCiAgICAgICJkZXNjcmlwdGlvbiI6ICJUaGUgYWNjb3VudCB0aGUgdXBkYXRlIGlzIGZvciIKICAgIH0sCiAgICAiY29ubnMiOiB7CiAgICAgICJ0eXBlIjogImludGVnZXIiLAogICAgICAiZGVzY3JpcHRpb24iOiAiVGhlIG51bWJlciBvZiBhY3RpdmUgY2xpZW50IGNvbm5lY3Rpb25zIHRvIHRoZSBzZXJ2ZXIiLAogICAgICAibWluaW11bSI6IDAKICAgIH0sCiAgICAibGVhZm5vZGVzIjogewogICAgICAidHlwZSI6ICJpbnRlZ2VyIiwKICAgICAgImRlc2NyaXB0aW9uIjogIlRoZSBudW1iZXIgb2YgYWN0aXZlIGxlYWZub2RlIGNvbm5lY3Rpb25zIHRvIHRoZSBzZXJ2ZXIiLAogICAgICAibWluaW11bSI6IDAKICAgIH0sCiAgICAidG90YWxfY29ubnMiOiB7CiAgICAgICJ0eXBlIjogImludGVnZXIiLAogICAgICAiZGVzY3JpcHRpb24iOiAiVGhlIGNvbWJpbmVkIGNsaWVudCBhbmQgbGVhZm5vZGUgYWNjb3VudCBjb25uZWN0aW9ucyIsCiAgICAgICJtaW5pbXVtIjogMAogICAgfQogIH0KfQo=")
	schemas["io.nats.server.metric.v1.service_latency"], _ = base64.StdEncoding.DecodeString("")
	schemas["io.nats.jetstream.advisory.v1.api_audit"], _ = base64.StdEncoding.DecodeString("ewogICIkc2NoZW1hIjogImh0dHA6Ly9qc29uLXNjaGVtYS5vcmcvZHJhZnQtMDcvc2NoZW1hIyIsCiAgIiRpZCI6ICJodHRwczovL25hdHMuaW8vc2NoZW1hcy9qZXRzdHJlYW0vYWR2aXNvcnkvdjEvYXBpX2F1ZGl0Lmpzb24iLAogICJkZXNjcmlwdGlvbiI6ICJBZHZpc29yeSBwdWJsaXNoZWQgd2hlbiB0aGUgSmV0U3RyZWFtIEFQSSBpcyBhY2Nlc3NlZCBhY3Jvc3MgdGhlIG5ldHdvcmsiLAogICJ0aXRsZSI6ICJpby5uYXRzLmpldHN0cmVhbS5hZHZpc29yeS52MS5hcGlfYXVkaXQiLAogICJ0eXBlIjogIm9iamVjdCIsCiAgInJlcXVpcmVkIjogWwogICAgInR5cGUiLAogICAgImlkIiwKICAgICJ0aW1lc3RhbXAiLAogICAgInNlcnZlciIsCiAgICAiY2xpZW50IiwKICAgICJzdWJqZWN0IiwKICAgICJyZXNwb25zZSIKICBdLAogICJhZGRpdGlvbmFsUHJvcGVydGllcyI6IGZhbHNlLAogICJwcm9wZXJ0aWVzIjogewogICAgInR5cGUiOiB7CiAgICAgICJ0eXBlIjogInN0cmluZyIsCiAgICAgICJjb25zdCI6ICJpby5uYXRzLmpldHN0cmVhbS5hZHZpc29yeS52MS5hcGlfYXVkaXQiCiAgICB9LAogICAgImlkIjogewogICAgICAidHlwZSI6ICJzdHJpbmciLAogICAgICAiZGVzY3JpcHRpb24iOiAiVW5pcXVlIGNvcnJlbGF0aW9uIElEIGZvciB0aGlzIGV2ZW50IgogICAgfSwKICAgICJ0aW1lc3RhbXAiOiB7CiAgICAgICJ0eXBlIjogInN0cmluZyIsCiAgICAgICJkZXNjcmlwdGlvbiI6ICJUaGUgdGltZSB0aGlzIGV2ZW50IHdhcyBjcmVhdGVkIGluIFJGQzMzMzkgZm9ybWF0IgogICAgfSwKICAgICJzZXJ2ZXIiOiB7CiAgICAgICJ0eXBlIjogInN0cmluZyIsCiAgICAgICJkZXNjcmlwdGlvbiI6ICJUaGUgc2VydmVyIHRoaXMgZXZlbnQgb3JpZ2luYXRlcyBmcm9tLCBlaXRoZXIgYSBnZW5lcmF0ZWQgSUQgb3IgdGhlIGNvbmZpZ3VyZWQgbmFtZSIsCiAgICAgICJtaW5MZW5ndGgiOiAxCiAgICB9LAogICAgInN1YmplY3QiOiB7CiAgICAgICJ0eXBlIjogInN0cmluZyIsCiAgICAgICJkZXNjcmlwdGlvbiI6ICJUaGUgc3ViamVjdCB0aGUgYWRtaW4gQVBJIHJlcXVlc3Qgd2FzIHJlY2VpdmVkIG9uIiwKICAgICAgIm1pbkxlbmd0aCI6IDEKICAgIH0sCiAgICAicmVzcG9uc2UiOiB7CiAgICAgICJ0eXBlIjogInN0cmluZyIsCiAgICAgICJkZXNjcmlwdGlvbiI6ICJUaGUgZnVsbCB1bnBhcnNlZCBib2R5IG9mIHRoZSByZXNwb25zZSBzZW50IHRvIHRoZSBjYWxsZXIiCiAgICB9LAogICAgInJlcXVlc3QiOiB7CiAgICAgICJ0eXBlIjogInN0cmluZyIsCiAgICAgICJkZXNjcmlwdGlvbiI6ICJUaGUgZnVsbCB1bnBhcnNlZCBib2R5IG9mIHRoZSByZXF1ZXN0IHJlY2VpdmVkIGZyb20gdGhlIGNsaWVudCIKICAgIH0sCiAgICAiY2xpZW50IjogewogICAgICAidHlwZSI6ICJvYmplY3QiLAogICAgICAiYWRkaXRpb25hbFByb3BlcnRpZXMiOiBmYWxzZSwKICAgICAgImRlc2NyaXB0aW9uIjogIkRldGFpbHMgYWJvdXQgdGhlIGNsaWVudCB0aGF0IGNvbm5lY3RlZCB0byB0aGUgc2VydmVyIiwKICAgICAgInJlcXVpcmVkIjogWwogICAgICAgICJhY2MiCiAgICAgIF0sCiAgICAgICJwcm9wZXJ0aWVzIjogewogICAgICAgICJzdGFydCI6IHsKICAgICAgICAgICJ0eXBlIjogInN0cmluZyIsCiAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiVGltZXN0YW1wIHdoZW4gdGhlIGNsaWVudCBjb25uZWN0ZWQiCiAgICAgICAgfSwKICAgICAgICAic3RvcCI6IHsKICAgICAgICAgICJ0eXBlIjogInN0cmluZyIsCiAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiVGltZXN0YW1wIHdoZW4gdGhlIGNsaWVudCBkaXNjb25uZWN0ZWQiCiAgICAgICAgfSwKICAgICAgICAiaG9zdCI6IHsKICAgICAgICAgICJ0eXBlIjogInN0cmluZyIsCiAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiVGhlIHJlbW90ZSBob3N0IHRoZSBjbGllbnQgaXMgY29ubmVjdGVkIGZyb20iCiAgICAgICAgfSwKICAgICAgICAiaWQiOiB7CiAgICAgICAgICAidHlwZSI6ICJzdHJpbmciLAogICAgICAgICAgImRlc2NyaXB0aW9uIjogIlRoZSBpbnRlcm5hbGx5IGFzc2lnbmVkIGNsaWVudCBJRCBmb3IgdGhpcyBjb25uZWN0aW9uIgogICAgICAgIH0sCiAgICAgICAgImFjYyI6IHsKICAgICAgICAgICJ0eXBlIjogInN0cmluZyIsCiAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiVGhlIGFjY291bnQgdGhpcyB1c2VyIGxvZ2dlZCBpbiB0byIKICAgICAgICB9LAogICAgICAgICJ1c2VyIjogewogICAgICAgICAgInR5cGUiOiAic3RyaW5nIiwKICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJUaGUgY2xpZW50cyB1c2VybmFtZSIKICAgICAgICB9LAogICAgICAgICJuYW1lIjogewogICAgICAgICAgInR5cGUiOiAic3RyaW5nIiwKICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJUaGUgbmFtZSBwcmVzZW50ZWQgYnkgdGhlIGNsaWVudCBkdXJpbmcgY29ubmVjdGlvbiIKICAgICAgICB9LAogICAgICAgICJsYW5nIjogewogICAgICAgICAgInR5cGUiOiAic3RyaW5nIiwKICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJUaGUgcHJvZ3JhbW1pbmcgbGFuZ3VhZ2UgbGlicmFyeSBpbiB1c2UgYnkgdGhlIGNsaWVudCIKICAgICAgICB9LAogICAgICAgICJ2ZXIiOiB7CiAgICAgICAgICAidHlwZSI6ICJzdHJpbmciLAogICAgICAgICAgImRlc2NyaXB0aW9uIjogIlRoZSB2ZXJzaW9uIG9mIHRoZSBjbGllbnQgbGlicmFyeSBpbiB1c2UiCiAgICAgICAgfSwKICAgICAgICAicnR0IjogewogICAgICAgICAgInR5cGUiOiAibnVtYmVyIiwKICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJUaGUgbGFzdCBrbm93biBsYXRlbmN5IGJldHdlZW4gdGhlIE5BVFMgU2VydmVyIGFuZCB0aGUgQ2xpZW50IGluIG5hbm9zZWNvbmRzIgogICAgICAgIH0sCiAgICAgICAgInNlcnZlciI6IHsKICAgICAgICAgICJ0eXBlIjogInN0cmluZyIsCiAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiVGhlIHNlcnZlciB0aGF0IHRoZSBjbGllbnQgd2FzIGNvbm5lY3RlZCB0byIKICAgICAgICB9LAogICAgICAgICJjbHVzdGVyIjogewogICAgICAgICAgInR5cGUiOiAic3RyaW5nIiwKICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJUaGUgY2x1c3RlciBuYW1lIHRoZSBzZXJ2ZXIgaXMgY29ubmVjdGVkIHRvIgogICAgICAgIH0sCiAgICAgICAgImp3dCI6IHsKICAgICAgICAgICJ0eXBlIjogInN0cmluZyIsCiAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiVGhlIEpXVCBwcmVzZW50ZWQgaW4gdGhlIGNvbm5lY3Rpb24iCiAgICAgICAgfSwKICAgICAgICAiaXNzdWVyX2tleSI6IHsKICAgICAgICAgICJ0eXBlIjogInN0cmluZyIsCiAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiVGhlIHB1YmxpYyBzaWduaW5nIGtleSBvciBhY2NvdW50IGlkZW50aXR5IGtleSB1c2VkIHRvIGlzc3VlIHRoZSB1c2VyIgogICAgICAgIH0sCiAgICAgICAgIm5hbWVfdGFnIjogewogICAgICAgICAgInR5cGUiOiAic3RyaW5nIiwKICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJUaGUgbmFtZSBleHRyYWN0ZWQgZnJvbSB0aGUgdXNlciBKV1QgY2xhaW0iCiAgICAgICAgfSwKICAgICAgICAidGFncyI6IHsKICAgICAgICAgICJ0eXBlIjogImFycmF5IiwKICAgICAgICAgICJpdGVtcyI6IHsKICAgICAgICAgICAgInR5cGUiOiAic3RyaW5nIgogICAgICAgICAgfSwKICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJUYWdzIGV4dHJhY3RlZCBmcm9tIHRoZSBKV1QiCiAgICAgICAgfQogICAgICB9CiAgICB9CiAgfQp9Cg==")
	schemas["io.nats.jetstream.advisory.v1.max_deliver"], _ = base64.StdEncoding.DecodeString("ewogICIkc2NoZW1hIjogImh0dHA6Ly9qc29uLXNjaGVtYS5vcmcvZHJhZnQtMDcvc2NoZW1hIyIsCiAgIiRpZCI6ICJodHRwczovL25hdHMuaW8vc2NoZW1hcy9qZXRzdHJlYW0vYWR2aXNvcnkvdjEvbWF4X2RlbGl2ZXIuanNvbiIsCiAgImRlc2NyaXB0aW9uIjogIkFkdmlzb3J5IHB1Ymxpc2hlZCB3aGVuIGEgbWVzc2FnZSBoYXZlIHJlYWNoZWQgaXRzIG1heGltdW0gZGVsaXZlcnkgYXR0ZW1wdHMiLAogICJ0aXRsZSI6ICJpby5uYXRzLmpldHN0cmVhbS5hZHZpc29yeS52MS5tYXhfZGVsaXZlciIsCiAgInR5cGUiOiAib2JqZWN0IiwKICAicmVxdWlyZWQiOiBbCiAgICAidHlwZSIsCiAgICAiaWQiLAogICAgInRpbWVzdGFtcCIsCiAgICAic3RyZWFtIiwKICAgICJjb25zdW1lciIsCiAgICAic3RyZWFtX3NlcSIsCiAgICAiZGVsaXZlcmllcyIKICBdLAogICJhZGRpdGlvbmFsUHJvcGVydGllcyI6IGZhbHNlLAogICJwcm9wZXJ0aWVzIjogewogICAgInR5cGUiOiB7CiAgICAgICJ0eXBlIjogInN0cmluZyIsCiAgICAgICJjb25zdCI6ICJpby5uYXRzLmpldHN0cmVhbS5hZHZpc29yeS52MS5tYXhfZGVsaXZlciIKICAgIH0sCiAgICAiaWQiOiB7CiAgICAgICJ0eXBlIjogInN0cmluZyIsCiAgICAgICJkZXNjcmlwdGlvbiI6ICJVbmlxdWUgY29ycmVsYXRpb24gSUQgZm9yIHRoaXMgZXZlbnQiCiAgICB9LAogICAgInRpbWVzdGFtcCI6IHsKICAgICAgInR5cGUiOiAic3RyaW5nIiwKICAgICAgImRlc2NyaXB0aW9uIjogIlRoZSB0aW1lIHRoaXMgZXZlbnQgd2FzIGNyZWF0ZWQgaW4gUkZDMzMzOSBmb3JtYXQiCiAgICB9LAogICAgInN0cmVhbSI6IHsKICAgICAgInR5cGUiOiAic3RyaW5nIiwKICAgICAgImRlc2NyaXB0aW9uIjogIlRoZSBuYW1lIG9mIHRoZSBzdHJlYW0gd2hlcmUgdGhlIG1lc3NhZ2UgaXMgc3RvcmVkIgogICAgfSwKICAgICJjb25zdW1lciI6IHsKICAgICAgInR5cGUiOiAic3RyaW5nIiwKICAgICAgImRlc2NyaXB0aW9uIjogIlRoZSBuYW1lIG9mIHRoZSBjb25zdW1lciB3aGVyZSB0aGUgbWVzc2FnZSByZWFjaGVkIGl0cyBsaW1pdCIKICAgIH0sCiAgICAic3RyZWFtX3NlcSI6IHsKICAgICAgInR5cGUiOiAic3RyaW5nIiwKICAgICAgIm1pbmltdW0iOiAxLAogICAgICAiZGVzY3JpcHRpb24iOiAiVGhlIHNlcXVlbmNlIG9mIHRoZSBtZXNzYWdlIGluIHRoZSBzdHJlYW0gdGhhdCBmYWlsZWQiCiAgICB9LAogICAgImRlbGl2ZXJpZXMiOiB7CiAgICAgICJ0eXBlIjogImludGVnZXIiLAogICAgICAibWluaW11bSI6IDEsCiAgICAgICJkZXNjcmlwdGlvbiI6ICJUaGUgbnVtYmVyIG9mIGRlbGl2ZXJpZXMgdGhhdCB3ZXJlIGF0dGVtcHRlZCIKICAgIH0KICB9Cn0K")
	schemas["io.nats.jetstream.advisory.v1.terminated"], _ = base64.StdEncoding.DecodeString("ewogICIkc2NoZW1hIjogImh0dHA6Ly9qc29uLXNjaGVtYS5vcmcvZHJhZnQtMDcvc2NoZW1hIyIsCiAgIiRpZCI6ICJodHRwczovL25hdHMuaW8vc2NoZW1hcy9qZXRzdHJlYW0vYWR2aXNvcnkvdjEvdGVybWluYXRlZC5qc29uIiwKICAiZGVzY3JpcHRpb24iOiAiQWR2aXNvcnkgcHVibGlzaGVkIHdoZW4gYSBtZXNzYWdlIHdhcyB0ZXJtaW5hdGVkIHVzaW5nIGEgQWNrVGVybSBhY2tub3dsZWRnZW1lbnQiLAogICJ0aXRsZSI6ICJpby5uYXRzLmpldHN0cmVhbS5hZHZpc29yeS52MS50ZXJtaW5hdGVkIiwKICAidHlwZSI6ICJvYmplY3QiLAogICJyZXF1aXJlZCI6IFsKICAgICJ0eXBlIiwKICAgICJpZCIsCiAgICAidGltZXN0YW1wIiwKICAgICJzdHJlYW0iLAogICAgImNvbnN1bWVyIiwKICAgICJjb25zdW1lcl9zZXEiLAogICAgInN0cmVhbV9zZXEiLAogICAgImRlbGl2ZXJpZXMiCiAgXSwKICAiYWRkaXRpb25hbFByb3BlcnRpZXMiOiBmYWxzZSwKICAicHJvcGVydGllcyI6IHsKICAgICJ0eXBlIjogewogICAgICAidHlwZSI6ICJzdHJpbmciLAogICAgICAiY29uc3QiOiAiaW8ubmF0cy5qZXRzdHJlYW0uYWR2aXNvcnkudjEudGVybWluYXRlZCIKICAgIH0sCiAgICAiaWQiOiB7CiAgICAgICJ0eXBlIjogInN0cmluZyIsCiAgICAgICJkZXNjcmlwdGlvbiI6ICJVbmlxdWUgY29ycmVsYXRpb24gSUQgZm9yIHRoaXMgZXZlbnQiCiAgICB9LAogICAgInRpbWVzdGFtcCI6IHsKICAgICAgInR5cGUiOiAic3RyaW5nIiwKICAgICAgImRlc2NyaXB0aW9uIjogIlRoZSB0aW1lIHRoaXMgZXZlbnQgd2FzIGNyZWF0ZWQgaW4gUkZDMzMzOSBmb3JtYXQiCiAgICB9LAogICAgInN0cmVhbSI6IHsKICAgICAgInR5cGUiOiAic3RyaW5nIiwKICAgICAgImRlc2NyaXB0aW9uIjogIlRoZSBuYW1lIG9mIHRoZSBzdHJlYW0gd2hlcmUgdGhlIG1lc3NhZ2UgaXMgc3RvcmVkIgogICAgfSwKICAgICJjb25zdW1lciI6IHsKICAgICAgInR5cGUiOiAic3RyaW5nIiwKICAgICAgImRlc2NyaXB0aW9uIjogIlRoZSBuYW1lIG9mIHRoZSBjb25zdW1lciB3aGVyZSB0aGUgbWVzc2FnZSB3YXMgdGVybWluYXRlZCIKICAgIH0sCiAgICAic3RyZWFtX3NlcSI6IHsKICAgICAgInR5cGUiOiAic3RyaW5nIiwKICAgICAgIm1pbmltdW0iOiAxLAogICAgICAiZGVzY3JpcHRpb24iOiAiVGhlIHNlcXVlbmNlIG9mIHRoZSBtZXNzYWdlIGluIHRoZSBzdHJlYW0gdGhhdCB3YXMgdGVybWluYXRlZCIKICAgIH0sCiAgICAiY29uc3VtZXJfc2VxIjogewogICAgICAidHlwZSI6ICJzdHJpbmciLAogICAgICAibWluaW11bSI6IDEsCiAgICAgICJkZXNjcmlwdGlvbiI6ICJUaGUgc2VxdWVuY2Ugb2YgdGhlIG1lc3NhZ2UgaW4gdGhlIGNvbnN1bWVyIHRoYXQgd2FzIHRlcm1pbmF0ZWQiCiAgICB9LAogICAgImRlbGl2ZXJpZXMiOiB7CiAgICAgICJ0eXBlIjogImludGVnZXIiLAogICAgICAibWluaW11bSI6IDEsCiAgICAgICJkZXNjcmlwdGlvbiI6ICJUaGUgbnVtYmVyIG9mIGRlbGl2ZXJpZXMgdGhhdCB3ZXJlIGF0dGVtcHRlZCIKICAgIH0KICB9Cn0K")
	schemas["io.nats.jetstream.advisory.v1.stream_action"], _ = base64.StdEncoding.DecodeString("ewogICIkc2NoZW1hIjogImh0dHA6Ly9qc29uLXNjaGVtYS5vcmcvZHJhZnQtMDcvc2NoZW1hIyIsCiAgIiRpZCI6ICJodHRwczovL25hdHMuaW8vc2NoZW1hcy9qZXRzdHJlYW0vYWR2aXNvcnkvdjEvc3RyZWFtX2FjdGlvbi5qc29uIiwKICAiZGVzY3JpcHRpb24iOiAiQW4gQWR2aXNvcnkgc2VudCB3aGVuIGEgU3RyZWFtIGlzIGNyZWF0ZWQsIG1vZGlmaWVkIG9yIGRlbGV0ZWQiLAogICJ0aXRsZSI6ICJpby5uYXRzLmpldHN0cmVhbS5hZHZpc29yeS52MS5zdHJlYW1fYWN0aW9uIiwKICAidHlwZSI6ICJvYmplY3QiLAogICJyZXF1aXJlZCI6IFsKICAgICJ0eXBlIiwKICAgICJpZCIsCiAgICAidGltZXN0YW1wIiwKICAgICJzdHJlYW0iLAogICAgImFjdGlvbiIKICBdLAogICJhZGRpdGlvbmFsUHJvcGVydGllcyI6IGZhbHNlLAogICJwcm9wZXJ0aWVzIjogewogICAgInR5cGUiOiB7CiAgICAgICJ0eXBlIjogInN0cmluZyIsCiAgICAgICJjb25zdCI6ICJpby5uYXRzLmpldHN0cmVhbS5hZHZpc29yeS52MS5zdHJlYW1fYWN0aW9uIgogICAgfSwKICAgICJpZCI6IHsKICAgICAgInR5cGUiOiAic3RyaW5nIiwKICAgICAgImRlc2NyaXB0aW9uIjogIlVuaXF1ZSBjb3JyZWxhdGlvbiBJRCBmb3IgdGhpcyBldmVudCIKICAgIH0sCiAgICAidGltZXN0YW1wIjogewogICAgICAidHlwZSI6ICJzdHJpbmciLAogICAgICAiZGVzY3JpcHRpb24iOiAiVGhlIHRpbWUgdGhpcyBldmVudCB3YXMgY3JlYXRlZCBpbiBSRkMzMzM5IGZvcm1hdCIKICAgIH0sCiAgICAiYWN0aW9uIjogewogICAgICAidHlwZSI6ICJzdHJpbmciLAogICAgICAiZGVzY3JpcHRpb24iOiAiVGhlIGFjdGlvbiB0aGF0IHRoZSBldmVudCBkZXNjcmliZXMiLAogICAgICAiZW51bSI6IFsKICAgICAgICAiY3JlYXRlIiwKICAgICAgICAiZGVsZXRlIiwKICAgICAgICAibW9kaWZ5IgogICAgICBdCiAgICB9LAogICAgInN0cmVhbSI6IHsKICAgICAgInR5cGUiOiAic3RyaW5nIiwKICAgICAgImRlc2NyaXB0aW9uIjogIlRoZSBuYW1lIG9mIHRoZSBTdHJlYW0gdGhhdCdzIGFjdGVkIG9uIgogICAgfSwKICAgICJ0ZW1wbGF0ZSI6IHsKICAgICAgInR5cGUiOiAic3RyaW5nIiwKICAgICAgImRlc2NyaXB0aW9uIjogIlRoZSBTdHJlYW0gVGVtcGxhdGUgdGhhdCBtYW5hZ2VzIHRoZSBTdHJlYW0iCiAgICB9CiAgfQp9Cg==")
	schemas["io.nats.jetstream.advisory.v1.consumer_action"], _ = base64.StdEncoding.DecodeString("ewogICIkc2NoZW1hIjogImh0dHA6Ly9qc29uLXNjaGVtYS5vcmcvZHJhZnQtMDcvc2NoZW1hIyIsCiAgIiRpZCI6ICJodHRwczovL25hdHMuaW8vc2NoZW1hcy9qZXRzdHJlYW0vYWR2aXNvcnkvdjEvY29uc3VtZXJfYWN0aW9uLmpzb24iLAogICJkZXNjcmlwdGlvbiI6ICJBbiBBZHZpc29yeSBzZW50IHdoZW4gYSBDb25zdW1lciBpcyBjcmVhdGVkIG9yIGRlbGV0ZWQiLAogICJ0aXRsZSI6ICJpby5uYXRzLmpldHN0cmVhbS5hZHZpc29yeS52MS5jb25zdW1lcl9hY3Rpb24iLAogICJ0eXBlIjogIm9iamVjdCIsCiAgInJlcXVpcmVkIjogWwogICAgInR5cGUiLAogICAgImlkIiwKICAgICJ0aW1lc3RhbXAiLAogICAgInN0cmVhbSIsCiAgICAiYWN0aW9uIgogIF0sCiAgImFkZGl0aW9uYWxQcm9wZXJ0aWVzIjogZmFsc2UsCiAgInByb3BlcnRpZXMiOiB7CiAgICAidHlwZSI6IHsKICAgICAgInR5cGUiOiAic3RyaW5nIiwKICAgICAgImNvbnN0IjogImlvLm5hdHMuamV0c3RyZWFtLmFkdmlzb3J5LnYxLmNvbnN1bWVyX2FjdGlvbiIKICAgIH0sCiAgICAiaWQiOiB7CiAgICAgICJ0eXBlIjogInN0cmluZyIsCiAgICAgICJkZXNjcmlwdGlvbiI6ICJVbmlxdWUgY29ycmVsYXRpb24gSUQgZm9yIHRoaXMgZXZlbnQiCiAgICB9LAogICAgInRpbWVzdGFtcCI6IHsKICAgICAgInR5cGUiOiAic3RyaW5nIiwKICAgICAgImRlc2NyaXB0aW9uIjogIlRoZSB0aW1lIHRoaXMgZXZlbnQgd2FzIGNyZWF0ZWQgaW4gUkZDMzMzOSBmb3JtYXQiCiAgICB9LAogICAgImFjdGlvbiI6IHsKICAgICAgInR5cGUiOiAic3RyaW5nIiwKICAgICAgImRlc2NyaXB0aW9uIjogIlRoZSBhY3Rpb24gdGhhdCB0aGUgZXZlbnQgZGVzY3JpYmVzIiwKICAgICAgImVudW0iOiBbCiAgICAgICAgImNyZWF0ZSIsCiAgICAgICAgImRlbGV0ZSIKICAgICAgXQogICAgfSwKICAgICJzdHJlYW0iOiB7CiAgICAgICJ0eXBlIjogInN0cmluZyIsCiAgICAgICJkZXNjcmlwdGlvbiI6ICJUaGUgbmFtZSBvZiB0aGUgU3RyZWFtIHRoYXQgdGhlIENvbnN1bWVyIGJlbG9uZ3MgdG8iCiAgICB9LAogICAgImNvbnN1bWVyIjogewogICAgICAidHlwZSI6ICJzdHJpbmciLAogICAgICAiZGVzY3JpcHRpb24iOiAiVGhlIG5hbWUgb2YgdGhlIENvbnN1bWVyIHRoYXQncyBhY3RlZCBvbiIKICAgIH0KICB9Cn0K")
	schemas["io.nats.jetstream.advisory.v1.snapshot_create"], _ = base64.StdEncoding.DecodeString("ewogICIkc2NoZW1hIjogImh0dHA6Ly9qc29uLXNjaGVtYS5vcmcvZHJhZnQtMDcvc2NoZW1hIyIsCiAgIiRpZCI6ICJodHRwczovL25hdHMuaW8vc2NoZW1hcy9qZXRzdHJlYW0vYWR2aXNvcnkvdjEvc25hcHNob3RfY3JlYXRlLmpzb24iLAogICJkZXNjcmlwdGlvbiI6ICJBbiBBZHZpc29yeSBzZW50IHdoZW4gYSBTdHJlYW0gc25hcHNob3QgaXMgY3JlYXRlZCIsCiAgInRpdGxlIjogImlvLm5hdHMuamV0c3RyZWFtLmFkdmlzb3J5LnYxLnNuYXBzaG90X2NyZWF0ZSIsCiAgInR5cGUiOiAib2JqZWN0IiwKICAicmVxdWlyZWQiOiBbCiAgICAidHlwZSIsCiAgICAiaWQiLAogICAgInRpbWVzdGFtcCIsCiAgICAic3RyZWFtIiwKICAgICJibG9ja3MiLAogICAgImJsb2NrX3NpemUiLAogICAgImNsaWVudCIKICBdLAogICJhZGRpdGlvbmFsUHJvcGVydGllcyI6IGZhbHNlLAogICJwcm9wZXJ0aWVzIjogewogICAgInR5cGUiOiB7CiAgICAgICJ0eXBlIjogInN0cmluZyIsCiAgICAgICJjb25zdCI6ICJpby5uYXRzLmpldHN0cmVhbS5hZHZpc29yeS52MS5zbmFwc2hvdF9jcmVhdGUiCiAgICB9LAogICAgImlkIjogewogICAgICAidHlwZSI6ICJzdHJpbmciLAogICAgICAiZGVzY3JpcHRpb24iOiAiVW5pcXVlIGNvcnJlbGF0aW9uIElEIGZvciB0aGlzIGV2ZW50IgogICAgfSwKICAgICJ0aW1lc3RhbXAiOiB7CiAgICAgICJ0eXBlIjogInN0cmluZyIsCiAgICAgICJkZXNjcmlwdGlvbiI6ICJUaGUgdGltZSB0aGlzIGV2ZW50IHdhcyBjcmVhdGVkIGluIFJGQzMzMzkgZm9ybWF0IgogICAgfSwKICAgICJzdHJlYW0iOiB7CiAgICAgICJ0eXBlIjogInN0cmluZyIsCiAgICAgICJkZXNjcmlwdGlvbiI6ICJUaGUgbmFtZSBvZiB0aGUgU3RyZWFtIGJlaW5nIHNuYXBzaG90dGVkIgogICAgfSwKICAgICJibG9ja3MiOiB7CiAgICAgICJ0eXBlIjogImludGVnZXIiLAogICAgICAiZGVzY3JpcHRpb24iOiAiQXBwcm94aW1hdGUgbnVtYmVyIG9mIGJsb2NrcyBpbiB0aGUgc25hcHNob3QiLAogICAgICAibWluaW11bSI6IDAKICAgIH0sCiAgICAiYmxvY2tfc2l6ZSI6IHsKICAgICAgInR5cGUiOiAiaW50ZWdlciIsCiAgICAgICJkZXNjcmlwdGlvbiI6ICJUaGUgc2l6ZSwgaW4gYnl0ZXMsIG9mIGV2ZXJ5IGJsb2NrIiwKICAgICAgIm1pbmltdW0iOiAxCiAgICB9LAogICAgImNsaWVudCI6IHsKICAgICAgInR5cGUiOiAib2JqZWN0IiwKICAgICAgImFkZGl0aW9uYWxQcm9wZXJ0aWVzIjogZmFsc2UsCiAgICAgICJkZXNjcmlwdGlvbiI6ICJEZXRhaWxzIGFib3V0IHRoZSBjbGllbnQgdGhhdCBjb25uZWN0ZWQgdG8gdGhlIHNlcnZlciIsCiAgICAgICJyZXF1aXJlZCI6IFsKICAgICAgICAiYWNjIgogICAgICBdLAogICAgICAicHJvcGVydGllcyI6IHsKICAgICAgICAic3RhcnQiOiB7CiAgICAgICAgICAidHlwZSI6ICJzdHJpbmciLAogICAgICAgICAgImRlc2NyaXB0aW9uIjogIlRpbWVzdGFtcCB3aGVuIHRoZSBjbGllbnQgY29ubmVjdGVkIgogICAgICAgIH0sCiAgICAgICAgInN0b3AiOiB7CiAgICAgICAgICAidHlwZSI6ICJzdHJpbmciLAogICAgICAgICAgImRlc2NyaXB0aW9uIjogIlRpbWVzdGFtcCB3aGVuIHRoZSBjbGllbnQgZGlzY29ubmVjdGVkIgogICAgICAgIH0sCiAgICAgICAgImhvc3QiOiB7CiAgICAgICAgICAidHlwZSI6ICJzdHJpbmciLAogICAgICAgICAgImRlc2NyaXB0aW9uIjogIlRoZSByZW1vdGUgaG9zdCB0aGUgY2xpZW50IGlzIGNvbm5lY3RlZCBmcm9tIgogICAgICAgIH0sCiAgICAgICAgImlkIjogewogICAgICAgICAgInR5cGUiOiAic3RyaW5nIiwKICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJUaGUgaW50ZXJuYWxseSBhc3NpZ25lZCBjbGllbnQgSUQgZm9yIHRoaXMgY29ubmVjdGlvbiIKICAgICAgICB9LAogICAgICAgICJhY2MiOiB7CiAgICAgICAgICAidHlwZSI6ICJzdHJpbmciLAogICAgICAgICAgImRlc2NyaXB0aW9uIjogIlRoZSBhY2NvdW50IHRoaXMgdXNlciBsb2dnZWQgaW4gdG8iCiAgICAgICAgfSwKICAgICAgICAidXNlciI6IHsKICAgICAgICAgICJ0eXBlIjogInN0cmluZyIsCiAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiVGhlIGNsaWVudHMgdXNlcm5hbWUiCiAgICAgICAgfSwKICAgICAgICAibmFtZSI6IHsKICAgICAgICAgICJ0eXBlIjogInN0cmluZyIsCiAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiVGhlIG5hbWUgcHJlc2VudGVkIGJ5IHRoZSBjbGllbnQgZHVyaW5nIGNvbm5lY3Rpb24iCiAgICAgICAgfSwKICAgICAgICAibGFuZyI6IHsKICAgICAgICAgICJ0eXBlIjogInN0cmluZyIsCiAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiVGhlIHByb2dyYW1taW5nIGxhbmd1YWdlIGxpYnJhcnkgaW4gdXNlIGJ5IHRoZSBjbGllbnQiCiAgICAgICAgfSwKICAgICAgICAidmVyIjogewogICAgICAgICAgInR5cGUiOiAic3RyaW5nIiwKICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJUaGUgdmVyc2lvbiBvZiB0aGUgY2xpZW50IGxpYnJhcnkgaW4gdXNlIgogICAgICAgIH0sCiAgICAgICAgInJ0dCI6IHsKICAgICAgICAgICJ0eXBlIjogIm51bWJlciIsCiAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiVGhlIGxhc3Qga25vd24gbGF0ZW5jeSBiZXR3ZWVuIHRoZSBOQVRTIFNlcnZlciBhbmQgdGhlIENsaWVudCBpbiBuYW5vc2Vjb25kcyIKICAgICAgICB9LAogICAgICAgICJzZXJ2ZXIiOiB7CiAgICAgICAgICAidHlwZSI6ICJzdHJpbmciLAogICAgICAgICAgImRlc2NyaXB0aW9uIjogIlRoZSBzZXJ2ZXIgdGhhdCB0aGUgY2xpZW50IHdhcyBjb25uZWN0ZWQgdG8iCiAgICAgICAgfSwKICAgICAgICAiY2x1c3RlciI6IHsKICAgICAgICAgICJ0eXBlIjogInN0cmluZyIsCiAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiVGhlIGNsdXN0ZXIgbmFtZSB0aGUgc2VydmVyIGlzIGNvbm5lY3RlZCB0byIKICAgICAgICB9LAogICAgICAgICJqd3QiOiB7CiAgICAgICAgICAidHlwZSI6ICJzdHJpbmciLAogICAgICAgICAgImRlc2NyaXB0aW9uIjogIlRoZSBKV1QgcHJlc2VudGVkIGluIHRoZSBjb25uZWN0aW9uIgogICAgICAgIH0sCiAgICAgICAgImlzc3Vlcl9rZXkiOiB7CiAgICAgICAgICAidHlwZSI6ICJzdHJpbmciLAogICAgICAgICAgImRlc2NyaXB0aW9uIjogIlRoZSBwdWJsaWMgc2lnbmluZyBrZXkgb3IgYWNjb3VudCBpZGVudGl0eSBrZXkgdXNlZCB0byBpc3N1ZSB0aGUgdXNlciIKICAgICAgICB9LAogICAgICAgICJuYW1lX3RhZyI6IHsKICAgICAgICAgICJ0eXBlIjogInN0cmluZyIsCiAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiVGhlIG5hbWUgZXh0cmFjdGVkIGZyb20gdGhlIHVzZXIgSldUIGNsYWltIgogICAgICAgIH0sCiAgICAgICAgInRhZ3MiOiB7CiAgICAgICAgICAidHlwZSI6ICJhcnJheSIsCiAgICAgICAgICAiaXRlbXMiOiB7CiAgICAgICAgICAgICJ0eXBlIjogInN0cmluZyIKICAgICAgICAgIH0sCiAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiVGFncyBleHRyYWN0ZWQgZnJvbSB0aGUgSldUIgogICAgICAgIH0KICAgICAgfQogICAgfQogIH0KfQo=")
	schemas["io.nats.jetstream.advisory.v1.snapshot_complete"], _ = base64.StdEncoding.DecodeString("ewogICIkc2NoZW1hIjogImh0dHA6Ly9qc29uLXNjaGVtYS5vcmcvZHJhZnQtMDcvc2NoZW1hIyIsCiAgIiRpZCI6ICJodHRwczovL25hdHMuaW8vc2NoZW1hcy9qZXRzdHJlYW0vYWR2aXNvcnkvdjEvc25hcHNob3RfY29tcGxldGUuanNvbiIsCiAgImRlc2NyaXB0aW9uIjogIkFuIEFkdmlzb3J5IHNlbnQgd2hlbiBhIFN0cmVhbSBzbmFwc2hvdCBpcyBjb21wbGV0ZWQiLAogICJ0aXRsZSI6ICJpby5uYXRzLmpldHN0cmVhbS5hZHZpc29yeS52MS5zbmFwc2hvdF9jb21wbGV0ZSIsCiAgInR5cGUiOiAib2JqZWN0IiwKICAicmVxdWlyZWQiOiBbCiAgICAidHlwZSIsCiAgICAiaWQiLAogICAgInRpbWVzdGFtcCIsCiAgICAic3RyZWFtIiwKICAgICJzdGFydCIsCiAgICAiZW5kIiwKICAgICJjbGllbnQiCiAgXSwKICAiYWRkaXRpb25hbFByb3BlcnRpZXMiOiBmYWxzZSwKICAicHJvcGVydGllcyI6IHsKICAgICJ0eXBlIjogewogICAgICAidHlwZSI6ICJzdHJpbmciLAogICAgICAiY29uc3QiOiAiaW8ubmF0cy5qZXRzdHJlYW0uYWR2aXNvcnkudjEuc25hcHNob3RfY29tcGxldGUiCiAgICB9LAogICAgImlkIjogewogICAgICAidHlwZSI6ICJzdHJpbmciLAogICAgICAiZGVzY3JpcHRpb24iOiAiVW5pcXVlIGNvcnJlbGF0aW9uIElEIGZvciB0aGlzIGV2ZW50IgogICAgfSwKICAgICJ0aW1lc3RhbXAiOiB7CiAgICAgICJ0eXBlIjogInN0cmluZyIsCiAgICAgICJkZXNjcmlwdGlvbiI6ICJUaGUgdGltZSB0aGlzIGV2ZW50IHdhcyBjcmVhdGVkIGluIFJGQzMzMzkgZm9ybWF0IgogICAgfSwKICAgICJzdHJlYW0iOiB7CiAgICAgICJ0eXBlIjogInN0cmluZyIsCiAgICAgICJkZXNjcmlwdGlvbiI6ICJUaGUgU3RyZWFtIHRoYXQgaGFkIHRoZSBzbmFwc2hvdCIKICAgIH0sCiAgICAic3RhcnQiOiB7CiAgICAgICJ0eXBlIjogInN0cmluZyIsCiAgICAgICJkZXNjcmlwdGlvbiI6ICJUaGUgdGltZSB0aGUgc25hcHNob3Qgd2FzIGNyZWF0ZWQiCiAgICB9LAogICAgImVuZCI6IHsKICAgICAgInR5cGUiOiAic3RyaW5nIiwKICAgICAgImRlc2NyaXB0aW9uIjogIlRoZSB0aW1lIHRoZSBzbmFwc2hvdCB3YXMgY29tcGxldGVkIgogICAgfSwKICAgICJjbGllbnQiOiB7CiAgICAgICJ0eXBlIjogIm9iamVjdCIsCiAgICAgICJhZGRpdGlvbmFsUHJvcGVydGllcyI6IGZhbHNlLAogICAgICAiZGVzY3JpcHRpb24iOiAiRGV0YWlscyBhYm91dCB0aGUgY2xpZW50IHRoYXQgY29ubmVjdGVkIHRvIHRoZSBzZXJ2ZXIiLAogICAgICAicmVxdWlyZWQiOiBbCiAgICAgICAgImFjYyIKICAgICAgXSwKICAgICAgInByb3BlcnRpZXMiOiB7CiAgICAgICAgInN0YXJ0IjogewogICAgICAgICAgInR5cGUiOiAic3RyaW5nIiwKICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJUaW1lc3RhbXAgd2hlbiB0aGUgY2xpZW50IGNvbm5lY3RlZCIKICAgICAgICB9LAogICAgICAgICJzdG9wIjogewogICAgICAgICAgInR5cGUiOiAic3RyaW5nIiwKICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJUaW1lc3RhbXAgd2hlbiB0aGUgY2xpZW50IGRpc2Nvbm5lY3RlZCIKICAgICAgICB9LAogICAgICAgICJob3N0IjogewogICAgICAgICAgInR5cGUiOiAic3RyaW5nIiwKICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJUaGUgcmVtb3RlIGhvc3QgdGhlIGNsaWVudCBpcyBjb25uZWN0ZWQgZnJvbSIKICAgICAgICB9LAogICAgICAgICJpZCI6IHsKICAgICAgICAgICJ0eXBlIjogInN0cmluZyIsCiAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiVGhlIGludGVybmFsbHkgYXNzaWduZWQgY2xpZW50IElEIGZvciB0aGlzIGNvbm5lY3Rpb24iCiAgICAgICAgfSwKICAgICAgICAiYWNjIjogewogICAgICAgICAgInR5cGUiOiAic3RyaW5nIiwKICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJUaGUgYWNjb3VudCB0aGlzIHVzZXIgbG9nZ2VkIGluIHRvIgogICAgICAgIH0sCiAgICAgICAgInVzZXIiOiB7CiAgICAgICAgICAidHlwZSI6ICJzdHJpbmciLAogICAgICAgICAgImRlc2NyaXB0aW9uIjogIlRoZSBjbGllbnRzIHVzZXJuYW1lIgogICAgICAgIH0sCiAgICAgICAgIm5hbWUiOiB7CiAgICAgICAgICAidHlwZSI6ICJzdHJpbmciLAogICAgICAgICAgImRlc2NyaXB0aW9uIjogIlRoZSBuYW1lIHByZXNlbnRlZCBieSB0aGUgY2xpZW50IGR1cmluZyBjb25uZWN0aW9uIgogICAgICAgIH0sCiAgICAgICAgImxhbmciOiB7CiAgICAgICAgICAidHlwZSI6ICJzdHJpbmciLAogICAgICAgICAgImRlc2NyaXB0aW9uIjogIlRoZSBwcm9ncmFtbWluZyBsYW5ndWFnZSBsaWJyYXJ5IGluIHVzZSBieSB0aGUgY2xpZW50IgogICAgICAgIH0sCiAgICAgICAgInZlciI6IHsKICAgICAgICAgICJ0eXBlIjogInN0cmluZyIsCiAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiVGhlIHZlcnNpb24gb2YgdGhlIGNsaWVudCBsaWJyYXJ5IGluIHVzZSIKICAgICAgICB9LAogICAgICAgICJydHQiOiB7CiAgICAgICAgICAidHlwZSI6ICJudW1iZXIiLAogICAgICAgICAgImRlc2NyaXB0aW9uIjogIlRoZSBsYXN0IGtub3duIGxhdGVuY3kgYmV0d2VlbiB0aGUgTkFUUyBTZXJ2ZXIgYW5kIHRoZSBDbGllbnQgaW4gbmFub3NlY29uZHMiCiAgICAgICAgfSwKICAgICAgICAic2VydmVyIjogewogICAgICAgICAgInR5cGUiOiAic3RyaW5nIiwKICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJUaGUgc2VydmVyIHRoYXQgdGhlIGNsaWVudCB3YXMgY29ubmVjdGVkIHRvIgogICAgICAgIH0sCiAgICAgICAgImNsdXN0ZXIiOiB7CiAgICAgICAgICAidHlwZSI6ICJzdHJpbmciLAogICAgICAgICAgImRlc2NyaXB0aW9uIjogIlRoZSBjbHVzdGVyIG5hbWUgdGhlIHNlcnZlciBpcyBjb25uZWN0ZWQgdG8iCiAgICAgICAgfSwKICAgICAgICAiand0IjogewogICAgICAgICAgInR5cGUiOiAic3RyaW5nIiwKICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJUaGUgSldUIHByZXNlbnRlZCBpbiB0aGUgY29ubmVjdGlvbiIKICAgICAgICB9LAogICAgICAgICJpc3N1ZXJfa2V5IjogewogICAgICAgICAgInR5cGUiOiAic3RyaW5nIiwKICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJUaGUgcHVibGljIHNpZ25pbmcga2V5IG9yIGFjY291bnQgaWRlbnRpdHkga2V5IHVzZWQgdG8gaXNzdWUgdGhlIHVzZXIiCiAgICAgICAgfSwKICAgICAgICAibmFtZV90YWciOiB7CiAgICAgICAgICAidHlwZSI6ICJzdHJpbmciLAogICAgICAgICAgImRlc2NyaXB0aW9uIjogIlRoZSBuYW1lIGV4dHJhY3RlZCBmcm9tIHRoZSB1c2VyIEpXVCBjbGFpbSIKICAgICAgICB9LAogICAgICAgICJ0YWdzIjogewogICAgICAgICAgInR5cGUiOiAiYXJyYXkiLAogICAgICAgICAgIml0ZW1zIjogewogICAgICAgICAgICAidHlwZSI6ICJzdHJpbmciCiAgICAgICAgICB9LAogICAgICAgICAgImRlc2NyaXB0aW9uIjogIlRhZ3MgZXh0cmFjdGVkIGZyb20gdGhlIEpXVCIKICAgICAgICB9CiAgICAgIH0KICAgIH0KICB9Cn0K")
	schemas["io.nats.jetstream.advisory.v1.restore_create"], _ = base64.StdEncoding.DecodeString("ewogICIkc2NoZW1hIjogImh0dHA6Ly9qc29uLXNjaGVtYS5vcmcvZHJhZnQtMDcvc2NoZW1hIyIsCiAgIiRpZCI6ICJodHRwczovL25hdHMuaW8vc2NoZW1hcy9qZXRzdHJlYW0vYWR2aXNvcnkvdjEvcmVzdG9yZV9jcmVhdGUuanNvbiIsCiAgImRlc2NyaXB0aW9uIjogIkFuIEFkdmlzb3J5IHNlbnQgd2hlbiBhIFN0cmVhbSByZXN0b3JlIGlzIHN0YXJ0ZWQiLAogICJ0aXRsZSI6ICJpby5uYXRzLmpldHN0cmVhbS5hZHZpc29yeS52MS5yZXN0b3JlX2NyZWF0ZSIsCiAgInR5cGUiOiAib2JqZWN0IiwKICAicmVxdWlyZWQiOiBbCiAgICAidHlwZSIsCiAgICAiaWQiLAogICAgInRpbWVzdGFtcCIsCiAgICAic3RyZWFtIiwKICAgICJjbGllbnQiCiAgXSwKICAiYWRkaXRpb25hbFByb3BlcnRpZXMiOiBmYWxzZSwKICAicHJvcGVydGllcyI6IHsKICAgICJ0eXBlIjogewogICAgICAidHlwZSI6ICJzdHJpbmciLAogICAgICAiY29uc3QiOiAiaW8ubmF0cy5qZXRzdHJlYW0uYWR2aXNvcnkudjEucmVzdG9yZV9jcmVhdGUiCiAgICB9LAogICAgImlkIjogewogICAgICAidHlwZSI6ICJzdHJpbmciLAogICAgICAiZGVzY3JpcHRpb24iOiAiVW5pcXVlIGNvcnJlbGF0aW9uIElEIGZvciB0aGlzIGV2ZW50IgogICAgfSwKICAgICJ0aW1lc3RhbXAiOiB7CiAgICAgICJ0eXBlIjogInN0cmluZyIsCiAgICAgICJkZXNjcmlwdGlvbiI6ICJUaGUgdGltZSB0aGlzIGV2ZW50IHdhcyBjcmVhdGVkIGluIFJGQzMzMzkgZm9ybWF0IgogICAgfSwKICAgICJzdHJlYW0iOiB7CiAgICAgICJ0eXBlIjogInN0cmluZyIsCiAgICAgICJkZXNjcmlwdGlvbiI6ICJUaGUgU3RyZWFtIGJlaW5nIHJlc3RvcmVkIgogICAgfSwKICAgICJjbGllbnQiOiB7CiAgICAgICJ0eXBlIjogIm9iamVjdCIsCiAgICAgICJhZGRpdGlvbmFsUHJvcGVydGllcyI6IGZhbHNlLAogICAgICAiZGVzY3JpcHRpb24iOiAiRGV0YWlscyBhYm91dCB0aGUgY2xpZW50IHRoYXQgY29ubmVjdGVkIHRvIHRoZSBzZXJ2ZXIiLAogICAgICAicmVxdWlyZWQiOiBbCiAgICAgICAgImFjYyIKICAgICAgXSwKICAgICAgInByb3BlcnRpZXMiOiB7CiAgICAgICAgInN0YXJ0IjogewogICAgICAgICAgInR5cGUiOiAic3RyaW5nIiwKICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJUaW1lc3RhbXAgd2hlbiB0aGUgY2xpZW50IGNvbm5lY3RlZCIKICAgICAgICB9LAogICAgICAgICJzdG9wIjogewogICAgICAgICAgInR5cGUiOiAic3RyaW5nIiwKICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJUaW1lc3RhbXAgd2hlbiB0aGUgY2xpZW50IGRpc2Nvbm5lY3RlZCIKICAgICAgICB9LAogICAgICAgICJob3N0IjogewogICAgICAgICAgInR5cGUiOiAic3RyaW5nIiwKICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJUaGUgcmVtb3RlIGhvc3QgdGhlIGNsaWVudCBpcyBjb25uZWN0ZWQgZnJvbSIKICAgICAgICB9LAogICAgICAgICJpZCI6IHsKICAgICAgICAgICJ0eXBlIjogInN0cmluZyIsCiAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiVGhlIGludGVybmFsbHkgYXNzaWduZWQgY2xpZW50IElEIGZvciB0aGlzIGNvbm5lY3Rpb24iCiAgICAgICAgfSwKICAgICAgICAiYWNjIjogewogICAgICAgICAgInR5cGUiOiAic3RyaW5nIiwKICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJUaGUgYWNjb3VudCB0aGlzIHVzZXIgbG9nZ2VkIGluIHRvIgogICAgICAgIH0sCiAgICAgICAgInVzZXIiOiB7CiAgICAgICAgICAidHlwZSI6ICJzdHJpbmciLAogICAgICAgICAgImRlc2NyaXB0aW9uIjogIlRoZSBjbGllbnRzIHVzZXJuYW1lIgogICAgICAgIH0sCiAgICAgICAgIm5hbWUiOiB7CiAgICAgICAgICAidHlwZSI6ICJzdHJpbmciLAogICAgICAgICAgImRlc2NyaXB0aW9uIjogIlRoZSBuYW1lIHByZXNlbnRlZCBieSB0aGUgY2xpZW50IGR1cmluZyBjb25uZWN0aW9uIgogICAgICAgIH0sCiAgICAgICAgImxhbmciOiB7CiAgICAgICAgICAidHlwZSI6ICJzdHJpbmciLAogICAgICAgICAgImRlc2NyaXB0aW9uIjogIlRoZSBwcm9ncmFtbWluZyBsYW5ndWFnZSBsaWJyYXJ5IGluIHVzZSBieSB0aGUgY2xpZW50IgogICAgICAgIH0sCiAgICAgICAgInZlciI6IHsKICAgICAgICAgICJ0eXBlIjogInN0cmluZyIsCiAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiVGhlIHZlcnNpb24gb2YgdGhlIGNsaWVudCBsaWJyYXJ5IGluIHVzZSIKICAgICAgICB9LAogICAgICAgICJydHQiOiB7CiAgICAgICAgICAidHlwZSI6ICJudW1iZXIiLAogICAgICAgICAgImRlc2NyaXB0aW9uIjogIlRoZSBsYXN0IGtub3duIGxhdGVuY3kgYmV0d2VlbiB0aGUgTkFUUyBTZXJ2ZXIgYW5kIHRoZSBDbGllbnQgaW4gbmFub3NlY29uZHMiCiAgICAgICAgfSwKICAgICAgICAic2VydmVyIjogewogICAgICAgICAgInR5cGUiOiAic3RyaW5nIiwKICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJUaGUgc2VydmVyIHRoYXQgdGhlIGNsaWVudCB3YXMgY29ubmVjdGVkIHRvIgogICAgICAgIH0sCiAgICAgICAgImNsdXN0ZXIiOiB7CiAgICAgICAgICAidHlwZSI6ICJzdHJpbmciLAogICAgICAgICAgImRlc2NyaXB0aW9uIjogIlRoZSBjbHVzdGVyIG5hbWUgdGhlIHNlcnZlciBpcyBjb25uZWN0ZWQgdG8iCiAgICAgICAgfSwKICAgICAgICAiand0IjogewogICAgICAgICAgInR5cGUiOiAic3RyaW5nIiwKICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJUaGUgSldUIHByZXNlbnRlZCBpbiB0aGUgY29ubmVjdGlvbiIKICAgICAgICB9LAogICAgICAgICJpc3N1ZXJfa2V5IjogewogICAgICAgICAgInR5cGUiOiAic3RyaW5nIiwKICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJUaGUgcHVibGljIHNpZ25pbmcga2V5IG9yIGFjY291bnQgaWRlbnRpdHkga2V5IHVzZWQgdG8gaXNzdWUgdGhlIHVzZXIiCiAgICAgICAgfSwKICAgICAgICAibmFtZV90YWciOiB7CiAgICAgICAgICAidHlwZSI6ICJzdHJpbmciLAogICAgICAgICAgImRlc2NyaXB0aW9uIjogIlRoZSBuYW1lIGV4dHJhY3RlZCBmcm9tIHRoZSB1c2VyIEpXVCBjbGFpbSIKICAgICAgICB9LAogICAgICAgICJ0YWdzIjogewogICAgICAgICAgInR5cGUiOiAiYXJyYXkiLAogICAgICAgICAgIml0ZW1zIjogewogICAgICAgICAgICAidHlwZSI6ICJzdHJpbmciCiAgICAgICAgICB9LAogICAgICAgICAgImRlc2NyaXB0aW9uIjogIlRhZ3MgZXh0cmFjdGVkIGZyb20gdGhlIEpXVCIKICAgICAgICB9CiAgICAgIH0KICAgIH0KICB9Cn0K")
	schemas["io.nats.jetstream.advisory.v1.restore_complete"], _ = base64.StdEncoding.DecodeString("ewogICIkc2NoZW1hIjogImh0dHA6Ly9qc29uLXNjaGVtYS5vcmcvZHJhZnQtMDcvc2NoZW1hIyIsCiAgIiRpZCI6ICJodHRwczovL25hdHMuaW8vc2NoZW1hcy9qZXRzdHJlYW0vYWR2aXNvcnkvdjEvcmVzdG9yZV9jb21wbGV0ZS5qc29uIiwKICAiZGVzY3JpcHRpb24iOiAiQW4gQWR2aXNvcnkgc2VudCB3aGVuIGEgU3RyZWFtIHJlc3RvcmUgaXMgY29tcGxldGVkIiwKICAidGl0bGUiOiAiaW8ubmF0cy5qZXRzdHJlYW0uYWR2aXNvcnkudjEucmVzdG9yZV9jb21wbGV0ZSIsCiAgInR5cGUiOiAib2JqZWN0IiwKICAicmVxdWlyZWQiOiBbCiAgICAidHlwZSIsCiAgICAiaWQiLAogICAgInRpbWVzdGFtcCIsCiAgICAic3RyZWFtIiwKICAgICJzdGFydCIsCiAgICAiZW5kIiwKICAgICJieXRlcyIsCiAgICAiY2xpZW50IgogIF0sCiAgImFkZGl0aW9uYWxQcm9wZXJ0aWVzIjogZmFsc2UsCiAgInByb3BlcnRpZXMiOiB7CiAgICAidHlwZSI6IHsKICAgICAgInR5cGUiOiAic3RyaW5nIiwKICAgICAgImNvbnN0IjogImlvLm5hdHMuamV0c3RyZWFtLmFkdmlzb3J5LnYxLnJlc3RvcmVfY29tcGxldGUiCiAgICB9LAogICAgImlkIjogewogICAgICAidHlwZSI6ICJzdHJpbmciLAogICAgICAiZGVzY3JpcHRpb24iOiAiVW5pcXVlIGNvcnJlbGF0aW9uIElEIGZvciB0aGlzIGV2ZW50IgogICAgfSwKICAgICJ0aW1lc3RhbXAiOiB7CiAgICAgICJ0eXBlIjogInN0cmluZyIsCiAgICAgICJkZXNjcmlwdGlvbiI6ICJUaGUgdGltZSB0aGlzIGV2ZW50IHdhcyBjcmVhdGVkIGluIFJGQzMzMzkgZm9ybWF0IgogICAgfSwKICAgICJzdHJlYW0iOiB7CiAgICAgICJ0eXBlIjogInN0cmluZyIsCiAgICAgICJkZXNjcmlwdGlvbiI6ICJUaGUgU3RyZWFtIGJlaW5nIHJlc3RvcmVkIgogICAgfSwKICAgICJzdGFydCI6IHsKICAgICAgInR5cGUiOiAic3RyaW5nIiwKICAgICAgImRlc2NyaXB0aW9uIjogIlRoZSB0aW1lIHRoZSBSZXN0b3JlIHByb2Nlc3Mgc3RhcnRlZCIKICAgIH0sCiAgICAiZW5kIjogewogICAgICAidHlwZSI6ICJzdHJpbmciLAogICAgICAiZGVzY3JpcHRpb24iOiAiVGhlIHRpbWUgdGhlIFJlc3RvcmUgd2FzIGNvbXBsZXRlZCIKICAgIH0sCiAgICAiYnl0ZXMiOiB7CiAgICAgICJ0eXBlIjogImludGVnZXIiLAogICAgICAiZGVzY3JpcHRpb24iOiAiVGhlIG51bWJlciBvZiBieXRlcyB0aGF0IHdhcyByZWNlaXZlZCIsCiAgICAgICJtaW5pbXVtIjogMAogICAgfSwKICAgICJjbGllbnQiOiB7CiAgICAgICJ0eXBlIjogIm9iamVjdCIsCiAgICAgICJhZGRpdGlvbmFsUHJvcGVydGllcyI6IGZhbHNlLAogICAgICAiZGVzY3JpcHRpb24iOiAiRGV0YWlscyBhYm91dCB0aGUgY2xpZW50IHRoYXQgY29ubmVjdGVkIHRvIHRoZSBzZXJ2ZXIiLAogICAgICAicmVxdWlyZWQiOiBbCiAgICAgICAgImFjYyIKICAgICAgXSwKICAgICAgInByb3BlcnRpZXMiOiB7CiAgICAgICAgInN0YXJ0IjogewogICAgICAgICAgInR5cGUiOiAic3RyaW5nIiwKICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJUaW1lc3RhbXAgd2hlbiB0aGUgY2xpZW50IGNvbm5lY3RlZCIKICAgICAgICB9LAogICAgICAgICJzdG9wIjogewogICAgICAgICAgInR5cGUiOiAic3RyaW5nIiwKICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJUaW1lc3RhbXAgd2hlbiB0aGUgY2xpZW50IGRpc2Nvbm5lY3RlZCIKICAgICAgICB9LAogICAgICAgICJob3N0IjogewogICAgICAgICAgInR5cGUiOiAic3RyaW5nIiwKICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJUaGUgcmVtb3RlIGhvc3QgdGhlIGNsaWVudCBpcyBjb25uZWN0ZWQgZnJvbSIKICAgICAgICB9LAogICAgICAgICJpZCI6IHsKICAgICAgICAgICJ0eXBlIjogInN0cmluZyIsCiAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiVGhlIGludGVybmFsbHkgYXNzaWduZWQgY2xpZW50IElEIGZvciB0aGlzIGNvbm5lY3Rpb24iCiAgICAgICAgfSwKICAgICAgICAiYWNjIjogewogICAgICAgICAgInR5cGUiOiAic3RyaW5nIiwKICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJUaGUgYWNjb3VudCB0aGlzIHVzZXIgbG9nZ2VkIGluIHRvIgogICAgICAgIH0sCiAgICAgICAgInVzZXIiOiB7CiAgICAgICAgICAidHlwZSI6ICJzdHJpbmciLAogICAgICAgICAgImRlc2NyaXB0aW9uIjogIlRoZSBjbGllbnRzIHVzZXJuYW1lIgogICAgICAgIH0sCiAgICAgICAgIm5hbWUiOiB7CiAgICAgICAgICAidHlwZSI6ICJzdHJpbmciLAogICAgICAgICAgImRlc2NyaXB0aW9uIjogIlRoZSBuYW1lIHByZXNlbnRlZCBieSB0aGUgY2xpZW50IGR1cmluZyBjb25uZWN0aW9uIgogICAgICAgIH0sCiAgICAgICAgImxhbmciOiB7CiAgICAgICAgICAidHlwZSI6ICJzdHJpbmciLAogICAgICAgICAgImRlc2NyaXB0aW9uIjogIlRoZSBwcm9ncmFtbWluZyBsYW5ndWFnZSBsaWJyYXJ5IGluIHVzZSBieSB0aGUgY2xpZW50IgogICAgICAgIH0sCiAgICAgICAgInZlciI6IHsKICAgICAgICAgICJ0eXBlIjogInN0cmluZyIsCiAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiVGhlIHZlcnNpb24gb2YgdGhlIGNsaWVudCBsaWJyYXJ5IGluIHVzZSIKICAgICAgICB9LAogICAgICAgICJydHQiOiB7CiAgICAgICAgICAidHlwZSI6ICJudW1iZXIiLAogICAgICAgICAgImRlc2NyaXB0aW9uIjogIlRoZSBsYXN0IGtub3duIGxhdGVuY3kgYmV0d2VlbiB0aGUgTkFUUyBTZXJ2ZXIgYW5kIHRoZSBDbGllbnQgaW4gbmFub3NlY29uZHMiCiAgICAgICAgfSwKICAgICAgICAic2VydmVyIjogewogICAgICAgICAgInR5cGUiOiAic3RyaW5nIiwKICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJUaGUgc2VydmVyIHRoYXQgdGhlIGNsaWVudCB3YXMgY29ubmVjdGVkIHRvIgogICAgICAgIH0sCiAgICAgICAgImNsdXN0ZXIiOiB7CiAgICAgICAgICAidHlwZSI6ICJzdHJpbmciLAogICAgICAgICAgImRlc2NyaXB0aW9uIjogIlRoZSBjbHVzdGVyIG5hbWUgdGhlIHNlcnZlciBpcyBjb25uZWN0ZWQgdG8iCiAgICAgICAgfSwKICAgICAgICAiand0IjogewogICAgICAgICAgInR5cGUiOiAic3RyaW5nIiwKICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJUaGUgSldUIHByZXNlbnRlZCBpbiB0aGUgY29ubmVjdGlvbiIKICAgICAgICB9LAogICAgICAgICJpc3N1ZXJfa2V5IjogewogICAgICAgICAgInR5cGUiOiAic3RyaW5nIiwKICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJUaGUgcHVibGljIHNpZ25pbmcga2V5IG9yIGFjY291bnQgaWRlbnRpdHkga2V5IHVzZWQgdG8gaXNzdWUgdGhlIHVzZXIiCiAgICAgICAgfSwKICAgICAgICAibmFtZV90YWciOiB7CiAgICAgICAgICAidHlwZSI6ICJzdHJpbmciLAogICAgICAgICAgImRlc2NyaXB0aW9uIjogIlRoZSBuYW1lIGV4dHJhY3RlZCBmcm9tIHRoZSB1c2VyIEpXVCBjbGFpbSIKICAgICAgICB9LAogICAgICAgICJ0YWdzIjogewogICAgICAgICAgInR5cGUiOiAiYXJyYXkiLAogICAgICAgICAgIml0ZW1zIjogewogICAgICAgICAgICAidHlwZSI6ICJzdHJpbmciCiAgICAgICAgICB9LAogICAgICAgICAgImRlc2NyaXB0aW9uIjogIlRhZ3MgZXh0cmFjdGVkIGZyb20gdGhlIEpXVCIKICAgICAgICB9CiAgICAgIH0KICAgIH0KICB9Cn0K")
	schemas["io.nats.jetstream.advisory.v1.stream_leader_elected"], _ = base64.StdEncoding.DecodeString("ewogICIkc2NoZW1hIjogImh0dHA6Ly9qc29uLXNjaGVtYS5vcmcvZHJhZnQtMDcvc2NoZW1hIyIsCiAgIiRpZCI6ICJodHRwczovL25hdHMuaW8vc2NoZW1hcy9qZXRzdHJlYW0vYWR2aXNvcnkvdjEvc3RyZWFtX2xlYWRlcl9lbGVjdGVkLmpzb24iLAogICJkZXNjcmlwdGlvbiI6ICJBbiBBZHZpc29yeSBzZW50IHdoZW4gYSBjbHVzdGVyZWQgU3RyZWFtIGVsZWN0ZWQgYSBuZXcgbGVhZGVyIiwKICAidGl0bGUiOiAiaW8ubmF0cy5qZXRzdHJlYW0uYWR2aXNvcnkudjEuc3RyZWFtX2xlYWRlcl9lbGVjdGVkIiwKICAidHlwZSI6ICJvYmplY3QiLAogICJyZXF1aXJlZCI6IFsKICAgICJ0eXBlIiwKICAgICJpZCIsCiAgICAidGltZXN0YW1wIiwKICAgICJzdHJlYW0iLAogICAgImxlYWRlciIsCiAgICAicmVwbGljYXMiCiAgXSwKICAiYWRkaXRpb25hbFByb3BlcnRpZXMiOiBmYWxzZSwKICAicHJvcGVydGllcyI6IHsKICAgICJ0eXBlIjogewogICAgICAidHlwZSI6ICJzdHJpbmciLAogICAgICAiY29uc3QiOiAiaW8ubmF0cy5qZXRzdHJlYW0uYWR2aXNvcnkudjEuc3RyZWFtX2xlYWRlcl9lbGVjdGVkIgogICAgfSwKICAgICJpZCI6IHsKICAgICAgInR5cGUiOiAic3RyaW5nIiwKICAgICAgImRlc2NyaXB0aW9uIjogIlVuaXF1ZSBjb3JyZWxhdGlvbiBJRCBmb3IgdGhpcyBldmVudCIKICAgIH0sCiAgICAidGltZXN0YW1wIjogewogICAgICAidHlwZSI6ICJzdHJpbmciLAogICAgICAiZGVzY3JpcHRpb24iOiAiVGhlIHRpbWUgdGhpcyBldmVudCB3YXMgY3JlYXRlZCBpbiBSRkMzMzM5IGZvcm1hdCIKICAgIH0sCiAgICAic3RyZWFtIjogewogICAgICAidHlwZSI6ICJzdHJpbmciLAogICAgICAiZGVzY3JpcHRpb24iOiAiVGhlIG5hbWUgb2YgdGhlIFN0cmVhbSB0aGF0IGVsZWN0ZWQgYSBsZWFkZXIiCiAgICB9LAogICAgImxlYWRlciI6IHsKICAgICAgInR5cGUiOiAic3RyaW5nIiwKICAgICAgImRlc2NyaXB0aW9uIjogIlRoZSBzZXJ2ZXIgbmFtZSBvZiB0aGUgZWxlY3RlZCBsZWFkZXIiCiAgICB9LAogICAgInJlcGxpY2FzIjogewogICAgICAidHlwZSI6ICJvYmplY3QiLAogICAgICAicmVxdWlyZWQiOiBbCiAgICAgICAgIm5hbWUiLAogICAgICAgICJjdXJyZW50IiwKICAgICAgICAiYWN0aXZlIgogICAgICBdLAogICAgICAicHJvcGVydGllcyI6IHsKICAgICAgICAibmFtZSI6IHsKICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJUaGUgc2VydmVyIG5hbWUgb2YgdGhlIHBlZXIiLAogICAgICAgICAgInR5cGUiOiAic3RyaW5nIiwKICAgICAgICAgICJtaW5pbXVtIjogMQogICAgICAgIH0sCiAgICAgICAgImN1cnJlbnQiOiB7CiAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiSW5kaWNhdGVzIGlmIHRoZSBzZXJ2ZXIgaXMgdXAgdG8gZGF0ZSBhbmQgc3luY2hyb25pc2VkIiwKICAgICAgICAgICJ0eXBlIjogImJvb2xlYW4iLAogICAgICAgICAgImRlZmF1bHQiOiBmYWxzZQogICAgICAgIH0sCiAgICAgICAgImFjdGl2ZSI6IHsKICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJOYW5vc2Vjb25kcyBzaW5jZSB0aGlzIHBlZXIgd2FzIGxhc3Qgc2VlbiIsCiAgICAgICAgICAidHlwZSI6ICJudW1iZXIiCiAgICAgICAgfSwKICAgICAgICAib2ZmbGluZSI6IHsKICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJJbmRpY2F0ZXMgdGhlIG5vZGUgaXMgY29uc2lkZXJlZCBvZmZsaW5lIGJ5IHRoZSBncm91cCIsCiAgICAgICAgICAidHlwZSI6ICJib29sZWFuIiwKICAgICAgICAgICJkZWZhdWx0IjogZmFsc2UKICAgICAgICB9LAogICAgICAgICJsYWciOiB7CiAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiSG93IG1hbnkgdW5jb21taXR0ZWQgb3BlcmF0aW9ucyB0aGlzIHBlZXIgaXMgYmVoaW5kIHRoZSBsZWFkZXIiLAogICAgICAgICAgInR5cGUiOiAiaW50ZWdlciIsCiAgICAgICAgICAibWluaW11bSI6IDAKICAgICAgICB9CiAgICAgIH0KICAgIH0KICB9Cn0K")
	schemas["io.nats.jetstream.advisory.v1.consumer_leader_elected"], _ = base64.StdEncoding.DecodeString("ewogICIkc2NoZW1hIjogImh0dHA6Ly9qc29uLXNjaGVtYS5vcmcvZHJhZnQtMDcvc2NoZW1hIyIsCiAgIiRpZCI6ICJodHRwczovL25hdHMuaW8vc2NoZW1hcy9qZXRzdHJlYW0vYWR2aXNvcnkvdjEvY29uc3VtZXJfbGVhZGVyX2VsZWN0ZWQuanNvbiIsCiAgImRlc2NyaXB0aW9uIjogIkFuIEFkdmlzb3J5IHNlbnQgd2hlbiBhIGNsdXN0ZXJlZCBDb25zdW1lciBlbGVjdGVkIGEgbmV3IGxlYWRlciIsCiAgInRpdGxlIjogImlvLm5hdHMuamV0c3RyZWFtLmFkdmlzb3J5LnYxLmNvbnN1bWVyX2xlYWRlcl9lbGVjdGVkIiwKICAidHlwZSI6ICJvYmplY3QiLAogICJyZXF1aXJlZCI6IFsKICAgICJ0eXBlIiwKICAgICJpZCIsCiAgICAidGltZXN0YW1wIiwKICAgICJzdHJlYW0iLAogICAgImNvbnN1bWVyIiwKICAgICJsZWFkZXIiLAogICAgInJlcGxpY2FzIgogIF0sCiAgImFkZGl0aW9uYWxQcm9wZXJ0aWVzIjogZmFsc2UsCiAgInByb3BlcnRpZXMiOiB7CiAgICAidHlwZSI6IHsKICAgICAgInR5cGUiOiAic3RyaW5nIiwKICAgICAgImNvbnN0IjogImlvLm5hdHMuamV0c3RyZWFtLmFkdmlzb3J5LnYxLmNvbnN1bWVyX2xlYWRlcl9lbGVjdGVkIgogICAgfSwKICAgICJpZCI6IHsKICAgICAgInR5cGUiOiAic3RyaW5nIiwKICAgICAgImRlc2NyaXB0aW9uIjogIlVuaXF1ZSBjb3JyZWxhdGlvbiBJRCBmb3IgdGhpcyBldmVudCIKICAgIH0sCiAgICAidGltZXN0YW1wIjogewogICAgICAidHlwZSI6ICJzdHJpbmciLAogICAgICAiZGVzY3JpcHRpb24iOiAiVGhlIHRpbWUgdGhpcyBldmVudCB3YXMgY3JlYXRlZCBpbiBSRkMzMzM5IGZvcm1hdCIKICAgIH0sCiAgICAic3RyZWFtIjogewogICAgICAidHlwZSI6ICJzdHJpbmciLAogICAgICAiZGVzY3JpcHRpb24iOiAiVGhlIG5hbWUgb2YgdGhlIFN0cmVhbSB0aGUgQ29uc3VtZXIgYmVsb25ncyB0byIKICAgIH0sCiAgICAiY29uc3VtZXIiOiB7CiAgICAgICJ0eXBlIjogInN0cmluZyIsCiAgICAgICJkZXNjcmlwdGlvbiI6ICJUaGUgbmFtZSBvZiB0aGUgQ29uc3VtZXIgdGhhdCBlbGVjdGVkIGEgbmV3IGxlYWRlciIKICAgIH0sCiAgICAibGVhZGVyIjogewogICAgICAidHlwZSI6ICJzdHJpbmciLAogICAgICAiZGVzY3JpcHRpb24iOiAiVGhlIHNlcnZlciBuYW1lIG9mIHRoZSBlbGVjdGVkIGxlYWRlciIKICAgIH0sCiAgICAicmVwbGljYXMiOiB7CiAgICAgICJ0eXBlIjogIm9iamVjdCIsCiAgICAgICJyZXF1aXJlZCI6IFsKICAgICAgICAibmFtZSIsCiAgICAgICAgImN1cnJlbnQiLAogICAgICAgICJhY3RpdmUiCiAgICAgIF0sCiAgICAgICJwcm9wZXJ0aWVzIjogewogICAgICAgICJuYW1lIjogewogICAgICAgICAgImRlc2NyaXB0aW9uIjogIlRoZSBzZXJ2ZXIgbmFtZSBvZiB0aGUgcGVlciIsCiAgICAgICAgICAidHlwZSI6ICJzdHJpbmciLAogICAgICAgICAgIm1pbmltdW0iOiAxCiAgICAgICAgfSwKICAgICAgICAiY3VycmVudCI6IHsKICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJJbmRpY2F0ZXMgaWYgdGhlIHNlcnZlciBpcyB1cCB0byBkYXRlIGFuZCBzeW5jaHJvbmlzZWQiLAogICAgICAgICAgInR5cGUiOiAiYm9vbGVhbiIsCiAgICAgICAgICAiZGVmYXVsdCI6IGZhbHNlCiAgICAgICAgfSwKICAgICAgICAiYWN0aXZlIjogewogICAgICAgICAgImRlc2NyaXB0aW9uIjogIk5hbm9zZWNvbmRzIHNpbmNlIHRoaXMgcGVlciB3YXMgbGFzdCBzZWVuIiwKICAgICAgICAgICJ0eXBlIjogIm51bWJlciIKICAgICAgICB9LAogICAgICAgICJvZmZsaW5lIjogewogICAgICAgICAgImRlc2NyaXB0aW9uIjogIkluZGljYXRlcyB0aGUgbm9kZSBpcyBjb25zaWRlcmVkIG9mZmxpbmUgYnkgdGhlIGdyb3VwIiwKICAgICAgICAgICJ0eXBlIjogImJvb2xlYW4iLAogICAgICAgICAgImRlZmF1bHQiOiBmYWxzZQogICAgICAgIH0sCiAgICAgICAgImxhZyI6IHsKICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJIb3cgbWFueSB1bmNvbW1pdHRlZCBvcGVyYXRpb25zIHRoaXMgcGVlciBpcyBiZWhpbmQgdGhlIGxlYWRlciIsCiAgICAgICAgICAidHlwZSI6ICJpbnRlZ2VyIiwKICAgICAgICAgICJtaW5pbXVtIjogMAogICAgICAgIH0KICAgICAgfQogICAgfQogIH0KfQo=")
	schemas["io.nats.jetstream.advisory.v1.stream_quorum_lost"], _ = base64.StdEncoding.DecodeString("ewogICIkc2NoZW1hIjogImh0dHA6Ly9qc29uLXNjaGVtYS5vcmcvZHJhZnQtMDcvc2NoZW1hIyIsCiAgIiRpZCI6ICJodHRwczovL25hdHMuaW8vc2NoZW1hcy9qZXRzdHJlYW0vYWR2aXNvcnkvdjEvc3RyZWFtX3F1b3J1bV9sb3N0Lmpzb24iLAogICJkZXNjcmlwdGlvbiI6ICJBbiBBZHZpc29yeSBzZW50IHdoZW4gYSBjbHVzdGVyZWQgU3RyZWFtIGxvc3QgcXVvcnVtIiwKICAidGl0bGUiOiAiaW8ubmF0cy5qZXRzdHJlYW0uYWR2aXNvcnkudjEuc3RyZWFtX3F1b3J1bV9sb3N0IiwKICAidHlwZSI6ICJvYmplY3QiLAogICJyZXF1aXJlZCI6IFsKICAgICJ0eXBlIiwKICAgICJpZCIsCiAgICAidGltZXN0YW1wIiwKICAgICJzdHJlYW0iLAogICAgInJlcGxpY2FzIgogIF0sCiAgImFkZGl0aW9uYWxQcm9wZXJ0aWVzIjogZmFsc2UsCiAgInByb3BlcnRpZXMiOiB7CiAgICAidHlwZSI6IHsKICAgICAgInR5cGUiOiAic3RyaW5nIiwKICAgICAgImNvbnN0IjogImlvLm5hdHMuamV0c3RyZWFtLmFkdmlzb3J5LnYxLnN0cmVhbV9xdW9ydW1fbG9zdCIKICAgIH0sCiAgICAiaWQiOiB7CiAgICAgICJ0eXBlIjogInN0cmluZyIsCiAgICAgICJkZXNjcmlwdGlvbiI6ICJVbmlxdWUgY29ycmVsYXRpb24gSUQgZm9yIHRoaXMgZXZlbnQiCiAgICB9LAogICAgInRpbWVzdGFtcCI6IHsKICAgICAgInR5cGUiOiAic3RyaW5nIiwKICAgICAgImRlc2NyaXB0aW9uIjogIlRoZSB0aW1lIHRoaXMgZXZlbnQgd2FzIGNyZWF0ZWQgaW4gUkZDMzMzOSBmb3JtYXQiCiAgICB9LAogICAgInN0cmVhbSI6IHsKICAgICAgInR5cGUiOiAic3RyaW5nIiwKICAgICAgImRlc2NyaXB0aW9uIjogIlRoZSBuYW1lIG9mIHRoZSBTdHJlYW0gdGhhdCBsb3N0IHF1b3J1bSIKICAgIH0sCiAgICAicmVwbGljYXMiOiB7CiAgICAgICJ0eXBlIjogIm9iamVjdCIsCiAgICAgICJyZXF1aXJlZCI6IFsKICAgICAgICAibmFtZSIsCiAgICAgICAgImN1cnJlbnQiLAogICAgICAgICJhY3RpdmUiCiAgICAgIF0sCiAgICAgICJwcm9wZXJ0aWVzIjogewogICAgICAgICJuYW1lIjogewogICAgICAgICAgImRlc2NyaXB0aW9uIjogIlRoZSBzZXJ2ZXIgbmFtZSBvZiB0aGUgcGVlciIsCiAgICAgICAgICAidHlwZSI6ICJzdHJpbmciLAogICAgICAgICAgIm1pbmltdW0iOiAxCiAgICAgICAgfSwKICAgICAgICAiY3VycmVudCI6IHsKICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJJbmRpY2F0ZXMgaWYgdGhlIHNlcnZlciBpcyB1cCB0byBkYXRlIGFuZCBzeW5jaHJvbmlzZWQiLAogICAgICAgICAgInR5cGUiOiAiYm9vbGVhbiIsCiAgICAgICAgICAiZGVmYXVsdCI6IGZhbHNlCiAgICAgICAgfSwKICAgICAgICAiYWN0aXZlIjogewogICAgICAgICAgImRlc2NyaXB0aW9uIjogIk5hbm9zZWNvbmRzIHNpbmNlIHRoaXMgcGVlciB3YXMgbGFzdCBzZWVuIiwKICAgICAgICAgICJ0eXBlIjogIm51bWJlciIKICAgICAgICB9LAogICAgICAgICJvZmZsaW5lIjogewogICAgICAgICAgImRlc2NyaXB0aW9uIjogIkluZGljYXRlcyB0aGUgbm9kZSBpcyBjb25zaWRlcmVkIG9mZmxpbmUgYnkgdGhlIGdyb3VwIiwKICAgICAgICAgICJ0eXBlIjogImJvb2xlYW4iLAogICAgICAgICAgImRlZmF1bHQiOiBmYWxzZQogICAgICAgIH0sCiAgICAgICAgImxhZyI6IHsKICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJIb3cgbWFueSB1bmNvbW1pdHRlZCBvcGVyYXRpb25zIHRoaXMgcGVlciBpcyBiZWhpbmQgdGhlIGxlYWRlciIsCiAgICAgICAgICAidHlwZSI6ICJpbnRlZ2VyIiwKICAgICAgICAgICJtaW5pbXVtIjogMAogICAgICAgIH0KICAgICAgfQogICAgfQogIH0KfQo=")
	schemas["io.nats.jetstream.advisory.v1.consumer_quorum_lost"], _ = base64.StdEncoding.DecodeString("ewogICIkc2NoZW1hIjogImh0dHA6Ly9qc29uLXNjaGVtYS5vcmcvZHJhZnQtMDcvc2NoZW1hIyIsCiAgIiRpZCI6ICJodHRwczovL25hdHMuaW8vc2NoZW1hcy9qZXRzdHJlYW0vYWR2aXNvcnkvdjEvY29uc3VtZXJfcXVvcnVtX2xvc3QuanNvbiIsCiAgImRlc2NyaXB0aW9uIjogIkFuIEFkdmlzb3J5IHNlbnQgd2hlbiBhIGNsdXN0ZXJlZCBDb25zdW1lciBsb3N0IHF1b3J1bSIsCiAgInRpdGxlIjogImlvLm5hdHMuamV0c3RyZWFtLmFkdmlzb3J5LnYxLmNvbnN1bWVyX3F1b3J1bV9sb3N0IiwKICAidHlwZSI6ICJvYmplY3QiLAogICJyZXF1aXJlZCI6IFsKICAgICJ0eXBlIiwKICAgICJpZCIsCiAgICAidGltZXN0YW1wIiwKICAgICJzdHJlYW0iLAogICAgImNvbnN1bWVyIiwKICAgICJyZXBsaWNhcyIKICBdLAogICJhZGRpdGlvbmFsUHJvcGVydGllcyI6IGZhbHNlLAogICJwcm9wZXJ0aWVzIjogewogICAgInR5cGUiOiB7CiAgICAgICJ0eXBlIjogInN0cmluZyIsCiAgICAgICJjb25zdCI6ICJpby5uYXRzLmpldHN0cmVhbS5hZHZpc29yeS52MS5jb25zdW1lcl9xdW9ydW1fbG9zdCIKICAgIH0sCiAgICAiaWQiOiB7CiAgICAgICJ0eXBlIjogInN0cmluZyIsCiAgICAgICJkZXNjcmlwdGlvbiI6ICJVbmlxdWUgY29ycmVsYXRpb24gSUQgZm9yIHRoaXMgZXZlbnQiCiAgICB9LAogICAgInRpbWVzdGFtcCI6IHsKICAgICAgInR5cGUiOiAic3RyaW5nIiwKICAgICAgImRlc2NyaXB0aW9uIjogIlRoZSB0aW1lIHRoaXMgZXZlbnQgd2FzIGNyZWF0ZWQgaW4gUkZDMzMzOSBmb3JtYXQiCiAgICB9LAogICAgInN0cmVhbSI6IHsKICAgICAgInR5cGUiOiAic3RyaW5nIiwKICAgICAgImRlc2NyaXB0aW9uIjogIlRoZSBuYW1lIG9mIHRoZSBTdHJlYW0gdGhlIENvbnN1bWVyIGJlbG9uZ3MgdG8iCiAgICB9LAogICAgImNvbnN1bWVyIjogewogICAgICAidHlwZSI6ICJzdHJpbmciLAogICAgICAiZGVzY3JpcHRpb24iOiAiVGhlIG5hbWUgb2YgdGhlIENvbnN1bWVyIHRoYXQgbG9zdCBxdW9ydW0iCiAgICB9LAogICAgInJlcGxpY2FzIjogewogICAgICAidHlwZSI6ICJvYmplY3QiLAogICAgICAicmVxdWlyZWQiOiBbCiAgICAgICAgIm5hbWUiLAogICAgICAgICJjdXJyZW50IiwKICAgICAgICAiYWN0aXZlIgogICAgICBdLAogICAgICAicHJvcGVydGllcyI6IHsKICAgICAgICAibmFtZSI6IHsKICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJUaGUgc2VydmVyIG5hbWUgb2YgdGhlIHBlZXIiLAogICAgICAgICAgInR5cGUiOiAic3RyaW5nIiwKICAgICAgICAgICJtaW5pbXVtIjogMQogICAgICAgIH0sCiAgICAgICAgImN1cnJlbnQiOiB7CiAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiSW5kaWNhdGVzIGlmIHRoZSBzZXJ2ZXIgaXMgdXAgdG8gZGF0ZSBhbmQgc3luY2hyb25pc2VkIiwKICAgICAgICAgICJ0eXBlIjogImJvb2xlYW4iLAogICAgICAgICAgImRlZmF1bHQiOiBmYWxzZQogICAgICAgIH0sCiAgICAgICAgImFjdGl2ZSI6IHsKICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJOYW5vc2Vjb25kcyBzaW5jZSB0aGlzIHBlZXIgd2FzIGxhc3Qgc2VlbiIsCiAgICAgICAgICAidHlwZSI6ICJudW1iZXIiCiAgICAgICAgfSwKICAgICAgICAib2ZmbGluZSI6IHsKICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJJbmRpY2F0ZXMgdGhlIG5vZGUgaXMgY29uc2lkZXJlZCBvZmZsaW5lIGJ5IHRoZSBncm91cCIsCiAgICAgICAgICAidHlwZSI6ICJib29sZWFuIiwKICAgICAgICAgICJkZWZhdWx0IjogZmFsc2UKICAgICAgICB9LAogICAgICAgICJsYWciOiB7CiAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiSG93IG1hbnkgdW5jb21taXR0ZWQgb3BlcmF0aW9ucyB0aGlzIHBlZXIgaXMgYmVoaW5kIHRoZSBsZWFkZXIiLAogICAgICAgICAgInR5cGUiOiAiaW50ZWdlciIsCiAgICAgICAgICAibWluaW11bSI6IDAKICAgICAgICB9CiAgICAgIH0KICAgIH0KICB9Cn0K")
	schemas["io.nats.jetstream.metric.v1.consumer_ack"], _ = base64.StdEncoding.DecodeString("ewogICIkc2NoZW1hIjogImh0dHA6Ly9qc29uLXNjaGVtYS5vcmcvZHJhZnQtMDcvc2NoZW1hIyIsCiAgIiRpZCI6ICJodHRwczovL25hdHMuaW8vc2NoZW1hcy9qZXRzdHJlYW0vbWV0cmljL3YxL2NvbnN1bWVyX2Fjay5qc29uIiwKICAiZGVzY3JpcHRpb24iOiAiTWV0cmljIHB1Ymxpc2hlZCB3aGVuIGEgbWVzc2FnZSB3YXMgYWNrbm93bGVkZ2VkIHRvIGEgY29uc3VtZXIgd2l0aCBBY2sgU2FtcGxpbmcgZW5hYmxlZCIsCiAgInRpdGxlIjogImlvLm5hdHMuamV0c3RyZWFtLm1ldHJpYy52MS5jb25zdW1lcl9hY2siLAogICJ0eXBlIjogIm9iamVjdCIsCiAgInJlcXVpcmVkIjogWwogICAgInR5cGUiLAogICAgImlkIiwKICAgICJ0aW1lc3RhbXAiLAogICAgInN0cmVhbSIsCiAgICAiY29uc3VtZXIiLAogICAgInN0cmVhbV9zZXEiLAogICAgImNvbnN1bWVyX3NlcSIsCiAgICAiYWNrX3RpbWUiLAogICAgImRlbGl2ZXJpZXMiCiAgXSwKICAiYWRkaXRpb25hbFByb3BlcnRpZXMiOiBmYWxzZSwKICAicHJvcGVydGllcyI6IHsKICAgICJ0eXBlIjogewogICAgICAidHlwZSI6ICJzdHJpbmciLAogICAgICAiY29uc3QiOiAiaW8ubmF0cy5qZXRzdHJlYW0ubWV0cmljLnYxLmNvbnN1bWVyX2FjayIKICAgIH0sCiAgICAiaWQiOiB7CiAgICAgICJ0eXBlIjogInN0cmluZyIsCiAgICAgICJkZXNjcmlwdGlvbiI6ICJVbmlxdWUgY29ycmVsYXRpb24gSUQgZm9yIHRoaXMgZXZlbnQiCiAgICB9LAogICAgInRpbWVzdGFtcCI6IHsKICAgICAgInR5cGUiOiAic3RyaW5nIiwKICAgICAgImRlc2NyaXB0aW9uIjogIlRoZSB0aW1lIHRoaXMgZXZlbnQgd2FzIGNyZWF0ZWQgaW4gUkZDMzMzOSBmb3JtYXQiCiAgICB9LAogICAgInN0cmVhbSI6IHsKICAgICAgInR5cGUiOiAic3RyaW5nIiwKICAgICAgImRlc2NyaXB0aW9uIjogIlRoZSBuYW1lIG9mIHRoZSBzdHJlYW0gd2hlcmUgdGhlIG1lc3NhZ2UgaXMgc3RvcmVkIgogICAgfSwKICAgICJjb25zdW1lciI6IHsKICAgICAgInR5cGUiOiAic3RyaW5nIiwKICAgICAgImRlc2NyaXB0aW9uIjogIlRoZSBuYW1lIG9mIHRoZSBjb25zdW1lciB3aGVyZSB0aGUgbWVzc2FnZSBpcyBoZWxkIgogICAgfSwKICAgICJzdHJlYW1fc2VxIjogewogICAgICAidHlwZSI6ICJpbnRlZ2VyIiwKICAgICAgIm1pbmltdW0iOiAxLAogICAgICAiZGVzY3JpcHRpb24iOiAiVGhlIHNlcXVlbmNlIG9mIHRoZSBtZXNzYWdlIGluIHRoZSBzdHJlYW0gdGhhdCB3ZXJlIGFja25vd2xlZGdlZCIKICAgIH0sCiAgICAiY29uc3VtZXJfc2VxIjogewogICAgICAidHlwZSI6ICJpbnRlZ2VyIiwKICAgICAgIm1pbmltdW0iOiAxLAogICAgICAiZGVzY3JpcHRpb24iOiAiVGhlIHNlcXVlbmNlIG9mIHRoZSBtZXNzYWdlIGluIHRoZSBjb25zdW1lciB0aGF0IHdlcmUgYWNrbm93bGVkZ2VkIgogICAgfSwKICAgICJhY2tfdGltZSI6IHsKICAgICAgInR5cGUiOiAiaW50ZWdlciIsCiAgICAgICJtaW5pbXVtIjogMSwKICAgICAgImRlc2NyaXB0aW9uIjogIlRoZSB0aW1lIGl0IHRvb2sgb24gdGhlIGZpbmFsIGRlbGl2ZXJ5IGZvciB0aGUgbWVzc2FnZSB0byBiZSBhY2tub3dsZWRnZWQgaW4gbmFub3NlY29uZHMiCiAgICB9LAogICAgImRlbGl2ZXJpZXMiOiB7CiAgICAgICJ0eXBlIjogImludGVnZXIiLAogICAgICAibWluaW11bSI6IDEsCiAgICAgICJkZXNjcmlwdGlvbiI6ICJUaGUgbnVtYmVyIG9mIGRlbGl2ZXJpZXMgdGhhdCB3ZXJlIGF0dGVtcHRlZCBiZWZvcmUgYmVpbmcgYWNrbm93bGVkZ2VkIgogICAgfQogIH0KfQo=")
	schemas["io.nats.jetstream.api.v1.consumer_configuration"], _ = base64.StdEncoding.DecodeString("ewogICIkc2NoZW1hIjogImh0dHA6Ly9qc29uLXNjaGVtYS5vcmcvZHJhZnQtMDcvc2NoZW1hIyIsCiAgIiRpZCI6ICJodHRwczovL25hdHMuaW8vc2NoZW1hcy9qZXRzdHJlYW0vYXBpL3YxL2NvbnN1bWVyX2NvbmZpZ3VyYXRpb24uanNvbiIsCiAgImRlc2NyaXB0aW9uIjogIlRoZSBkYXRhIHN0cnVjdHVyZSB0aGF0IGRlc2NyaWJlIHRoZSBjb25maWd1cmF0aW9uIG9mIGEgTkFUUyBKZXRTdHJlYW0gQ29uc3VtZXIiLAogICJ0aXRsZSI6ICJpby5uYXRzLmpldHN0cmVhbS5hcGkudjEuY29uc3VtZXJfY29uZmlndXJhdGlvbiIsCiAgInR5cGUiOiAib2JqZWN0IiwKICAicmVxdWlyZWQiOiBbCiAgICAiZGVsaXZlcl9wb2xpY3kiLAogICAgImFja19wb2xpY3kiLAogICAgInJlcGxheV9wb2xpY3kiCiAgXSwKICAiYWxsT2YiOiBbCiAgICB7CiAgICAgICJvbmVPZiI6IFsKICAgICAgICB7CiAgICAgICAgICAicmVxdWlyZWQiOiBbCiAgICAgICAgICAgICJkZWxpdmVyX3BvbGljeSIKICAgICAgICAgIF0sCiAgICAgICAgICAicHJvcGVydGllcyI6IHsKICAgICAgICAgICAgImRlbGl2ZXJfcG9saWN5IjogewogICAgICAgICAgICAgICJ0eXBlIjogInN0cmluZyIsCiAgICAgICAgICAgICAgImVudW0iOiBbCiAgICAgICAgICAgICAgICAiYWxsIgogICAgICAgICAgICAgIF0KICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgInJlcXVpcmVkIjogWwogICAgICAgICAgICAiZGVsaXZlcl9wb2xpY3kiCiAgICAgICAgICBdLAogICAgICAgICAgInByb3BlcnRpZXMiOiB7CiAgICAgICAgICAgICJkZWxpdmVyX3BvbGljeSI6IHsKICAgICAgICAgICAgICAidHlwZSI6ICJzdHJpbmciLAogICAgICAgICAgICAgICJlbnVtIjogWwogICAgICAgICAgICAgICAgImxhc3QiCiAgICAgICAgICAgICAgXQogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAicmVxdWlyZWQiOiBbCiAgICAgICAgICAgICJkZWxpdmVyX3BvbGljeSIKICAgICAgICAgIF0sCiAgICAgICAgICAicHJvcGVydGllcyI6IHsKICAgICAgICAgICAgImRlbGl2ZXJfcG9saWN5IjogewogICAgICAgICAgICAgICJ0eXBlIjogInN0cmluZyIsCiAgICAgICAgICAgICAgImVudW0iOiBbCiAgICAgICAgICAgICAgICAibmV3IgogICAgICAgICAgICAgIF0KICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgInJlcXVpcmVkIjogWwogICAgICAgICAgICAiZGVsaXZlcl9wb2xpY3kiLAogICAgICAgICAgICAib3B0X3N0YXJ0X3NlcSIKICAgICAgICAgIF0sCiAgICAgICAgICAicHJvcGVydGllcyI6IHsKICAgICAgICAgICAgImRlbGl2ZXJfcG9saWN5IjogewogICAgICAgICAgICAgICJ0eXBlIjogInN0cmluZyIsCiAgICAgICAgICAgICAgImVudW0iOiBbCiAgICAgICAgICAgICAgICAiYnlfc3RhcnRfc2VxdWVuY2UiCiAgICAgICAgICAgICAgXQogICAgICAgICAgICB9LAogICAgICAgICAgICAib3B0X3N0YXJ0X3NlcSI6IHsKICAgICAgICAgICAgICAidHlwZSI6ICJpbnRlZ2VyIiwKICAgICAgICAgICAgICAibWluaW11bSI6IDAKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgInJlcXVpcmVkIjogWwogICAgICAgICAgICAiZGVsaXZlcl9wb2xpY3kiLAogICAgICAgICAgICAib3B0X3N0YXJ0X3RpbWUiCiAgICAgICAgICBdLAogICAgICAgICAgInByb3BlcnRpZXMiOiB7CiAgICAgICAgICAgICJkZWxpdmVyX3BvbGljeSI6IHsKICAgICAgICAgICAgICAidHlwZSI6ICJzdHJpbmciLAogICAgICAgICAgICAgICJlbnVtIjogWwogICAgICAgICAgICAgICAgImJ5X3N0YXJ0X3RpbWUiCiAgICAgICAgICAgICAgXQogICAgICAgICAgICB9LAogICAgICAgICAgICAib3B0X3N0YXJ0X3RpbWUiOiB7CiAgICAgICAgICAgICAgInR5cGUiOiAic3RyaW5nIgogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICBdCiAgICB9CiAgXSwKICAicHJvcGVydGllcyI6IHsKICAgICJkdXJhYmxlX25hbWUiOiB7CiAgICAgICJkZXNjcmlwdGlvbiI6ICJBIHVuaXF1ZSBuYW1lIGZvciBhIGR1cmFibGUgY29uc3VtZXIiLAogICAgICAidHlwZSI6ICJzdHJpbmciLAogICAgICAicGF0dGVybiI6ICJeW14uKj5dKyQiLAogICAgICAibWluTGVuZ3RoIjogMQogICAgfSwKICAgICJkZWxpdmVyX3N1YmplY3QiOiB7CiAgICAgICJ0eXBlIjogInN0cmluZyIsCiAgICAgICJtaW5MZW5ndGgiOiAxCiAgICB9LAogICAgImFja19wb2xpY3kiOiB7CiAgICAgICJ0eXBlIjogInN0cmluZyIsCiAgICAgICJlbnVtIjogWwogICAgICAgICJub25lIiwKICAgICAgICAiYWxsIiwKICAgICAgICAiZXhwbGljaXQiCiAgICAgIF0KICAgIH0sCiAgICAiYWNrX3dhaXQiOiB7CiAgICAgICJkZXNjcmlwdGlvbiI6ICJIb3cgbG9uZyAoaW4gbmFub3NlY29uZHMpIHRvIGFsbG93IG1lc3NhZ2VzIHRvIHJlbWFpbiB1bi1hY2tub3dsZWRnZWQgYmVmb3JlIGF0dGVtcHRpbmcgcmVkZWxpdmVyeSIsCiAgICAgICJ0eXBlIjogImludGVnZXIiLAogICAgICAibWluaW11bSI6IDEKICAgIH0sCiAgICAibWF4X2RlbGl2ZXIiOiB7CiAgICAgICJ0eXBlIjogImludGVnZXIiCiAgICB9LAogICAgImZpbHRlcl9zdWJqZWN0IjogewogICAgICAidHlwZSI6ICJzdHJpbmciCiAgICB9LAogICAgInJlcGxheV9wb2xpY3kiOiB7CiAgICAgICJ0eXBlIjogInN0cmluZyIsCiAgICAgICJlbnVtIjogWwogICAgICAgICJpbnN0YW50IiwKICAgICAgICAib3JpZ2luYWwiCiAgICAgIF0KICAgIH0sCiAgICAic2FtcGxlX2ZyZXEiOiB7CiAgICAgICJ0eXBlIjogInN0cmluZyIKICAgIH0sCiAgICAicmF0ZV9saW1pdF9icHMiOiB7CiAgICAgICJ0eXBlIjogImludGVnZXIiLAogICAgICAiZGVzY3JpcHRpb24iOiAiVGhlIHJhdGUgYXQgd2hpY2ggbWVzc2FnZXMgd2lsbCBiZSBkZWxpdmVyZWQgdG8gY2xpZW50cywgZXhwcmVzc2VkIGluIGJpdCBwZXIgc2Vjb25kIiwKICAgICAgIm1pbmltdW0iOiAwCiAgICB9LAogICAgIm1heF9hY2tfcGVuZGluZyI6IHsKICAgICAgInR5cGUiOiAiaW50ZWdlciIsCiAgICAgICJkZXNjcmlwdGlvbiI6ICJUaGUgbWF4aW11bSBudW1iZXIgb2YgbWVzc2FnZXMgd2l0aG91dCBhY2tub3dsZWRnZW1lbnQgdGhhdCBjYW4gYmUgb3V0c3RhbmRpbmcsIG9uY2UgdGhpcyBsaW1pdCBpcyByZWFjaGVkIG1lc3NhZ2UgZGVsaXZlcnkgd2lsbCBiZSBzdXNwZW5kZWQiCiAgICB9CiAgfQp9Cg==")
	schemas["io.nats.jetstream.api.v1.stream_configuration"], _ = base64.StdEncoding.DecodeString("ewogICIkc2NoZW1hIjogImh0dHA6Ly9qc29uLXNjaGVtYS5vcmcvZHJhZnQtMDcvc2NoZW1hIyIsCiAgIiRpZCI6ICJodHRwczovL25hdHMuaW8vc2NoZW1hcy9qZXRzdHJlYW0vYXBpL3YxL3N0cmVhbV9jb25maWd1cmF0aW9uLmpzb24iLAogICJkZXNjcmlwdGlvbiI6ICJUaGUgZGF0YSBzdHJ1Y3R1cmUgdGhhdCBkZXNjcmliZSB0aGUgY29uZmlndXJhdGlvbiBvZiBhIE5BVFMgSmV0U3RyZWFtIFN0cmVhbSIsCiAgInRpdGxlIjogImlvLm5hdHMuamV0c3RyZWFtLmFwaS52MS5zdHJlYW1fY29uZmlndXJhdGlvbiIsCiAgInR5cGUiOiAib2JqZWN0IiwKICAicmVxdWlyZWQiOiBbCiAgICAicmV0ZW50aW9uIiwKICAgICJtYXhfY29uc3VtZXJzIiwKICAgICJtYXhfbXNncyIsCiAgICAibWF4X2J5dGVzIiwKICAgICJtYXhfYWdlIiwKICAgICJzdG9yYWdlIiwKICAgICJudW1fcmVwbGljYXMiCiAgXSwKICAiYWRkaXRpb25hbFByb3BlcnRpZXMiOiBmYWxzZSwKICAicHJvcGVydGllcyI6IHsKICAgICJuYW1lIjogewogICAgICAiZGVzY3JpcHRpb24iOiAiQSB1bmlxdWUgbmFtZSBmb3IgdGhlIFN0cmVhbSwgZW1wdHkgZm9yIFN0cmVhbSBUZW1wbGF0ZXMuIiwKICAgICAgInR5cGUiOiAic3RyaW5nIiwKICAgICAgInBhdHRlcm4iOiAiXlteLio+XSokIiwKICAgICAgIm1pbkxlbmd0aCI6IDAKICAgIH0sCiAgICAic3ViamVjdHMiOiB7CiAgICAgICJkZXNjcmlwdGlvbiI6ICJBIGxpc3Qgb2Ygc3ViamVjdHMgdG8gY29uc3VtZSwgc3VwcG9ydHMgd2lsZGNhcmRzLiBNdXN0IGJlIGVtcHR5IHdoZW4gYSBtaXJyb3IgaXMgY29uZmlndXJlZC4iLAogICAgICAidHlwZSI6ICJhcnJheSIsCiAgICAgICJtaW5MZW5ndGgiOiAwLAogICAgICAiaXRlbXMiOiB7CiAgICAgICAgInR5cGUiOiAic3RyaW5nIgogICAgICB9CiAgICB9LAogICAgInJldGVudGlvbiI6IHsKICAgICAgImRlc2NyaXB0aW9uIjogIkhvdyBtZXNzYWdlcyBhcmUgcmV0YWluZWQgaW4gdGhlIFN0cmVhbSwgb25jZSB0aGlzIGlzIGV4Y2VlZGVkIG9sZCBtZXNzYWdlcyBhcmUgcmVtb3ZlZC4iLAogICAgICAidHlwZSI6ICJzdHJpbmciLAogICAgICAiZW51bSI6IFsKICAgICAgICAibGltaXRzIiwKICAgICAgICAiaW50ZXJlc3QiLAogICAgICAgICJ3b3JrcXVldWUiCiAgICAgIF0sCiAgICAgICJkZWZhdWx0IjogImxpbWl0cyIKICAgIH0sCiAgICAibWF4X2NvbnN1bWVycyI6IHsKICAgICAgImRlc2NyaXB0aW9uIjogIkhvdyBtYW55IENvbnN1bWVycyBjYW4gYmUgZGVmaW5lZCBmb3IgYSBnaXZlbiBTdHJlYW0uIC0xIGZvciB1bmxpbWl0ZWQuIiwKICAgICAgInR5cGUiOiAiaW50ZWdlciIsCiAgICAgICJtaW5pbXVtIjogLTEsCiAgICAgICJkZWZhdWx0IjogLTEKICAgIH0sCiAgICAibWF4X21zZ3MiOiB7CiAgICAgICJkZXNjcmlwdGlvbiI6ICJIb3cgbWFueSBtZXNzYWdlcyBtYXkgYmUgaW4gYSBTdHJlYW0sIG9sZGVzdCBtZXNzYWdlcyB3aWxsIGJlIHJlbW92ZWQgaWYgdGhlIFN0cmVhbSBleGNlZWRzIHRoaXMgc2l6ZS4gLTEgZm9yIHVubGltaXRlZC4iLAogICAgICAidHlwZSI6ICJpbnRlZ2VyIiwKICAgICAgIm1pbmltdW0iOiAtMSwKICAgICAgImRlZmF1bHQiOiAtMQogICAgfSwKICAgICJtYXhfYnl0ZXMiOiB7CiAgICAgICJkZXNjcmlwdGlvbiI6ICJIb3cgYmlnIHRoZSBTdHJlYW0gbWF5IGJlLCB3aGVuIHRoZSBjb21iaW5lZCBzdHJlYW0gc2l6ZSBleGNlZWRzIHRoaXMgb2xkIG1lc3NhZ2VzIGFyZSByZW1vdmVkLiAtMSBmb3IgdW5saW1pdGVkLiIsCiAgICAgICJ0eXBlIjogImludGVnZXIiLAogICAgICAibWluaW11bSI6IC0xLAogICAgICAiZGVmYXVsdCI6IC0xCiAgICB9LAogICAgIm1heF9hZ2UiOiB7CiAgICAgICJkZXNjcmlwdGlvbiI6ICJNYXhpbXVtIGFnZSBvZiBhbnkgbWVzc2FnZSBpbiB0aGUgc3RyZWFtLCBleHByZXNzZWQgaW4gbWljcm9zZWNvbmRzLiAwIGZvciB1bmxpbWl0ZWQuIiwKICAgICAgInR5cGUiOiAiaW50ZWdlciIsCiAgICAgICJtaW5pbXVtIjogMCwKICAgICAgImRlZmF1bHQiOiAwCiAgICB9LAogICAgIm1heF9tc2dfc2l6ZSI6IHsKICAgICAgImRlc2NyaXB0aW9uIjogIlRoZSBsYXJnZXN0IG1lc3NhZ2UgdGhhdCB3aWxsIGJlIGFjY2VwdGVkIGJ5IHRoZSBTdHJlYW0uIC0xIGZvciB1bmxpbWl0ZWQuIiwKICAgICAgInR5cGUiOiAiaW50ZWdlciIsCiAgICAgICJtaW5pbXVtIjogLTEsCiAgICAgICJkZWZhdWx0IjogLTEKICAgIH0sCiAgICAic3RvcmFnZSI6IHsKICAgICAgImRlc2NyaXB0aW9uIjogIlRoZSBzdG9yYWdlIGJhY2tlbmQgdG8gdXNlIGZvciB0aGUgU3RyZWFtLiIsCiAgICAgICJ0eXBlIjogInN0cmluZyIsCiAgICAgICJlbnVtIjogWwogICAgICAgICJmaWxlIiwKICAgICAgICAibWVtb3J5IgogICAgICBdLAogICAgICAiZGVmYXVsdCI6ICJmaWxlIgogICAgfSwKICAgICJudW1fcmVwbGljYXMiOiB7CiAgICAgICJkZXNjcmlwdGlvbiI6ICJIb3cgbWFueSByZXBsaWNhcyB0byBrZWVwIGZvciBlYWNoIG1lc3NhZ2UuIiwKICAgICAgInR5cGUiOiAiaW50ZWdlciIsCiAgICAgICJtaW5pbXVtIjogMSwKICAgICAgImRlZmF1bHQiOiAxLAogICAgICAibWF4aW11bSI6IDUKICAgIH0sCiAgICAibm9fYWNrIjogewogICAgICAiZGVzY3JpcHRpb24iOiAiRGlzYWJsZXMgYWNrbm93bGVkZ2luZyBtZXNzYWdlcyB0aGF0IGFyZSByZWNlaXZlZCBieSB0aGUgU3RyZWFtLiIsCiAgICAgICJ0eXBlIjogImJvb2xlYW4iLAogICAgICAiZGVmYXVsdCI6IGZhbHNlCiAgICB9LAogICAgInRlbXBsYXRlX293bmVyIjogewogICAgICAiZGVzY3JpcHRpb24iOiAiV2hlbiB0aGUgU3RyZWFtIGlzIG1hbmFnZWQgYnkgYSBTdHJlYW0gVGVtcGxhdGUgdGhpcyBpZGVudGlmaWVzIHRoZSB0ZW1wbGF0ZSB0aGF0IG1hbmFnZXMgdGhlIFN0cmVhbS4iLAogICAgICAidHlwZSI6ICJzdHJpbmciCiAgICB9LAogICAgImRpc2NhcmQiOiB7CiAgICAgICJkZXNjcmlwdGlvbiI6ICJXaGVuIGEgU3RyZWFtIHJlYWNoIGl0J3MgbGltaXRzIGVpdGhlciBvbGQgbWVzc2FnZXMgYXJlIGRlbGV0ZWQgb3IgbmV3IG9uZXMgYXJlIGRlbmllZCIsCiAgICAgICJ0eXBlIjogInN0cmluZyIsCiAgICAgICJlbnVtIjogWwogICAgICAgICJvbGQiLAogICAgICAgICJuZXciCiAgICAgIF0sCiAgICAgICJkZWZhdWx0IjogIm9sZCIKICAgIH0sCiAgICAiZHVwbGljYXRlX3dpbmRvdyI6IHsKICAgICAgImRlc2NyaXB0aW9uIjogIlRoZSB0aW1lIHdpbmRvdyB0byB0cmFjayBkdXBsaWNhdGUgbWVzc2FnZXMgZm9yLCBleHByZXNzZWQgaW4gbWljcm9zZWNvbmRzLiAwIGZvciBkZWZhdWx0IiwKICAgICAgInR5cGUiOiAiaW50ZWdlciIsCiAgICAgICJtaW5pbXVtIjogMCwKICAgICAgImRlZmF1bHQiOiAwCiAgICB9LAogICAgInBsYWNlbWVudCI6IHsKICAgICAgImRlc2NyaXB0aW9uIjogIlBsYWNlbWVudCBkaXJlY3RpdmVzIHRvIGNvbnNpZGVyIHdoZW4gcGxhY2luZyByZXBsaWNhcyBvZiB0aGlzIHN0cmVhbSwgcmFuZG9tIHBsYWNlbWVudCB3aGVuIHVuc2V0IiwKICAgICAgInR5cGUiOiAib2JqZWN0IiwKICAgICAgInJlcXVpcmVkIjogWwogICAgICAgICJjbHVzdGVyIgogICAgICBdLAogICAgICAicHJvcGVydGllcyI6IHsKICAgICAgICAiY2x1c3RlciI6IHsKICAgICAgICAgICJ0eXBlIjogInN0cmluZyIsCiAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiVGhlIGRlc2lyZWQgY2x1c3RlciBuYW1lIHRvIHBsYWNlIHRoZSBzdHJlYW0iLAogICAgICAgICAgIm1pbkxlbmd0aCI6IDEKICAgICAgICB9LAogICAgICAgICJ0YWdzIjogewogICAgICAgICAgImRlc2NyaXB0aW9uIjogIlRhZ3MgcmVxdWlyZWQgb24gc2VydmVycyBob3N0aW5nIHRoaXMgc3RyZWFtIiwKICAgICAgICAgICJ0eXBlIjogImFycmF5IiwKICAgICAgICAgICJpdGVtcyI6IHsKICAgICAgICAgICAgInR5cGUiOiAic3RyaW5nIgogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfQogICAgfSwKICAgICJtaXJyb3IiOiB7CiAgICAgICJkZXNjcmlwdGlvbiI6ICJNYWludGFpbnMgYSAxOjEgbWlycm9yIG9mIGFub3RoZXIgc3RyZWFtIHdpdGggbmFtZSBtYXRjaGluZyB0aGlzIHByb3BlcnR5LiAgV2hlbiBhIG1pcnJvciBpcyBjb25maWd1cmVkIHN1YmplY3RzIGFuZCBzb3VyY2VzIG11c3QgYmUgZW1wdHkuIiwKICAgICAgInR5cGUiOiAib2JqZWN0IiwKICAgICAgInJlcXVpcmVkIjogWwogICAgICAgICJuYW1lIgogICAgICBdLAogICAgICAicHJvcGVydGllcyI6IHsKICAgICAgICAibmFtZSI6IHsKICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJTdHJlYW0gbmFtZSIsCiAgICAgICAgICAidHlwZSI6ICJzdHJpbmciLAogICAgICAgICAgInBhdHRlcm4iOiAiXlteLio+XSskIiwKICAgICAgICAgICJtaW5MZW5ndGgiOiAxCiAgICAgICAgfSwKICAgICAgICAib3B0X3N0YXJ0X3NlcSI6IHsKICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJTZXF1ZW5jZSB0byBzdGFydCByZXBsaWNhdGluZyBmcm9tIiwKICAgICAgICAgICJ0eXBlIjogImludGVnZXIiLAogICAgICAgICAgIm1pbmltdW0iOiAwCiAgICAgICAgfSwKICAgICAgICAib3B0X3N0YXJ0X3RpbWUiOiB7CiAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiVGltZSBzdGFtcCB0byBzdGFydCByZXBsaWNhdGluZyBmcm9tIiwKICAgICAgICAgICJ0eXBlIjogInN0cmluZyIKICAgICAgICB9LAogICAgICAgICJmaWx0ZXJfc3ViamVjdCI6IHsKICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJSZXBsaWNhdGUgb25seSBhIHN1YnNldCBvZiBtZXNzYWdlcyBiYXNlZCBvbiBmaWx0ZXIiLAogICAgICAgICAgInR5cGUiOiAic3RyaW5nIgogICAgICAgIH0KICAgICAgfQogICAgfSwKICAgICJzb3VyY2VzIjogewogICAgICAidHlwZSI6ICJhcnJheSIsCiAgICAgICJkZXNjcmlwdGlvbiI6ICJMaXN0IG9mIFN0cmVhbSBuYW1lcyB0byByZXBsaWNhdGUgaW50byB0aGlzIFN0cmVhbSIsCiAgICAgICJpdGVtcyI6IHsKICAgICAgICAidHlwZSI6ICJvYmplY3QiLAogICAgICAgICJkZXNjcmlwdGlvbiI6ICJEZWZpbmVzIGEgc291cmNlIHdoZXJlIHN0cmVhbXMgc2hvdWxkIGJlIHJlcGxpY2F0ZWQgZnJvbSIsCiAgICAgICAgInJlcXVpcmVkIjogWwogICAgICAgICAgIm5hbWUiCiAgICAgICAgXSwKICAgICAgICAicHJvcGVydGllcyI6IHsKICAgICAgICAgICJuYW1lIjogewogICAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiU3RyZWFtIG5hbWUiLAogICAgICAgICAgICAidHlwZSI6ICJzdHJpbmciLAogICAgICAgICAgICAicGF0dGVybiI6ICJeW14uKj5dKyQiLAogICAgICAgICAgICAibWluTGVuZ3RoIjogMQogICAgICAgICAgfSwKICAgICAgICAgICJvcHRfc3RhcnRfc2VxIjogewogICAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiU2VxdWVuY2UgdG8gc3RhcnQgcmVwbGljYXRpbmcgZnJvbSIsCiAgICAgICAgICAgICJ0eXBlIjogImludGVnZXIiLAogICAgICAgICAgICAibWluaW11bSI6IDAKICAgICAgICAgIH0sCiAgICAgICAgICAib3B0X3N0YXJ0X3RpbWUiOiB7CiAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJUaW1lIHN0YW1wIHRvIHN0YXJ0IHJlcGxpY2F0aW5nIGZyb20iLAogICAgICAgICAgICAidHlwZSI6ICJzdHJpbmciCiAgICAgICAgICB9LAogICAgICAgICAgImZpbHRlcl9zdWJqZWN0IjogewogICAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiUmVwbGljYXRlIG9ubHkgYSBzdWJzZXQgb2YgbWVzc2FnZXMgYmFzZWQgb24gZmlsdGVyIiwKICAgICAgICAgICAgInR5cGUiOiAic3RyaW5nIgogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfQogICAgfQogIH0KfQo=")
	schemas["io.nats.jetstream.api.v1.stream_template_configuration"], _ = base64.StdEncoding.DecodeString("ewogICIkc2NoZW1hIjogImh0dHA6Ly9qc29uLXNjaGVtYS5vcmcvZHJhZnQtMDcvc2NoZW1hIyIsCiAgIiRpZCI6ICJodHRwczovL25hdHMuaW8vc2NoZW1hcy9qZXRzdHJlYW0vYXBpL3YxL3N0cmVhbV90ZW1wbGF0ZV9jb25maWd1cmF0aW9uLmpzb24iLAogICJkZXNjcmlwdGlvbiI6ICJUaGUgZGF0YSBzdHJ1Y3R1cmUgdGhhdCBkZXNjcmliZSB0aGUgY29uZmlndXJhdGlvbiBvZiBhIE5BVFMgSmV0U3RyZWFtIFN0cmVhbSBUZW1wbGF0ZSIsCiAgInRpdGxlIjogImlvLm5hdHMuamV0c3RyZWFtLmFwaS52MS5zdHJlYW1fdGVtcGxhdGVfY29uZmlndXJhdGlvbiIsCiAgInR5cGUiOiAib2JqZWN0IiwKICAicmVxdWlyZWQiOiBbCiAgICAibmFtZSIsCiAgICAiY29uZmlnIiwKICAgICJtYXhfc3RyZWFtcyIKICBdLAogICJhZGRpdGlvbmFsUHJvcGVydGllcyI6IGZhbHNlLAogICJwcm9wZXJ0aWVzIjogewogICAgIm5hbWUiOiB7CiAgICAgICJkZXNjcmlwdGlvbiI6ICJBIHVuaXF1ZSBuYW1lIGZvciB0aGUgU3RyZWFtIFRlbXBsYXRlLiIsCiAgICAgICJ0eXBlIjogInN0cmluZyIsCiAgICAgICJwYXR0ZXJuIjogIl5bXi4qPl0rJCIsCiAgICAgICJtaW5MZW5ndGgiOiAxCiAgICB9LAogICAgIm1heF9zdHJlYW1zIjogewogICAgICAiZGVzY3JpcHRpb24iOiAiVGhlIG1heGltdW0gbnVtYmVyIG9mIFN0cmVhbXMgdGhpcyBUZW1wbGF0ZSBjYW4gY3JlYXRlLCAtMSBmb3IgdW5saW1pdGVkLiIsCiAgICAgICJ0eXBlIjogImludGVnZXIiLAogICAgICAibWluaW11bSI6IC0xLAogICAgICAiZGVmYXVsdCI6IC0xCiAgICB9LAogICAgImNvbmZpZyI6IHsKICAgICAgInR5cGUiOiAib2JqZWN0IiwKICAgICAgInJlcXVpcmVkIjogWwogICAgICAgICJyZXRlbnRpb24iLAogICAgICAgICJtYXhfY29uc3VtZXJzIiwKICAgICAgICAibWF4X21zZ3MiLAogICAgICAgICJtYXhfYnl0ZXMiLAogICAgICAgICJtYXhfYWdlIiwKICAgICAgICAic3RvcmFnZSIsCiAgICAgICAgIm51bV9yZXBsaWNhcyIKICAgICAgXSwKICAgICAgImFkZGl0aW9uYWxQcm9wZXJ0aWVzIjogZmFsc2UsCiAgICAgICJwcm9wZXJ0aWVzIjogewogICAgICAgICJuYW1lIjogewogICAgICAgICAgImRlc2NyaXB0aW9uIjogIkEgdW5pcXVlIG5hbWUgZm9yIHRoZSBTdHJlYW0sIGVtcHR5IGZvciBTdHJlYW0gVGVtcGxhdGVzLiIsCiAgICAgICAgICAidHlwZSI6ICJzdHJpbmciLAogICAgICAgICAgInBhdHRlcm4iOiAiXlteLio+XSokIiwKICAgICAgICAgICJtaW5MZW5ndGgiOiAwCiAgICAgICAgfSwKICAgICAgICAic3ViamVjdHMiOiB7CiAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiQSBsaXN0IG9mIHN1YmplY3RzIHRvIGNvbnN1bWUsIHN1cHBvcnRzIHdpbGRjYXJkcy4gTXVzdCBiZSBlbXB0eSB3aGVuIGEgbWlycm9yIGlzIGNvbmZpZ3VyZWQuIiwKICAgICAgICAgICJ0eXBlIjogImFycmF5IiwKICAgICAgICAgICJtaW5MZW5ndGgiOiAwLAogICAgICAgICAgIml0ZW1zIjogewogICAgICAgICAgICAidHlwZSI6ICJzdHJpbmciCiAgICAgICAgICB9CiAgICAgICAgfSwKICAgICAgICAicmV0ZW50aW9uIjogewogICAgICAgICAgImRlc2NyaXB0aW9uIjogIkhvdyBtZXNzYWdlcyBhcmUgcmV0YWluZWQgaW4gdGhlIFN0cmVhbSwgb25jZSB0aGlzIGlzIGV4Y2VlZGVkIG9sZCBtZXNzYWdlcyBhcmUgcmVtb3ZlZC4iLAogICAgICAgICAgInR5cGUiOiAic3RyaW5nIiwKICAgICAgICAgICJlbnVtIjogWwogICAgICAgICAgICAibGltaXRzIiwKICAgICAgICAgICAgImludGVyZXN0IiwKICAgICAgICAgICAgIndvcmtxdWV1ZSIKICAgICAgICAgIF0sCiAgICAgICAgICAiZGVmYXVsdCI6ICJsaW1pdHMiCiAgICAgICAgfSwKICAgICAgICAibWF4X2NvbnN1bWVycyI6IHsKICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJIb3cgbWFueSBDb25zdW1lcnMgY2FuIGJlIGRlZmluZWQgZm9yIGEgZ2l2ZW4gU3RyZWFtLiAtMSBmb3IgdW5saW1pdGVkLiIsCiAgICAgICAgICAidHlwZSI6ICJpbnRlZ2VyIiwKICAgICAgICAgICJtaW5pbXVtIjogLTEsCiAgICAgICAgICAiZGVmYXVsdCI6IC0xCiAgICAgICAgfSwKICAgICAgICAibWF4X21zZ3MiOiB7CiAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiSG93IG1hbnkgbWVzc2FnZXMgbWF5IGJlIGluIGEgU3RyZWFtLCBvbGRlc3QgbWVzc2FnZXMgd2lsbCBiZSByZW1vdmVkIGlmIHRoZSBTdHJlYW0gZXhjZWVkcyB0aGlzIHNpemUuIC0xIGZvciB1bmxpbWl0ZWQuIiwKICAgICAgICAgICJ0eXBlIjogImludGVnZXIiLAogICAgICAgICAgIm1pbmltdW0iOiAtMSwKICAgICAgICAgICJkZWZhdWx0IjogLTEKICAgICAgICB9LAogICAgICAgICJtYXhfYnl0ZXMiOiB7CiAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiSG93IGJpZyB0aGUgU3RyZWFtIG1heSBiZSwgd2hlbiB0aGUgY29tYmluZWQgc3RyZWFtIHNpemUgZXhjZWVkcyB0aGlzIG9sZCBtZXNzYWdlcyBhcmUgcmVtb3ZlZC4gLTEgZm9yIHVubGltaXRlZC4iLAogICAgICAgICAgInR5cGUiOiAiaW50ZWdlciIsCiAgICAgICAgICAibWluaW11bSI6IC0xLAogICAgICAgICAgImRlZmF1bHQiOiAtMQogICAgICAgIH0sCiAgICAgICAgIm1heF9hZ2UiOiB7CiAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiTWF4aW11bSBhZ2Ugb2YgYW55IG1lc3NhZ2UgaW4gdGhlIHN0cmVhbSwgZXhwcmVzc2VkIGluIG1pY3Jvc2Vjb25kcy4gMCBmb3IgdW5saW1pdGVkLiIsCiAgICAgICAgICAidHlwZSI6ICJpbnRlZ2VyIiwKICAgICAgICAgICJtaW5pbXVtIjogMCwKICAgICAgICAgICJkZWZhdWx0IjogMAogICAgICAgIH0sCiAgICAgICAgIm1heF9tc2dfc2l6ZSI6IHsKICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJUaGUgbGFyZ2VzdCBtZXNzYWdlIHRoYXQgd2lsbCBiZSBhY2NlcHRlZCBieSB0aGUgU3RyZWFtLiAtMSBmb3IgdW5saW1pdGVkLiIsCiAgICAgICAgICAidHlwZSI6ICJpbnRlZ2VyIiwKICAgICAgICAgICJtaW5pbXVtIjogLTEsCiAgICAgICAgICAiZGVmYXVsdCI6IC0xCiAgICAgICAgfSwKICAgICAgICAic3RvcmFnZSI6IHsKICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJUaGUgc3RvcmFnZSBiYWNrZW5kIHRvIHVzZSBmb3IgdGhlIFN0cmVhbS4iLAogICAgICAgICAgInR5cGUiOiAic3RyaW5nIiwKICAgICAgICAgICJlbnVtIjogWwogICAgICAgICAgICAiZmlsZSIsCiAgICAgICAgICAgICJtZW1vcnkiCiAgICAgICAgICBdLAogICAgICAgICAgImRlZmF1bHQiOiAiZmlsZSIKICAgICAgICB9LAogICAgICAgICJudW1fcmVwbGljYXMiOiB7CiAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiSG93IG1hbnkgcmVwbGljYXMgdG8ga2VlcCBmb3IgZWFjaCBtZXNzYWdlLiIsCiAgICAgICAgICAidHlwZSI6ICJpbnRlZ2VyIiwKICAgICAgICAgICJtaW5pbXVtIjogMSwKICAgICAgICAgICJkZWZhdWx0IjogMSwKICAgICAgICAgICJtYXhpbXVtIjogNQogICAgICAgIH0sCiAgICAgICAgIm5vX2FjayI6IHsKICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJEaXNhYmxlcyBhY2tub3dsZWRnaW5nIG1lc3NhZ2VzIHRoYXQgYXJlIHJlY2VpdmVkIGJ5IHRoZSBTdHJlYW0uIiwKICAgICAgICAgICJ0eXBlIjogImJvb2xlYW4iLAogICAgICAgICAgImRlZmF1bHQiOiBmYWxzZQogICAgICAgIH0sCiAgICAgICAgInRlbXBsYXRlX293bmVyIjogewogICAgICAgICAgImRlc2NyaXB0aW9uIjogIldoZW4gdGhlIFN0cmVhbSBpcyBtYW5hZ2VkIGJ5IGEgU3RyZWFtIFRlbXBsYXRlIHRoaXMgaWRlbnRpZmllcyB0aGUgdGVtcGxhdGUgdGhhdCBtYW5hZ2VzIHRoZSBTdHJlYW0uIiwKICAgICAgICAgICJ0eXBlIjogInN0cmluZyIKICAgICAgICB9LAogICAgICAgICJkaXNjYXJkIjogewogICAgICAgICAgImRlc2NyaXB0aW9uIjogIldoZW4gYSBTdHJlYW0gcmVhY2ggaXQncyBsaW1pdHMgZWl0aGVyIG9sZCBtZXNzYWdlcyBhcmUgZGVsZXRlZCBvciBuZXcgb25lcyBhcmUgZGVuaWVkIiwKICAgICAgICAgICJ0eXBlIjogInN0cmluZyIsCiAgICAgICAgICAiZW51bSI6IFsKICAgICAgICAgICAgIm9sZCIsCiAgICAgICAgICAgICJuZXciCiAgICAgICAgICBdLAogICAgICAgICAgImRlZmF1bHQiOiAib2xkIgogICAgICAgIH0sCiAgICAgICAgImR1cGxpY2F0ZV93aW5kb3ciOiB7CiAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiVGhlIHRpbWUgd2luZG93IHRvIHRyYWNrIGR1cGxpY2F0ZSBtZXNzYWdlcyBmb3IsIGV4cHJlc3NlZCBpbiBtaWNyb3NlY29uZHMuIDAgZm9yIGRlZmF1bHQiLAogICAgICAgICAgInR5cGUiOiAiaW50ZWdlciIsCiAgICAgICAgICAibWluaW11bSI6IDAsCiAgICAgICAgICAiZGVmYXVsdCI6IDAKICAgICAgICB9LAogICAgICAgICJwbGFjZW1lbnQiOiB7CiAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiUGxhY2VtZW50IGRpcmVjdGl2ZXMgdG8gY29uc2lkZXIgd2hlbiBwbGFjaW5nIHJlcGxpY2FzIG9mIHRoaXMgc3RyZWFtLCByYW5kb20gcGxhY2VtZW50IHdoZW4gdW5zZXQiLAogICAgICAgICAgInR5cGUiOiAib2JqZWN0IiwKICAgICAgICAgICJyZXF1aXJlZCI6IFsKICAgICAgICAgICAgImNsdXN0ZXIiCiAgICAgICAgICBdLAogICAgICAgICAgInByb3BlcnRpZXMiOiB7CiAgICAgICAgICAgICJjbHVzdGVyIjogewogICAgICAgICAgICAgICJ0eXBlIjogInN0cmluZyIsCiAgICAgICAgICAgICAgImRlc2NyaXB0aW9uIjogIlRoZSBkZXNpcmVkIGNsdXN0ZXIgbmFtZSB0byBwbGFjZSB0aGUgc3RyZWFtIiwKICAgICAgICAgICAgICAibWluTGVuZ3RoIjogMQogICAgICAgICAgICB9LAogICAgICAgICAgICAidGFncyI6IHsKICAgICAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiVGFncyByZXF1aXJlZCBvbiBzZXJ2ZXJzIGhvc3RpbmcgdGhpcyBzdHJlYW0iLAogICAgICAgICAgICAgICJ0eXBlIjogImFycmF5IiwKICAgICAgICAgICAgICAiaXRlbXMiOiB7CiAgICAgICAgICAgICAgICAidHlwZSI6ICJzdHJpbmciCiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfSwKICAgICAgICAibWlycm9yIjogewogICAgICAgICAgImRlc2NyaXB0aW9uIjogIk1haW50YWlucyBhIDE6MSBtaXJyb3Igb2YgYW5vdGhlciBzdHJlYW0gd2l0aCBuYW1lIG1hdGNoaW5nIHRoaXMgcHJvcGVydHkuICBXaGVuIGEgbWlycm9yIGlzIGNvbmZpZ3VyZWQgc3ViamVjdHMgYW5kIHNvdXJjZXMgbXVzdCBiZSBlbXB0eS4iLAogICAgICAgICAgInR5cGUiOiAib2JqZWN0IiwKICAgICAgICAgICJyZXF1aXJlZCI6IFsKICAgICAgICAgICAgIm5hbWUiCiAgICAgICAgICBdLAogICAgICAgICAgInByb3BlcnRpZXMiOiB7CiAgICAgICAgICAgICJuYW1lIjogewogICAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJTdHJlYW0gbmFtZSIsCiAgICAgICAgICAgICAgInR5cGUiOiAic3RyaW5nIiwKICAgICAgICAgICAgICAicGF0dGVybiI6ICJeW14uKj5dKyQiLAogICAgICAgICAgICAgICJtaW5MZW5ndGgiOiAxCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJvcHRfc3RhcnRfc2VxIjogewogICAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJTZXF1ZW5jZSB0byBzdGFydCByZXBsaWNhdGluZyBmcm9tIiwKICAgICAgICAgICAgICAidHlwZSI6ICJpbnRlZ2VyIiwKICAgICAgICAgICAgICAibWluaW11bSI6IDAKICAgICAgICAgICAgfSwKICAgICAgICAgICAgIm9wdF9zdGFydF90aW1lIjogewogICAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJUaW1lIHN0YW1wIHRvIHN0YXJ0IHJlcGxpY2F0aW5nIGZyb20iLAogICAgICAgICAgICAgICJ0eXBlIjogInN0cmluZyIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgImZpbHRlcl9zdWJqZWN0IjogewogICAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJSZXBsaWNhdGUgb25seSBhIHN1YnNldCBvZiBtZXNzYWdlcyBiYXNlZCBvbiBmaWx0ZXIiLAogICAgICAgICAgICAgICJ0eXBlIjogInN0cmluZyIKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0sCiAgICAgICAgInNvdXJjZXMiOiB7CiAgICAgICAgICAidHlwZSI6ICJhcnJheSIsCiAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiTGlzdCBvZiBTdHJlYW0gbmFtZXMgdG8gcmVwbGljYXRlIGludG8gdGhpcyBTdHJlYW0iLAogICAgICAgICAgIml0ZW1zIjogewogICAgICAgICAgICAidHlwZSI6ICJvYmplY3QiLAogICAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiRGVmaW5lcyBhIHNvdXJjZSB3aGVyZSBzdHJlYW1zIHNob3VsZCBiZSByZXBsaWNhdGVkIGZyb20iLAogICAgICAgICAgICAicmVxdWlyZWQiOiBbCiAgICAgICAgICAgICAgIm5hbWUiCiAgICAgICAgICAgIF0sCiAgICAgICAgICAgICJwcm9wZXJ0aWVzIjogewogICAgICAgICAgICAgICJuYW1lIjogewogICAgICAgICAgICAgICAgImRlc2NyaXB0aW9uIjogIlN0cmVhbSBuYW1lIiwKICAgICAgICAgICAgICAgICJ0eXBlIjogInN0cmluZyIsCiAgICAgICAgICAgICAgICAicGF0dGVybiI6ICJeW14uKj5dKyQiLAogICAgICAgICAgICAgICAgIm1pbkxlbmd0aCI6IDEKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICJvcHRfc3RhcnRfc2VxIjogewogICAgICAgICAgICAgICAgImRlc2NyaXB0aW9uIjogIlNlcXVlbmNlIHRvIHN0YXJ0IHJlcGxpY2F0aW5nIGZyb20iLAogICAgICAgICAgICAgICAgInR5cGUiOiAiaW50ZWdlciIsCiAgICAgICAgICAgICAgICAibWluaW11bSI6IDAKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICJvcHRfc3RhcnRfdGltZSI6IHsKICAgICAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJUaW1lIHN0YW1wIHRvIHN0YXJ0IHJlcGxpY2F0aW5nIGZyb20iLAogICAgICAgICAgICAgICAgInR5cGUiOiAic3RyaW5nIgogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgImZpbHRlcl9zdWJqZWN0IjogewogICAgICAgICAgICAgICAgImRlc2NyaXB0aW9uIjogIlJlcGxpY2F0ZSBvbmx5IGEgc3Vic2V0IG9mIG1lc3NhZ2VzIGJhc2VkIG9uIGZpbHRlciIsCiAgICAgICAgICAgICAgICAidHlwZSI6ICJzdHJpbmciCiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9CiAgICB9CiAgfQp9Cg==")
	schemas["io.nats.jetstream.api.v1.account_info_response"], _ = base64.StdEncoding.DecodeString("ewogICIkc2NoZW1hIjogImh0dHA6Ly9qc29uLXNjaGVtYS5vcmcvZHJhZnQtMDcvc2NoZW1hIyIsCiAgIiRpZCI6ICJodHRwczovL25hdHMuaW8vc2NoZW1hcy9qZXRzdHJlYW0vYXBpL3YxL2FjY291bnRfaW5mb19yZXNwb25zZS5qc29uIiwKICAiZGVzY3JpcHRpb24iOiAiQSByZXNwb25zZSBmcm9tIHRoZSBKZXRTdHJlYW0gJEpTLkFQSS5JTkZPIEFQSSIsCiAgInRpdGxlIjogImlvLm5hdHMuamV0c3RyZWFtLmFwaS52MS5hY2NvdW50X2luZm9fcmVzcG9uc2UiLAogICJ0eXBlIjogIm9iamVjdCIsCiAgInJlcXVpcmVkIjogWwogICAgInR5cGUiCiAgXSwKICAib25lT2YiOiBbCiAgICB7CiAgICAgICJ0eXBlIjogIm9iamVjdCIsCiAgICAgICJyZXF1aXJlZCI6IFsKICAgICAgICAibWVtb3J5IiwKICAgICAgICAic3RvcmFnZSIsCiAgICAgICAgInN0cmVhbXMiLAogICAgICAgICJsaW1pdHMiLAogICAgICAgICJhcGkiLAogICAgICAgICJjb25zdW1lcnMiCiAgICAgIF0sCiAgICAgICJwcm9wZXJ0aWVzIjogewogICAgICAgICJtZW1vcnkiOiB7CiAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiTWVtb3J5IFN0b3JhZ2UgYmVpbmcgdXNlZCBmb3IgU3RyZWFtIE1lc3NhZ2Ugc3RvcmFnZSIsCiAgICAgICAgICAidHlwZSI6ICJpbnRlZ2VyIiwKICAgICAgICAgICJtaW5pbXVtIjogMAogICAgICAgIH0sCiAgICAgICAgInN0b3JhZ2UiOiB7CiAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiRmlsZSBTdG9yYWdlIGJlaW5nIHVzZWQgZm9yIFN0cmVhbSBNZXNzYWdlIHN0b3JhZ2UiLAogICAgICAgICAgInR5cGUiOiAiaW50ZWdlciIsCiAgICAgICAgICAibWluaW11bSI6IDAKICAgICAgICB9LAogICAgICAgICJzdHJlYW1zIjogewogICAgICAgICAgImRlc2NyaXB0aW9uIjogIk51bWJlciBvZiBhY3RpdmUgU3RyZWFtcyIsCiAgICAgICAgICAidHlwZSI6ICJpbnRlZ2VyIiwKICAgICAgICAgICJtaW5pbXVtIjogMAogICAgICAgIH0sCiAgICAgICAgImNvbnN1bWVycyI6IHsKICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJOdW1iZXIgb2YgYWN0aXZlIENvbnN1bWVycyIsCiAgICAgICAgICAidHlwZSI6ICJpbnRlZ2VyIiwKICAgICAgICAgICJtaW5pbXVtIjogMAogICAgICAgIH0sCiAgICAgICAgImxpbWl0cyI6IHsKICAgICAgICAgICJ0eXBlIjogIm9iamVjdCIsCiAgICAgICAgICAiYWRkaXRpb25hbFByb3BlcnRpZXMiOiBmYWxzZSwKICAgICAgICAgICJyZXF1aXJlZCI6IFsKICAgICAgICAgICAgIm1heF9jb25zdW1lcnMiLAogICAgICAgICAgICAibWF4X21lbW9yeSIsCiAgICAgICAgICAgICJtYXhfc3RvcmFnZSIsCiAgICAgICAgICAgICJtYXhfc3RyZWFtcyIKICAgICAgICAgIF0sCiAgICAgICAgICAicHJvcGVydGllcyI6IHsKICAgICAgICAgICAgIm1heF9tZW1vcnkiOiB7CiAgICAgICAgICAgICAgInR5cGUiOiAiaW50ZWdlciIsCiAgICAgICAgICAgICAgImRlc2NyaXB0aW9uIjogIlRoZSBtYXhpbXVtIGFtb3VudCBvZiBNZW1vcnkgc3RvcmFnZSBTdHJlYW0gTWVzc2FnZXMgbWF5IGNvbnN1bWUiLAogICAgICAgICAgICAgICJtaW5pbXVtIjogLTEKICAgICAgICAgICAgfSwKICAgICAgICAgICAgIm1heF9zdG9yYWdlIjogewogICAgICAgICAgICAgICJ0eXBlIjogImludGVnZXIiLAogICAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJUaGUgbWF4aW11bSBhbW91bnQgb2YgRmlsZSBzdG9yYWdlIFN0cmVhbSBNZXNzYWdlcyBtYXkgY29uc3VtZSIsCiAgICAgICAgICAgICAgIm1pbmltdW0iOiAtMQogICAgICAgICAgICB9LAogICAgICAgICAgICAibWF4X3N0cmVhbXMiOiB7CiAgICAgICAgICAgICAgInR5cGUiOiAiaW50ZWdlciIsCiAgICAgICAgICAgICAgImRlc2NyaXB0aW9uIjogIlRoZSBtYXhpbXVtIG51bWJlciBvZiBTdHJlYW1zIGFuIGFjY291bnQgY2FuIGNyZWF0ZSIsCiAgICAgICAgICAgICAgIm1pbmltdW0iOiAtMQogICAgICAgICAgICB9LAogICAgICAgICAgICAibWF4X2NvbnN1bWVycyI6IHsKICAgICAgICAgICAgICAidHlwZSI6ICJpbnRlZ2VyIiwKICAgICAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiVGhlIG1heGltdW0gbnVtYmVyIG9mIENvbnN1bWVyIGFuIGFjY291bnQgY2FuIGNyZWF0ZSIsCiAgICAgICAgICAgICAgIm1pbmltdW0iOiAtMQogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfSwKICAgICAgICAiYXBpIjogewogICAgICAgICAgInR5cGUiOiAib2JqZWN0IiwKICAgICAgICAgICJyZXF1aXJlZCI6IFsKICAgICAgICAgICAgInRvdGFsIiwKICAgICAgICAgICAgImVycm9ycyIKICAgICAgICAgIF0sCiAgICAgICAgICAicHJvcGVydGllcyI6IHsKICAgICAgICAgICAgInRvdGFsIjogewogICAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJUb3RhbCBudW1iZXIgb2YgQVBJIHJlcXVlc3RzIHJlY2VpdmVkIGZvciB0aGlzIGFjY291bnQiLAogICAgICAgICAgICAgICJtaW5pbXVtIjogMCwKICAgICAgICAgICAgICAidHlwZSI6ICJpbnRlZ2VyIgogICAgICAgICAgICB9LAogICAgICAgICAgICAiZXJyb3JzIjogewogICAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJBUEkgcmVxdWVzdHMgdGhhdCByZXN1bHRlZCBpbiBhbiBlcnJvciByZXNwb25zZSIsCiAgICAgICAgICAgICAgIm1pbmltdW0iOiAwLAogICAgICAgICAgICAgICJ0eXBlIjogImludGVnZXIiCiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0KICAgIH0sCiAgICB7CiAgICAgICJ0eXBlIjogIm9iamVjdCIsCiAgICAgICJyZXF1aXJlZCI6IFsKICAgICAgICAiZXJyb3IiCiAgICAgIF0sCiAgICAgICJwcm9wZXJ0aWVzIjogewogICAgICAgICJlcnJvciI6IHsKICAgICAgICAgICJ0eXBlIjogIm9iamVjdCIsCiAgICAgICAgICAicmVxdWlyZWQiOiBbCiAgICAgICAgICAgICJjb2RlIgogICAgICAgICAgXSwKICAgICAgICAgICJwcm9wZXJ0aWVzIjogewogICAgICAgICAgICAiY29kZSI6IHsKICAgICAgICAgICAgICAidHlwZSI6ICJpbnRlZ2VyIiwKICAgICAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiSFRUUCBsaWtlIGVycm9yIGNvZGUgaW4gdGhlIDMwMCB0byA1MDAgcmFuZ2UiLAogICAgICAgICAgICAgICJtaW5pbXVtIjogMzAwLAogICAgICAgICAgICAgICJtYXhpbXVtIjogNjk5CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6IHsKICAgICAgICAgICAgICAidHlwZSI6ICJzdHJpbmciLAogICAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJBIGh1bWFuIGZyaWVuZGx5IGRlc2NyaXB0aW9uIG9mIHRoZSBlcnJvciIKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfQogICAgfQogIF0sCiAgInByb3BlcnRpZXMiOiB7CiAgICAidHlwZSI6IHsKICAgICAgInR5cGUiOiAic3RyaW5nIiwKICAgICAgImNvbnN0IjogImlvLm5hdHMuamV0c3RyZWFtLmFwaS52MS5hY2NvdW50X2luZm9fcmVzcG9uc2UiCiAgICB9CiAgfQp9Cg==")
	schemas["io.nats.jetstream.api.v1.consumer_create_request"], _ = base64.StdEncoding.DecodeString("ewogICIkc2NoZW1hIjogImh0dHA6Ly9qc29uLXNjaGVtYS5vcmcvZHJhZnQtMDcvc2NoZW1hIyIsCiAgIiRpZCI6ICJodHRwczovL25hdHMuaW8vc2NoZW1hcy9qZXRzdHJlYW0vYXBpL3YxL2NvbnN1bWVyX2NyZWF0ZV9yZXF1ZXN0Lmpzb24iLAogICJkZXNjcmlwdGlvbiI6ICJBIHJlcXVlc3QgdG8gdGhlIEpldFN0cmVhbSAkSlMuQVBJLkNPTlNVTUVSLkNSRUFURSBhbmQgJEpTLkFQSS5DT05TVU1FUi5EVVJBQkxFLkNSRUFURSBBUElzIiwKICAidGl0bGUiOiAiaW8ubmF0cy5qZXRzdHJlYW0uYXBpLnYxLmNvbnN1bWVyX2NyZWF0ZV9yZXF1ZXN0IiwKICAidHlwZSI6ICJvYmplY3QiLAogICJyZXF1aXJlZCI6IFsKICAgICJzdHJlYW1fbmFtZSIsCiAgICAiY29uZmlnIgogIF0sCiAgInByb3BlcnRpZXMiOiB7CiAgICAic3RyZWFtX25hbWUiOiB7CiAgICAgICJ0eXBlIjogInN0cmluZyIsCiAgICAgICJkZXNjcmlwdGlvbiI6ICJUaGUgbmFtZSBvZiB0aGUgc3RyZWFtIHRvIGNyZWF0ZSB0aGUgY29uc3VtZXIgaW4iCiAgICB9LAogICAgImNvbmZpZyI6IHsKICAgICAgInR5cGUiOiAib2JqZWN0IiwKICAgICAgImRlc2NyaXB0aW9uIjogIlRoZSBjb25zdW1lciBjb25maWd1cmF0aW9uIiwKICAgICAgInJlcXVpcmVkIjogWwogICAgICAgICJkZWxpdmVyX3BvbGljeSIsCiAgICAgICAgImFja19wb2xpY3kiLAogICAgICAgICJyZXBsYXlfcG9saWN5IgogICAgICBdLAogICAgICAiYWxsT2YiOiBbCiAgICAgICAgewogICAgICAgICAgIm9uZU9mIjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgInJlcXVpcmVkIjogWwogICAgICAgICAgICAgICAgImRlbGl2ZXJfcG9saWN5IgogICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgInByb3BlcnRpZXMiOiB7CiAgICAgICAgICAgICAgICAiZGVsaXZlcl9wb2xpY3kiOiB7CiAgICAgICAgICAgICAgICAgICJ0eXBlIjogInN0cmluZyIsCiAgICAgICAgICAgICAgICAgICJlbnVtIjogWwogICAgICAgICAgICAgICAgICAgICJhbGwiCiAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAicmVxdWlyZWQiOiBbCiAgICAgICAgICAgICAgICAiZGVsaXZlcl9wb2xpY3kiCiAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAicHJvcGVydGllcyI6IHsKICAgICAgICAgICAgICAgICJkZWxpdmVyX3BvbGljeSI6IHsKICAgICAgICAgICAgICAgICAgInR5cGUiOiAic3RyaW5nIiwKICAgICAgICAgICAgICAgICAgImVudW0iOiBbCiAgICAgICAgICAgICAgICAgICAgImxhc3QiCiAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAicmVxdWlyZWQiOiBbCiAgICAgICAgICAgICAgICAiZGVsaXZlcl9wb2xpY3kiCiAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAicHJvcGVydGllcyI6IHsKICAgICAgICAgICAgICAgICJkZWxpdmVyX3BvbGljeSI6IHsKICAgICAgICAgICAgICAgICAgInR5cGUiOiAic3RyaW5nIiwKICAgICAgICAgICAgICAgICAgImVudW0iOiBbCiAgICAgICAgICAgICAgICAgICAgIm5ldyIKICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgewogICAgICAgICAgICAgICJyZXF1aXJlZCI6IFsKICAgICAgICAgICAgICAgICJkZWxpdmVyX3BvbGljeSIsCiAgICAgICAgICAgICAgICAib3B0X3N0YXJ0X3NlcSIKICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICJwcm9wZXJ0aWVzIjogewogICAgICAgICAgICAgICAgImRlbGl2ZXJfcG9saWN5IjogewogICAgICAgICAgICAgICAgICAidHlwZSI6ICJzdHJpbmciLAogICAgICAgICAgICAgICAgICAiZW51bSI6IFsKICAgICAgICAgICAgICAgICAgICAiYnlfc3RhcnRfc2VxdWVuY2UiCiAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAib3B0X3N0YXJ0X3NlcSI6IHsKICAgICAgICAgICAgICAgICAgInR5cGUiOiAiaW50ZWdlciIsCiAgICAgICAgICAgICAgICAgICJtaW5pbXVtIjogMAogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgewogICAgICAgICAgICAgICJyZXF1aXJlZCI6IFsKICAgICAgICAgICAgICAgICJkZWxpdmVyX3BvbGljeSIsCiAgICAgICAgICAgICAgICAib3B0X3N0YXJ0X3RpbWUiCiAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAicHJvcGVydGllcyI6IHsKICAgICAgICAgICAgICAgICJkZWxpdmVyX3BvbGljeSI6IHsKICAgICAgICAgICAgICAgICAgInR5cGUiOiAic3RyaW5nIiwKICAgICAgICAgICAgICAgICAgImVudW0iOiBbCiAgICAgICAgICAgICAgICAgICAgImJ5X3N0YXJ0X3RpbWUiCiAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAib3B0X3N0YXJ0X3RpbWUiOiB7CiAgICAgICAgICAgICAgICAgICJ0eXBlIjogInN0cmluZyIKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgIF0KICAgICAgICB9CiAgICAgIF0sCiAgICAgICJwcm9wZXJ0aWVzIjogewogICAgICAgICJkdXJhYmxlX25hbWUiOiB7CiAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiQSB1bmlxdWUgbmFtZSBmb3IgYSBkdXJhYmxlIGNvbnN1bWVyIiwKICAgICAgICAgICJ0eXBlIjogInN0cmluZyIsCiAgICAgICAgICAicGF0dGVybiI6ICJeW14uKj5dKyQiLAogICAgICAgICAgIm1pbkxlbmd0aCI6IDEKICAgICAgICB9LAogICAgICAgICJkZWxpdmVyX3N1YmplY3QiOiB7CiAgICAgICAgICAidHlwZSI6ICJzdHJpbmciLAogICAgICAgICAgIm1pbkxlbmd0aCI6IDEKICAgICAgICB9LAogICAgICAgICJhY2tfcG9saWN5IjogewogICAgICAgICAgInR5cGUiOiAic3RyaW5nIiwKICAgICAgICAgICJlbnVtIjogWwogICAgICAgICAgICAibm9uZSIsCiAgICAgICAgICAgICJhbGwiLAogICAgICAgICAgICAiZXhwbGljaXQiCiAgICAgICAgICBdCiAgICAgICAgfSwKICAgICAgICAiYWNrX3dhaXQiOiB7CiAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiSG93IGxvbmcgKGluIG5hbm9zZWNvbmRzKSB0byBhbGxvdyBtZXNzYWdlcyB0byByZW1haW4gdW4tYWNrbm93bGVkZ2VkIGJlZm9yZSBhdHRlbXB0aW5nIHJlZGVsaXZlcnkiLAogICAgICAgICAgInR5cGUiOiAiaW50ZWdlciIsCiAgICAgICAgICAibWluaW11bSI6IDEKICAgICAgICB9LAogICAgICAgICJtYXhfZGVsaXZlciI6IHsKICAgICAgICAgICJ0eXBlIjogImludGVnZXIiCiAgICAgICAgfSwKICAgICAgICAiZmlsdGVyX3N1YmplY3QiOiB7CiAgICAgICAgICAidHlwZSI6ICJzdHJpbmciCiAgICAgICAgfSwKICAgICAgICAicmVwbGF5X3BvbGljeSI6IHsKICAgICAgICAgICJ0eXBlIjogInN0cmluZyIsCiAgICAgICAgICAiZW51bSI6IFsKICAgICAgICAgICAgImluc3RhbnQiLAogICAgICAgICAgICAib3JpZ2luYWwiCiAgICAgICAgICBdCiAgICAgICAgfSwKICAgICAgICAic2FtcGxlX2ZyZXEiOiB7CiAgICAgICAgICAidHlwZSI6ICJzdHJpbmciCiAgICAgICAgfSwKICAgICAgICAicmF0ZV9saW1pdF9icHMiOiB7CiAgICAgICAgICAidHlwZSI6ICJpbnRlZ2VyIiwKICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJUaGUgcmF0ZSBhdCB3aGljaCBtZXNzYWdlcyB3aWxsIGJlIGRlbGl2ZXJlZCB0byBjbGllbnRzLCBleHByZXNzZWQgaW4gYml0IHBlciBzZWNvbmQiLAogICAgICAgICAgIm1pbmltdW0iOiAwCiAgICAgICAgfSwKICAgICAgICAibWF4X2Fja19wZW5kaW5nIjogewogICAgICAgICAgInR5cGUiOiAiaW50ZWdlciIsCiAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiVGhlIG1heGltdW0gbnVtYmVyIG9mIG1lc3NhZ2VzIHdpdGhvdXQgYWNrbm93bGVkZ2VtZW50IHRoYXQgY2FuIGJlIG91dHN0YW5kaW5nLCBvbmNlIHRoaXMgbGltaXQgaXMgcmVhY2hlZCBtZXNzYWdlIGRlbGl2ZXJ5IHdpbGwgYmUgc3VzcGVuZGVkIgogICAgICAgIH0KICAgICAgfQogICAgfQogIH0KfQo=")
	schemas["io.nats.jetstream.api.v1.consumer_create_response"], _ = base64.StdEncoding.DecodeString("")
	schemas["io.nats.jetstream.api.v1.consumer_delete_response"], _ = base64.StdEncoding.DecodeString("ewogICIkc2NoZW1hIjogImh0dHA6Ly9qc29uLXNjaGVtYS5vcmcvZHJhZnQtMDcvc2NoZW1hIyIsCiAgIiRpZCI6ICJodHRwczovL25hdHMuaW8vc2NoZW1hcy9qZXRzdHJlYW0vYXBpL3YxL2NvbnN1bWVyX2RlbGV0ZV9yZXNwb25zZS5qc29uIiwKICAiZGVzY3JpcHRpb24iOiAiQSByZXNwb25zZSBmcm9tIHRoZSBKZXRTdHJlYW0gJEpTLkFQSS5DT05TVU1FUi5ERUxFVEUgQVBJIiwKICAidGl0bGUiOiAiaW8ubmF0cy5qZXRzdHJlYW0uYXBpLnYxLmNvbnN1bWVyX2RlbGV0ZV9yZXNwb25zZSIsCiAgInR5cGUiOiAib2JqZWN0IiwKICAicmVxdWlyZWQiOiBbCiAgICAidHlwZSIKICBdLAogICJvbmVPZiI6IFsKICAgIHsKICAgICAgInR5cGUiOiAib2JqZWN0IiwKICAgICAgInJlcXVpcmVkIjogWwogICAgICAgICJlcnJvciIKICAgICAgXSwKICAgICAgInByb3BlcnRpZXMiOiB7CiAgICAgICAgImVycm9yIjogewogICAgICAgICAgInR5cGUiOiAib2JqZWN0IiwKICAgICAgICAgICJyZXF1aXJlZCI6IFsKICAgICAgICAgICAgImNvZGUiCiAgICAgICAgICBdLAogICAgICAgICAgInByb3BlcnRpZXMiOiB7CiAgICAgICAgICAgICJjb2RlIjogewogICAgICAgICAgICAgICJ0eXBlIjogImludGVnZXIiLAogICAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJIVFRQIGxpa2UgZXJyb3IgY29kZSBpbiB0aGUgMzAwIHRvIDUwMCByYW5nZSIsCiAgICAgICAgICAgICAgIm1pbmltdW0iOiAzMDAsCiAgICAgICAgICAgICAgIm1heGltdW0iOiA2OTkKICAgICAgICAgICAgfSwKICAgICAgICAgICAgImRlc2NyaXB0aW9uIjogewogICAgICAgICAgICAgICJ0eXBlIjogInN0cmluZyIsCiAgICAgICAgICAgICAgImRlc2NyaXB0aW9uIjogIkEgaHVtYW4gZnJpZW5kbHkgZGVzY3JpcHRpb24gb2YgdGhlIGVycm9yIgogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9CiAgICB9LAogICAgewogICAgICAidHlwZSI6ICJvYmplY3QiLAogICAgICAicmVxdWlyZWQiOiBbCiAgICAgICAgInN1Y2Nlc3MiCiAgICAgIF0sCiAgICAgICJwcm9wZXJ0aWVzIjogewogICAgICAgICJzdWNjZXNzIjogewogICAgICAgICAgInR5cGUiOiAiYm9vbGVhbiIKICAgICAgICB9CiAgICAgIH0KICAgIH0KICBdLAogICJwcm9wZXJ0aWVzIjogewogICAgInR5cGUiOiB7CiAgICAgICJ0eXBlIjogInN0cmluZyIsCiAgICAgICJjb25zdCI6ICJpby5uYXRzLmpldHN0cmVhbS5hcGkudjEuY29uc3VtZXJfZGVsZXRlX3Jlc3BvbnNlIgogICAgfQogIH0KfQo=")
	schemas["io.nats.jetstream.api.v1.consumer_info_response"], _ = base64.StdEncoding.DecodeString("")
	schemas["io.nats.jetstream.api.v1.consumer_list_request"], _ = base64.StdEncoding.DecodeString("ewogICIkc2NoZW1hIjogImh0dHA6Ly9qc29uLXNjaGVtYS5vcmcvZHJhZnQtMDcvc2NoZW1hIyIsCiAgIiRpZCI6ICJodHRwczovL25hdHMuaW8vc2NoZW1hcy9qZXRzdHJlYW0vYXBpL3YxL2NvbnN1bWVyX2xpc3RfcmVxdWVzdC5qc29uIiwKICAiZGVzY3JpcHRpb24iOiAiQSByZXF1ZXN0IHRvIHRoZSBKZXRTdHJlYW0gJEpTLkFQSS5DT05TVU1FUi5MSVNUIEFQSSIsCiAgInRpdGxlIjogImlvLm5hdHMuamV0c3RyZWFtLmFwaS52MS5jb25zdW1lcl9saXN0X3JlcXVlc3QiLAogICJ0eXBlIjogIm9iamVjdCIsCiAgImFsbE9mIjogWwogICAgewogICAgICAidHlwZSI6ICJvYmplY3QiLAogICAgICAiYWRkaXRpb25hbFByb3BlcnRpZXMiOiBmYWxzZSwKICAgICAgInJlcXVpcmVkIjogWwogICAgICAgICJvZmZzZXQiCiAgICAgIF0sCiAgICAgICJwcm9wZXJ0aWVzIjogewogICAgICAgICJvZmZzZXQiOiB7CiAgICAgICAgICAidHlwZSI6ICJpbnRlZ2VyIiwKICAgICAgICAgICJtaW5pbXVtIjogMAogICAgICAgIH0KICAgICAgfQogICAgfQogIF0KfQo=")
	schemas["io.nats.jetstream.api.v1.consumer_list_response"], _ = base64.StdEncoding.DecodeString("ewogICIkc2NoZW1hIjogImh0dHA6Ly9qc29uLXNjaGVtYS5vcmcvZHJhZnQtMDcvc2NoZW1hIyIsCiAgIiRpZCI6ICJodHRwczovL25hdHMuaW8vc2NoZW1hcy9qZXRzdHJlYW0vYXBpL3YxL2NvbnN1bWVyX2xpc3RfcmVzcG9uc2UuanNvbiIsCiAgImRlc2NyaXB0aW9uIjogIkEgcmVzcG9uc2UgZnJvbSB0aGUgSmV0U3RyZWFtICRKUy5BUEkuQ09OU1VNRVIuTElTVCBBUEkiLAogICJ0aXRsZSI6ICJpby5uYXRzLmpldHN0cmVhbS5hcGkudjEuY29uc3VtZXJfbGlzdF9yZXNwb25zZSIsCiAgInR5cGUiOiAib2JqZWN0IiwKICAicmVxdWlyZWQiOiBbCiAgICAidHlwZSIKICBdLAogICJhbGxPZiI6IFsKICAgIHsKICAgICAgInR5cGUiOiAib2JqZWN0IiwKICAgICAgInJlcXVpcmVkIjogWwogICAgICAgICJ0b3RhbCIsCiAgICAgICAgIm9mZnNldCIsCiAgICAgICAgImxpbWl0IgogICAgICBdLAogICAgICAicHJvcGVydGllcyI6IHsKICAgICAgICAidG90YWwiOiB7CiAgICAgICAgICAidHlwZSI6ICJpbnRlZ2VyIiwKICAgICAgICAgICJtaW5pbXVtIjogMAogICAgICAgIH0sCiAgICAgICAgIm9mZnNldCI6IHsKICAgICAgICAgICJ0eXBlIjogImludGVnZXIiLAogICAgICAgICAgIm1pbmltdW0iOiAwCiAgICAgICAgfSwKICAgICAgICAibGltaXQiOiB7CiAgICAgICAgICAidHlwZSI6ICJpbnRlZ2VyIiwKICAgICAgICAgICJtaW5pbXVtIjogMAogICAgICAgIH0KICAgICAgfQogICAgfQogIF0sCiAgIm9uZU9mIjogWwogICAgewogICAgICAidHlwZSI6ICJvYmplY3QiLAogICAgICAicmVxdWlyZWQiOiBbCiAgICAgICAgImVycm9yIgogICAgICBdLAogICAgICAicHJvcGVydGllcyI6IHsKICAgICAgICAiZXJyb3IiOiB7CiAgICAgICAgICAidHlwZSI6ICJvYmplY3QiLAogICAgICAgICAgInJlcXVpcmVkIjogWwogICAgICAgICAgICAiY29kZSIKICAgICAgICAgIF0sCiAgICAgICAgICAicHJvcGVydGllcyI6IHsKICAgICAgICAgICAgImNvZGUiOiB7CiAgICAgICAgICAgICAgInR5cGUiOiAiaW50ZWdlciIsCiAgICAgICAgICAgICAgImRlc2NyaXB0aW9uIjogIkhUVFAgbGlrZSBlcnJvciBjb2RlIGluIHRoZSAzMDAgdG8gNTAwIHJhbmdlIiwKICAgICAgICAgICAgICAibWluaW11bSI6IDMwMCwKICAgICAgICAgICAgICAibWF4aW11bSI6IDY5OQogICAgICAgICAgICB9LAogICAgICAgICAgICAiZGVzY3JpcHRpb24iOiB7CiAgICAgICAgICAgICAgInR5cGUiOiAic3RyaW5nIiwKICAgICAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiQSBodW1hbiBmcmllbmRseSBkZXNjcmlwdGlvbiBvZiB0aGUgZXJyb3IiCiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0KICAgIH0sCiAgICB7CiAgICAgICJ0eXBlIjogIm9iamVjdCIsCiAgICAgICJyZXF1aXJlZCI6IFsKICAgICAgICAiY29uc3VtZXJzIgogICAgICBdLAogICAgICAicHJvcGVydGllcyI6IHsKICAgICAgICAiY29uc3VtZXIiOiB7CiAgICAgICAgICAicmVxdWlyZWQiOiBbCiAgICAgICAgICAgICJzdHJlYW1fbmFtZSIsCiAgICAgICAgICAgICJuYW1lIiwKICAgICAgICAgICAgImNvbmZpZyIsCiAgICAgICAgICAgICJjcmVhdGVkIiwKICAgICAgICAgICAgImRlbGl2ZXJlZCIsCiAgICAgICAgICAgICJhY2tfZmxvb3IiLAogICAgICAgICAgICAibnVtX2Fja19wZW5kaW5nIiwKICAgICAgICAgICAgIm51bV9yZWRlbGl2ZXJlZCIsCiAgICAgICAgICAgICJudW1fd2FpdGluZyIsCiAgICAgICAgICAgICJudW1fcGVuZGluZyIKICAgICAgICAgIF0sCiAgICAgICAgICAidHlwZSI6ICJvYmplY3QiLAogICAgICAgICAgInByb3BlcnRpZXMiOiB7CiAgICAgICAgICAgICJzdHJlYW1fbmFtZSI6IHsKICAgICAgICAgICAgICAidHlwZSI6ICJzdHJpbmciLAogICAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJUaGUgU3RyZWFtIHRoZSBjb25zdW1lciBiZWxvbmdzIHRvIgogICAgICAgICAgICB9LAogICAgICAgICAgICAibmFtZSI6IHsKICAgICAgICAgICAgICAidHlwZSI6ICJzdHJpbmciLAogICAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJBIHVuaXF1ZSBuYW1lIGZvciB0aGUgY29uc3VtZXIsIGVpdGhlciBtYWNoaW5lIGdlbmVyYXRlZCBvciB0aGUgZHVyYWJsZSBuYW1lIgogICAgICAgICAgICB9LAogICAgICAgICAgICAiY29uZmlnIjogewogICAgICAgICAgICAgICJyZXF1aXJlZCI6IFsKICAgICAgICAgICAgICAgICJkZWxpdmVyX3BvbGljeSIsCiAgICAgICAgICAgICAgICAiYWNrX3BvbGljeSIsCiAgICAgICAgICAgICAgICAicmVwbGF5X3BvbGljeSIKICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICJhbGxPZiI6IFsKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgIm9uZU9mIjogWwogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICJyZXF1aXJlZCI6IFsKICAgICAgICAgICAgICAgICAgICAgICAgImRlbGl2ZXJfcG9saWN5IgogICAgICAgICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgICAgICAgICJwcm9wZXJ0aWVzIjogewogICAgICAgICAgICAgICAgICAgICAgICAiZGVsaXZlcl9wb2xpY3kiOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAic3RyaW5nIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAiZW51bSI6IFsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICJhbGwiCiAgICAgICAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAicmVxdWlyZWQiOiBbCiAgICAgICAgICAgICAgICAgICAgICAgICJkZWxpdmVyX3BvbGljeSIKICAgICAgICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICAgICAgICAicHJvcGVydGllcyI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgImRlbGl2ZXJfcG9saWN5IjogewogICAgICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogInN0cmluZyIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgImVudW0iOiBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAibGFzdCIKICAgICAgICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICJyZXF1aXJlZCI6IFsKICAgICAgICAgICAgICAgICAgICAgICAgImRlbGl2ZXJfcG9saWN5IgogICAgICAgICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgICAgICAgICJwcm9wZXJ0aWVzIjogewogICAgICAgICAgICAgICAgICAgICAgICAiZGVsaXZlcl9wb2xpY3kiOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAic3RyaW5nIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAiZW51bSI6IFsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICJuZXciCiAgICAgICAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAicmVxdWlyZWQiOiBbCiAgICAgICAgICAgICAgICAgICAgICAgICJkZWxpdmVyX3BvbGljeSIsCiAgICAgICAgICAgICAgICAgICAgICAgICJvcHRfc3RhcnRfc2VxIgogICAgICAgICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgICAgICAgICJwcm9wZXJ0aWVzIjogewogICAgICAgICAgICAgICAgICAgICAgICAiZGVsaXZlcl9wb2xpY3kiOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAic3RyaW5nIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAiZW51bSI6IFsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICJieV9zdGFydF9zZXF1ZW5jZSIKICAgICAgICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgICJvcHRfc3RhcnRfc2VxIjogewogICAgICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogImludGVnZXIiLAogICAgICAgICAgICAgICAgICAgICAgICAgICJtaW5pbXVtIjogMAogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAicmVxdWlyZWQiOiBbCiAgICAgICAgICAgICAgICAgICAgICAgICJkZWxpdmVyX3BvbGljeSIsCiAgICAgICAgICAgICAgICAgICAgICAgICJvcHRfc3RhcnRfdGltZSIKICAgICAgICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICAgICAgICAicHJvcGVydGllcyI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgImRlbGl2ZXJfcG9saWN5IjogewogICAgICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogInN0cmluZyIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgImVudW0iOiBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAiYnlfc3RhcnRfdGltZSIKICAgICAgICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgICJvcHRfc3RhcnRfdGltZSI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJzdHJpbmciCiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICJwcm9wZXJ0aWVzIjogewogICAgICAgICAgICAgICAgImR1cmFibGVfbmFtZSI6IHsKICAgICAgICAgICAgICAgICAgImRlc2NyaXB0aW9uIjogIkEgdW5pcXVlIG5hbWUgZm9yIGEgZHVyYWJsZSBjb25zdW1lciIsCiAgICAgICAgICAgICAgICAgICJ0eXBlIjogInN0cmluZyIsCiAgICAgICAgICAgICAgICAgICJwYXR0ZXJuIjogIl5bXi4qPl0rJCIsCiAgICAgICAgICAgICAgICAgICJtaW5MZW5ndGgiOiAxCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgImRlbGl2ZXJfc3ViamVjdCI6IHsKICAgICAgICAgICAgICAgICAgInR5cGUiOiAic3RyaW5nIiwKICAgICAgICAgICAgICAgICAgIm1pbkxlbmd0aCI6IDEKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAiYWNrX3BvbGljeSI6IHsKICAgICAgICAgICAgICAgICAgInR5cGUiOiAic3RyaW5nIiwKICAgICAgICAgICAgICAgICAgImVudW0iOiBbCiAgICAgICAgICAgICAgICAgICAgIm5vbmUiLAogICAgICAgICAgICAgICAgICAgICJhbGwiLAogICAgICAgICAgICAgICAgICAgICJleHBsaWNpdCIKICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICJhY2tfd2FpdCI6IHsKICAgICAgICAgICAgICAgICAgImRlc2NyaXB0aW9uIjogIkhvdyBsb25nIChpbiBuYW5vc2Vjb25kcykgdG8gYWxsb3cgbWVzc2FnZXMgdG8gcmVtYWluIHVuLWFja25vd2xlZGdlZCBiZWZvcmUgYXR0ZW1wdGluZyByZWRlbGl2ZXJ5IiwKICAgICAgICAgICAgICAgICAgInR5cGUiOiAiaW50ZWdlciIsCiAgICAgICAgICAgICAgICAgICJtaW5pbXVtIjogMQogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICJtYXhfZGVsaXZlciI6IHsKICAgICAgICAgICAgICAgICAgInR5cGUiOiAiaW50ZWdlciIKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAiZmlsdGVyX3N1YmplY3QiOiB7CiAgICAgICAgICAgICAgICAgICJ0eXBlIjogInN0cmluZyIKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAicmVwbGF5X3BvbGljeSI6IHsKICAgICAgICAgICAgICAgICAgInR5cGUiOiAic3RyaW5nIiwKICAgICAgICAgICAgICAgICAgImVudW0iOiBbCiAgICAgICAgICAgICAgICAgICAgImluc3RhbnQiLAogICAgICAgICAgICAgICAgICAgICJvcmlnaW5hbCIKICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICJzYW1wbGVfZnJlcSI6IHsKICAgICAgICAgICAgICAgICAgInR5cGUiOiAic3RyaW5nIgogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICJyYXRlX2xpbWl0X2JwcyI6IHsKICAgICAgICAgICAgICAgICAgInR5cGUiOiAiaW50ZWdlciIsCiAgICAgICAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJUaGUgcmF0ZSBhdCB3aGljaCBtZXNzYWdlcyB3aWxsIGJlIGRlbGl2ZXJlZCB0byBjbGllbnRzLCBleHByZXNzZWQgaW4gYml0IHBlciBzZWNvbmQiLAogICAgICAgICAgICAgICAgICAibWluaW11bSI6IDAKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAibWF4X2Fja19wZW5kaW5nIjogewogICAgICAgICAgICAgICAgICAidHlwZSI6ICJpbnRlZ2VyIiwKICAgICAgICAgICAgICAgICAgImRlc2NyaXB0aW9uIjogIlRoZSBtYXhpbXVtIG51bWJlciBvZiBtZXNzYWdlcyB3aXRob3V0IGFja25vd2xlZGdlbWVudCB0aGF0IGNhbiBiZSBvdXRzdGFuZGluZywgb25jZSB0aGlzIGxpbWl0IGlzIHJlYWNoZWQgbWVzc2FnZSBkZWxpdmVyeSB3aWxsIGJlIHN1c3BlbmRlZCIKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJjcmVhdGVkIjogewogICAgICAgICAgICAgICJ0eXBlIjogInN0cmluZyIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgImRlbGl2ZXJlZCI6IHsKICAgICAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiVGhlIGxhc3QgbWVzc2FnZSBkZWxpdmVyZWQgZnJvbSB0aGlzIENvbnN1bWVyIiwKICAgICAgICAgICAgICAidHlwZSI6ICJvYmplY3QiLAogICAgICAgICAgICAgICJhZGRpdGlvbmFsUHJvcGVydGllcyI6IGZhbHNlLAogICAgICAgICAgICAgICJyZXF1aXJlZCI6IFsKICAgICAgICAgICAgICAgICJjb25zdW1lcl9zZXEiLAogICAgICAgICAgICAgICAgInN0cmVhbV9zZXEiCiAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAicHJvcGVydGllcyI6IHsKICAgICAgICAgICAgICAgICJjb25zdW1lcl9zZXEiOiB7CiAgICAgICAgICAgICAgICAgICJ0eXBlIjogImludGVnZXIiLAogICAgICAgICAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiVGhlIHNlcXVlbmNlIG51bWJlciBvZiB0aGUgQ29uc3VtZXIiLAogICAgICAgICAgICAgICAgICAibWluaW11bSI6IDAKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAic3RyZWFtX3NlcSI6IHsKICAgICAgICAgICAgICAgICAgInR5cGUiOiAiaW50ZWdlciIsCiAgICAgICAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJUaGUgc2VxdWVuY2UgbnVtYmVyIG9mIHRoZSBTdHJlYW0iLAogICAgICAgICAgICAgICAgICAibWluaW11bSI6IDAKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJhY2tfZmxvb3IiOiB7CiAgICAgICAgICAgICAgImRlc2NyaXB0aW9uIjogIlRoZSBoaWdoZXN0IGNvbnRpZ3VvdXMgYWNrbm93bGVkZ2VkIG1lc3NhZ2UiLAogICAgICAgICAgICAgICJ0eXBlIjogIm9iamVjdCIsCiAgICAgICAgICAgICAgImFkZGl0aW9uYWxQcm9wZXJ0aWVzIjogZmFsc2UsCiAgICAgICAgICAgICAgInJlcXVpcmVkIjogWwogICAgICAgICAgICAgICAgImNvbnN1bWVyX3NlcSIsCiAgICAgICAgICAgICAgICAic3RyZWFtX3NlcSIKICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICJwcm9wZXJ0aWVzIjogewogICAgICAgICAgICAgICAgImNvbnN1bWVyX3NlcSI6IHsKICAgICAgICAgICAgICAgICAgInR5cGUiOiAiaW50ZWdlciIsCiAgICAgICAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJUaGUgc2VxdWVuY2UgbnVtYmVyIG9mIHRoZSBDb25zdW1lciIsCiAgICAgICAgICAgICAgICAgICJtaW5pbXVtIjogMAogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICJzdHJlYW1fc2VxIjogewogICAgICAgICAgICAgICAgICAidHlwZSI6ICJpbnRlZ2VyIiwKICAgICAgICAgICAgICAgICAgImRlc2NyaXB0aW9uIjogIlRoZSBzZXF1ZW5jZSBudW1iZXIgb2YgdGhlIFN0cmVhbSIsCiAgICAgICAgICAgICAgICAgICJtaW5pbXVtIjogMAogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgIm51bV9hY2tfcGVuZGluZyI6IHsKICAgICAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiVGhlIG51bWJlciBvZiBtZXNzYWdlcyBwZW5kaW5nIGFja25vd2xlZGdlbWVudCIsCiAgICAgICAgICAgICAgInR5cGUiOiAiaW50ZWdlciIsCiAgICAgICAgICAgICAgIm1pbmltdW0iOiAwCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJudW1fcmVkZWxpdmVyZWQiOiB7CiAgICAgICAgICAgICAgImRlc2NyaXB0aW9uIjogIlRoZSBudW1iZXIgb2YgcmVkZWxpdmVyaWVzIHRoYXQgaGF2ZSBiZWVuIHBlcmZvcm1lZCIsCiAgICAgICAgICAgICAgInR5cGUiOiAiaW50ZWdlciIsCiAgICAgICAgICAgICAgIm1pbmltdW0iOiAwCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJudW1fd2FpdGluZyI6IHsKICAgICAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiVGhlIG51bWJlciBvZiBwdWxsIGNvbnN1bWVycyB3YWl0aW5nIGZvciBtZXNzYWdlcyIsCiAgICAgICAgICAgICAgInR5cGUiOiAiaW50ZWdlciIsCiAgICAgICAgICAgICAgIm1pbmltdW0iOiAwCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJudW1fcGVuZGluZyI6IHsKICAgICAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiVGhlIG51bWJlciBvZiBtZXNzYWdlcyBsZWZ0IHVuY29uc3VtZWQgaW4gdGhpcyBDb25zdW1lciIsCiAgICAgICAgICAgICAgInR5cGUiOiAiaW50ZWdlciIsCiAgICAgICAgICAgICAgIm1pbmltdW0iOiAwCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJjbHVzdGVyIjogewogICAgICAgICAgICAgICJ0eXBlIjogIm9iamVjdCIsCiAgICAgICAgICAgICAgInByb3BlcnRpZXMiOiB7CiAgICAgICAgICAgICAgICAibmFtZSI6IHsKICAgICAgICAgICAgICAgICAgInR5cGUiOiAic3RyaW5nIiwKICAgICAgICAgICAgICAgICAgImRlc2NyaXB0aW9uIjogIlRoZSBjbHVzdGVyIG5hbWUiCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgImxlYWRlciI6IHsKICAgICAgICAgICAgICAgICAgInR5cGUiOiAic3RyaW5nIiwKICAgICAgICAgICAgICAgICAgImRlc2NyaXB0aW9uIjogIlRoZSBzZXJ2ZXIgbmFtZSBvZiB0aGUgUkFGVCBsZWFkZXIiCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgInJlcGxpY2FzIjogewogICAgICAgICAgICAgICAgICAidHlwZSI6ICJhcnJheSIsCiAgICAgICAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJUaGUgbWVtYmVycyBvZiB0aGUgUkFGVCBjbHVzdGVyIiwKICAgICAgICAgICAgICAgICAgIml0ZW1zIjogewogICAgICAgICAgICAgICAgICAgICJ0eXBlIjogIm9iamVjdCIsCiAgICAgICAgICAgICAgICAgICAgInJlcXVpcmVkIjogWwogICAgICAgICAgICAgICAgICAgICAgIm5hbWUiLAogICAgICAgICAgICAgICAgICAgICAgImN1cnJlbnQiLAogICAgICAgICAgICAgICAgICAgICAgImFjdGl2ZSIKICAgICAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgICAgICJwcm9wZXJ0aWVzIjogewogICAgICAgICAgICAgICAgICAgICAgIm5hbWUiOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJUaGUgc2VydmVyIG5hbWUgb2YgdGhlIHBlZXIiLAogICAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJzdHJpbmciLAogICAgICAgICAgICAgICAgICAgICAgICAibWluaW11bSI6IDEKICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAiY3VycmVudCI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgImRlc2NyaXB0aW9uIjogIkluZGljYXRlcyBpZiB0aGUgc2VydmVyIGlzIHVwIHRvIGRhdGUgYW5kIHN5bmNocm9uaXNlZCIsCiAgICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogImJvb2xlYW4iLAogICAgICAgICAgICAgICAgICAgICAgICAiZGVmYXVsdCI6IGZhbHNlCiAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgImFjdGl2ZSI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgImRlc2NyaXB0aW9uIjogIk5hbm9zZWNvbmRzIHNpbmNlIHRoaXMgcGVlciB3YXMgbGFzdCBzZWVuIiwKICAgICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAibnVtYmVyIgogICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICJvZmZsaW5lIjogewogICAgICAgICAgICAgICAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiSW5kaWNhdGVzIHRoZSBub2RlIGlzIGNvbnNpZGVyZWQgb2ZmbGluZSBieSB0aGUgZ3JvdXAiLAogICAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJib29sZWFuIiwKICAgICAgICAgICAgICAgICAgICAgICAgImRlZmF1bHQiOiBmYWxzZQogICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICJsYWciOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJIb3cgbWFueSB1bmNvbW1pdHRlZCBvcGVyYXRpb25zIHRoaXMgcGVlciBpcyBiZWhpbmQgdGhlIGxlYWRlciIsCiAgICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogImludGVnZXIiLAogICAgICAgICAgICAgICAgICAgICAgICAibWluaW11bSI6IDAKICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0KICAgIH0KICBdLAogICJwcm9wZXJ0aWVzIjogewogICAgInR5cGUiOiB7CiAgICAgICJ0eXBlIjogInN0cmluZyIsCiAgICAgICJjb25zdCI6ICJpby5uYXRzLmpldHN0cmVhbS5hcGkudjEuY29uc3VtZXJfbGlzdF9yZXNwb25zZSIKICAgIH0KICB9Cn0K")
	schemas["io.nats.jetstream.api.v1.consumer_names_request"], _ = base64.StdEncoding.DecodeString("ewogICIkc2NoZW1hIjogImh0dHA6Ly9qc29uLXNjaGVtYS5vcmcvZHJhZnQtMDcvc2NoZW1hIyIsCiAgIiRpZCI6ICJodHRwczovL25hdHMuaW8vc2NoZW1hcy9qZXRzdHJlYW0vYXBpL3YxL2NvbnN1bWVyX25hbWVzX3JlcXVlc3QuanNvbiIsCiAgImRlc2NyaXB0aW9uIjogIkEgcmVxdWVzdCB0byB0aGUgSmV0U3RyZWFtICRKUy5BUEkuQ09OU1VNRVIuTkFNRVMgQVBJIiwKICAidGl0bGUiOiAiaW8ubmF0cy5qZXRzdHJlYW0uYXBpLnYxLmNvbnN1bWVyX25hbWVzX3JlcXVlc3QiLAogICJ0eXBlIjogIm9iamVjdCIsCiAgImFsbE9mIjogWwogICAgewogICAgICAidHlwZSI6ICJvYmplY3QiLAogICAgICAiYWRkaXRpb25hbFByb3BlcnRpZXMiOiBmYWxzZSwKICAgICAgInJlcXVpcmVkIjogWwogICAgICAgICJvZmZzZXQiCiAgICAgIF0sCiAgICAgICJwcm9wZXJ0aWVzIjogewogICAgICAgICJvZmZzZXQiOiB7CiAgICAgICAgICAidHlwZSI6ICJpbnRlZ2VyIiwKICAgICAgICAgICJtaW5pbXVtIjogMAogICAgICAgIH0KICAgICAgfQogICAgfQogIF0sCiAgInByb3BlcnRpZXMiOiB7CiAgICAic3ViamVjdCI6IHsKICAgICAgInR5cGUiOiAic3RyaW5nIiwKICAgICAgImRlc2NyaXB0aW9uIjogIkZpbHRlciB0aGUgbmFtZXMgdG8gdGhvc2UgY29uc3VtaW5nIG1lc3NhZ2VzIG1hdGNoaW5nIHRoaXMgc3ViamVjdCBvciB3aWxkY2FyZCIKICAgIH0KICB9Cn0K")
	schemas["io.nats.jetstream.api.v1.consumer_names_response"], _ = base64.StdEncoding.DecodeString("ewogICIkc2NoZW1hIjogImh0dHA6Ly9qc29uLXNjaGVtYS5vcmcvZHJhZnQtMDcvc2NoZW1hIyIsCiAgIiRpZCI6ICJodHRwczovL25hdHMuaW8vc2NoZW1hcy9qZXRzdHJlYW0vYXBpL3YxL2NvbnN1bWVyX25hbWVzX3Jlc3BvbnNlLmpzb24iLAogICJkZXNjcmlwdGlvbiI6ICJBIHJlc3BvbnNlIGZyb20gdGhlIEpldFN0cmVhbSAkSlMuQVBJLkNPTlNVTUVSLk5BTUVTIEFQSSIsCiAgInRpdGxlIjogImlvLm5hdHMuamV0c3RyZWFtLmFwaS52MS5jb25zdW1lcl9uYW1lc19yZXNwb25zZSIsCiAgInR5cGUiOiAib2JqZWN0IiwKICAicmVxdWlyZWQiOiBbCiAgICAidHlwZSIKICBdLAogICJhbGxPZiI6IFsKICAgIHsKICAgICAgInR5cGUiOiAib2JqZWN0IiwKICAgICAgInJlcXVpcmVkIjogWwogICAgICAgICJ0b3RhbCIsCiAgICAgICAgIm9mZnNldCIsCiAgICAgICAgImxpbWl0IgogICAgICBdLAogICAgICAicHJvcGVydGllcyI6IHsKICAgICAgICAidG90YWwiOiB7CiAgICAgICAgICAidHlwZSI6ICJpbnRlZ2VyIiwKICAgICAgICAgICJtaW5pbXVtIjogMAogICAgICAgIH0sCiAgICAgICAgIm9mZnNldCI6IHsKICAgICAgICAgICJ0eXBlIjogImludGVnZXIiLAogICAgICAgICAgIm1pbmltdW0iOiAwCiAgICAgICAgfSwKICAgICAgICAibGltaXQiOiB7CiAgICAgICAgICAidHlwZSI6ICJpbnRlZ2VyIiwKICAgICAgICAgICJtaW5pbXVtIjogMAogICAgICAgIH0KICAgICAgfQogICAgfQogIF0sCiAgIm9uZU9mIjogWwogICAgewogICAgICAidHlwZSI6ICJvYmplY3QiLAogICAgICAicmVxdWlyZWQiOiBbCiAgICAgICAgImVycm9yIgogICAgICBdLAogICAgICAicHJvcGVydGllcyI6IHsKICAgICAgICAiZXJyb3IiOiB7CiAgICAgICAgICAidHlwZSI6ICJvYmplY3QiLAogICAgICAgICAgInJlcXVpcmVkIjogWwogICAgICAgICAgICAiY29kZSIKICAgICAgICAgIF0sCiAgICAgICAgICAicHJvcGVydGllcyI6IHsKICAgICAgICAgICAgImNvZGUiOiB7CiAgICAgICAgICAgICAgInR5cGUiOiAiaW50ZWdlciIsCiAgICAgICAgICAgICAgImRlc2NyaXB0aW9uIjogIkhUVFAgbGlrZSBlcnJvciBjb2RlIGluIHRoZSAzMDAgdG8gNTAwIHJhbmdlIiwKICAgICAgICAgICAgICAibWluaW11bSI6IDMwMCwKICAgICAgICAgICAgICAibWF4aW11bSI6IDY5OQogICAgICAgICAgICB9LAogICAgICAgICAgICAiZGVzY3JpcHRpb24iOiB7CiAgICAgICAgICAgICAgInR5cGUiOiAic3RyaW5nIiwKICAgICAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiQSBodW1hbiBmcmllbmRseSBkZXNjcmlwdGlvbiBvZiB0aGUgZXJyb3IiCiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0KICAgIH0sCiAgICB7CiAgICAgICJ0eXBlIjogIm9iamVjdCIsCiAgICAgICJyZXF1aXJlZCI6IFsKICAgICAgICAiY29uc3VtZXJzIgogICAgICBdLAogICAgICAicHJvcGVydGllcyI6IHsKICAgICAgICAiY29uc3VtZXJzIjogewogICAgICAgICAgInR5cGUiOiAiYXJyYXkiLAogICAgICAgICAgIml0ZW1zIjogewogICAgICAgICAgICAidHlwZSI6ICJzdHJpbmciCiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9CiAgICB9CiAgXSwKICAicHJvcGVydGllcyI6IHsKICAgICJ0eXBlIjogewogICAgICAidHlwZSI6ICJzdHJpbmciLAogICAgICAiY29uc3QiOiAiaW8ubmF0cy5qZXRzdHJlYW0uYXBpLnYxLmNvbnN1bWVyX25hbWVzX3Jlc3BvbnNlIgogICAgfQogIH0KfQo=")
	schemas["io.nats.jetstream.api.v1.consumer_getnext_request"], _ = base64.StdEncoding.DecodeString("ewogICIkc2NoZW1hIjogImh0dHA6Ly9qc29uLXNjaGVtYS5vcmcvZHJhZnQtMDcvc2NoZW1hIyIsCiAgIiRpZCI6ICJodHRwczovL25hdHMuaW8vc2NoZW1hcy9qZXRzdHJlYW0vYXBpL3YxL2NvbnN1bWVyX2dldG5leHRfcmVxdWVzdC5qc29uIiwKICAiZGVzY3JpcHRpb24iOiAiQSByZXF1ZXN0IHRvIHRoZSBKZXRTdHJlYW0gJEpTLkFQSS5DT05TVU1FUi5NU0cuTkVYVCBBUEkiLAogICJ0aXRsZSI6ICJpby5uYXRzLmpldHN0cmVhbS5hcGkudjEuY29uc3VtZXJfZ2V0bmV4dF9yZXF1ZXN0IiwKICAidHlwZSI6ICJvYmplY3QiLAogICJwcm9wZXJ0aWVzIjogewogICAgImV4cGlyZXMiOiB7CiAgICAgICJ0eXBlIjogInN0cmluZyIsCiAgICAgICJkZXNjcmlwdGlvbiI6ICJBIHRpbWUgd2hlbiB0aGlzIHJlcXVlc3Qgc2hvdWxkIGJlIGV4cGlyZWQgZnJvbSB0aGUgc2VydmVyIHdhaXQgbGlzdCIKICAgIH0sCiAgICAiYmF0Y2giOiB7CiAgICAgICJ0eXBlIjogImludGVnZXIiLAogICAgICAiZGVzY3JpcHRpb24iOiAiSG93IG1hbnkgbWVzc2FnZXMgdGhlIHNlcnZlciBzaG91bGQgZGVsaXZlciB0byB0aGUgcmVxdWVzdG9yIiwKICAgICAgIm1pbmltdW0iOiAwLAogICAgICAibWF4aW11bSI6IDI1NgogICAgfSwKICAgICJub193YWl0IjogewogICAgICAidHlwZSI6ICJib29sZWFuIiwKICAgICAgImRlc2NyaXB0aW9uIjogIldoZW4gdHJ1ZSBhIHJlc3BvbnNlIHdpdGggYSA0MDQgc3RhdHVzIGhlYWRlciB3aWxsIGJlIHJldHVybmVkIHdoZW4gbm8gbWVzc2FnZXMgYXJlIGF2YWlsYWJsZSIKICAgIH0KICB9Cn0K")
	schemas["io.nats.jetstream.api.v1.consumer_leader_stepdown_response"], _ = base64.StdEncoding.DecodeString("ewogICIkc2NoZW1hIjogImh0dHA6Ly9qc29uLXNjaGVtYS5vcmcvZHJhZnQtMDcvc2NoZW1hIyIsCiAgIiRpZCI6ICJodHRwczovL25hdHMuaW8vc2NoZW1hcy9qZXRzdHJlYW0vYXBpL3YxL2NvbnN1bWVyX2xlYWRlcl9zdGVwZG93bl9yZXNwb25zZS5qc29uIiwKICAiZGVzY3JpcHRpb24iOiAiQSByZXNwb25zZSBmcm9tIHRoZSBKZXRTdHJlYW0gJEpTLkFQSS5DT05TVU1FUi5MRUFERVIuU1RFUERPV04gQVBJIiwKICAidGl0bGUiOiAiaW8ubmF0cy5qZXRzdHJlYW0uYXBpLnYxLmNvbnN1bWVyX2xlYWRlcl9zdGVwZG93bl9yZXNwb25zZSIsCiAgInR5cGUiOiAib2JqZWN0IiwKICAib25lT2YiOiBbCiAgICB7CiAgICAgICJ0eXBlIjogIm9iamVjdCIsCiAgICAgICJyZXF1aXJlZCI6IFsKICAgICAgICAiZXJyb3IiCiAgICAgIF0sCiAgICAgICJwcm9wZXJ0aWVzIjogewogICAgICAgICJlcnJvciI6IHsKICAgICAgICAgICJ0eXBlIjogIm9iamVjdCIsCiAgICAgICAgICAicmVxdWlyZWQiOiBbCiAgICAgICAgICAgICJjb2RlIgogICAgICAgICAgXSwKICAgICAgICAgICJwcm9wZXJ0aWVzIjogewogICAgICAgICAgICAiY29kZSI6IHsKICAgICAgICAgICAgICAidHlwZSI6ICJpbnRlZ2VyIiwKICAgICAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiSFRUUCBsaWtlIGVycm9yIGNvZGUgaW4gdGhlIDMwMCB0byA1MDAgcmFuZ2UiLAogICAgICAgICAgICAgICJtaW5pbXVtIjogMzAwLAogICAgICAgICAgICAgICJtYXhpbXVtIjogNjk5CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6IHsKICAgICAgICAgICAgICAidHlwZSI6ICJzdHJpbmciLAogICAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJBIGh1bWFuIGZyaWVuZGx5IGRlc2NyaXB0aW9uIG9mIHRoZSBlcnJvciIKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfQogICAgfSwKICAgIHsKICAgICAgInJlcXVpcmVkIjogWwogICAgICAgICJzdWNjZXNzIgogICAgICBdLAogICAgICAidHlwZSI6ICJvYmplY3QiLAogICAgICAicHJvcGVydGllcyI6IHsKICAgICAgICAic3VjY2VzcyI6IHsKICAgICAgICAgICJ0eXBlIjogImJvb2xlYW4iLAogICAgICAgICAgImRlc2NyaXB0aW9uIjogIklmIHRoZSBsZWFkZXIgc3VjY2Vzc2Z1bGx5IHN0b29kIGRvd24iLAogICAgICAgICAgImRlZmF1bHQiOiBmYWxzZQogICAgICAgIH0KICAgICAgfQogICAgfQogIF0sCiAgInByb3BlcnRpZXMiOiB7CiAgICAidHlwZSI6IHsKICAgICAgInR5cGUiOiAic3RyaW5nIiwKICAgICAgImNvbnN0IjogImlvLm5hdHMuamV0c3RyZWFtLmFwaS52MS5jb25zdW1lcl9sZWFkZXJfc3RlcGRvd25fcmVzcG9uc2UiCiAgICB9CiAgfQp9Cg==")
	schemas["io.nats.jetstream.api.v1.stream_create_request"], _ = base64.StdEncoding.DecodeString("")
	schemas["io.nats.jetstream.api.v1.stream_create_response"], _ = base64.StdEncoding.DecodeString("ewogICIkc2NoZW1hIjogImh0dHA6Ly9qc29uLXNjaGVtYS5vcmcvZHJhZnQtMDcvc2NoZW1hIyIsCiAgIiRpZCI6ICJodHRwczovL25hdHMuaW8vc2NoZW1hcy9qZXRzdHJlYW0vYXBpL3YxL3N0cmVhbV9jcmVhdGVfcmVzcG9uc2UuanNvbiIsCiAgImRlc2NyaXB0aW9uIjogIkEgcmVzcG9uc2UgZnJvbSB0aGUgSmV0U3RyZWFtICRKUy5BUEkuU1RSRUFNLkNSRUFURSBBUEkiLAogICJ0aXRsZSI6ICJpby5uYXRzLmpldHN0cmVhbS5hcGkudjEuc3RyZWFtX2NyZWF0ZV9yZXNwb25zZSIsCiAgInR5cGUiOiAib2JqZWN0IiwKICAicmVxdWlyZWQiOiBbCiAgICAidHlwZSIKICBdLAogICJvbmVPZiI6IFsKICAgIHsKICAgICAgInR5cGUiOiAib2JqZWN0IiwKICAgICAgInJlcXVpcmVkIjogWwogICAgICAgICJjb25maWciLAogICAgICAgICJzdGF0ZSIsCiAgICAgICAgImNyZWF0ZWQiCiAgICAgIF0sCiAgICAgICJwcm9wZXJ0aWVzIjogewogICAgICAgICJjb25maWciOiB7CiAgICAgICAgICAidHlwZSI6ICJvYmplY3QiLAogICAgICAgICAgImRlc2NyaXB0aW9uIjogIlRoZSBhY3RpdmUgY29uZmlndXJhdGlvbiBmb3IgdGhlIFN0cmVhbSIsCiAgICAgICAgICAiYWxsT2YiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAidHlwZSI6ICJvYmplY3QiLAogICAgICAgICAgICAgICJyZXF1aXJlZCI6IFsKICAgICAgICAgICAgICAgICJyZXRlbnRpb24iLAogICAgICAgICAgICAgICAgIm1heF9jb25zdW1lcnMiLAogICAgICAgICAgICAgICAgIm1heF9tc2dzIiwKICAgICAgICAgICAgICAgICJtYXhfYnl0ZXMiLAogICAgICAgICAgICAgICAgIm1heF9hZ2UiLAogICAgICAgICAgICAgICAgInN0b3JhZ2UiLAogICAgICAgICAgICAgICAgIm51bV9yZXBsaWNhcyIKICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICJhZGRpdGlvbmFsUHJvcGVydGllcyI6IGZhbHNlLAogICAgICAgICAgICAgICJwcm9wZXJ0aWVzIjogewogICAgICAgICAgICAgICAgIm5hbWUiOiB7CiAgICAgICAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJBIHVuaXF1ZSBuYW1lIGZvciB0aGUgU3RyZWFtLCBlbXB0eSBmb3IgU3RyZWFtIFRlbXBsYXRlcy4iLAogICAgICAgICAgICAgICAgICAidHlwZSI6ICJzdHJpbmciLAogICAgICAgICAgICAgICAgICAicGF0dGVybiI6ICJeW14uKj5dKiQiLAogICAgICAgICAgICAgICAgICAibWluTGVuZ3RoIjogMAogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICJzdWJqZWN0cyI6IHsKICAgICAgICAgICAgICAgICAgImRlc2NyaXB0aW9uIjogIkEgbGlzdCBvZiBzdWJqZWN0cyB0byBjb25zdW1lLCBzdXBwb3J0cyB3aWxkY2FyZHMuIE11c3QgYmUgZW1wdHkgd2hlbiBhIG1pcnJvciBpcyBjb25maWd1cmVkLiIsCiAgICAgICAgICAgICAgICAgICJ0eXBlIjogImFycmF5IiwKICAgICAgICAgICAgICAgICAgIm1pbkxlbmd0aCI6IDAsCiAgICAgICAgICAgICAgICAgICJpdGVtcyI6IHsKICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJzdHJpbmciCiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAicmV0ZW50aW9uIjogewogICAgICAgICAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiSG93IG1lc3NhZ2VzIGFyZSByZXRhaW5lZCBpbiB0aGUgU3RyZWFtLCBvbmNlIHRoaXMgaXMgZXhjZWVkZWQgb2xkIG1lc3NhZ2VzIGFyZSByZW1vdmVkLiIsCiAgICAgICAgICAgICAgICAgICJ0eXBlIjogInN0cmluZyIsCiAgICAgICAgICAgICAgICAgICJlbnVtIjogWwogICAgICAgICAgICAgICAgICAgICJsaW1pdHMiLAogICAgICAgICAgICAgICAgICAgICJpbnRlcmVzdCIsCiAgICAgICAgICAgICAgICAgICAgIndvcmtxdWV1ZSIKICAgICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgICAgImRlZmF1bHQiOiAibGltaXRzIgogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICJtYXhfY29uc3VtZXJzIjogewogICAgICAgICAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiSG93IG1hbnkgQ29uc3VtZXJzIGNhbiBiZSBkZWZpbmVkIGZvciBhIGdpdmVuIFN0cmVhbS4gLTEgZm9yIHVubGltaXRlZC4iLAogICAgICAgICAgICAgICAgICAidHlwZSI6ICJpbnRlZ2VyIiwKICAgICAgICAgICAgICAgICAgIm1pbmltdW0iOiAtMSwKICAgICAgICAgICAgICAgICAgImRlZmF1bHQiOiAtMQogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICJtYXhfbXNncyI6IHsKICAgICAgICAgICAgICAgICAgImRlc2NyaXB0aW9uIjogIkhvdyBtYW55IG1lc3NhZ2VzIG1heSBiZSBpbiBhIFN0cmVhbSwgb2xkZXN0IG1lc3NhZ2VzIHdpbGwgYmUgcmVtb3ZlZCBpZiB0aGUgU3RyZWFtIGV4Y2VlZHMgdGhpcyBzaXplLiAtMSBmb3IgdW5saW1pdGVkLiIsCiAgICAgICAgICAgICAgICAgICJ0eXBlIjogImludGVnZXIiLAogICAgICAgICAgICAgICAgICAibWluaW11bSI6IC0xLAogICAgICAgICAgICAgICAgICAiZGVmYXVsdCI6IC0xCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgIm1heF9ieXRlcyI6IHsKICAgICAgICAgICAgICAgICAgImRlc2NyaXB0aW9uIjogIkhvdyBiaWcgdGhlIFN0cmVhbSBtYXkgYmUsIHdoZW4gdGhlIGNvbWJpbmVkIHN0cmVhbSBzaXplIGV4Y2VlZHMgdGhpcyBvbGQgbWVzc2FnZXMgYXJlIHJlbW92ZWQuIC0xIGZvciB1bmxpbWl0ZWQuIiwKICAgICAgICAgICAgICAgICAgInR5cGUiOiAiaW50ZWdlciIsCiAgICAgICAgICAgICAgICAgICJtaW5pbXVtIjogLTEsCiAgICAgICAgICAgICAgICAgICJkZWZhdWx0IjogLTEKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAibWF4X2FnZSI6IHsKICAgICAgICAgICAgICAgICAgImRlc2NyaXB0aW9uIjogIk1heGltdW0gYWdlIG9mIGFueSBtZXNzYWdlIGluIHRoZSBzdHJlYW0sIGV4cHJlc3NlZCBpbiBtaWNyb3NlY29uZHMuIDAgZm9yIHVubGltaXRlZC4iLAogICAgICAgICAgICAgICAgICAidHlwZSI6ICJpbnRlZ2VyIiwKICAgICAgICAgICAgICAgICAgIm1pbmltdW0iOiAwLAogICAgICAgICAgICAgICAgICAiZGVmYXVsdCI6IDAKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAibWF4X21zZ19zaXplIjogewogICAgICAgICAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiVGhlIGxhcmdlc3QgbWVzc2FnZSB0aGF0IHdpbGwgYmUgYWNjZXB0ZWQgYnkgdGhlIFN0cmVhbS4gLTEgZm9yIHVubGltaXRlZC4iLAogICAgICAgICAgICAgICAgICAidHlwZSI6ICJpbnRlZ2VyIiwKICAgICAgICAgICAgICAgICAgIm1pbmltdW0iOiAtMSwKICAgICAgICAgICAgICAgICAgImRlZmF1bHQiOiAtMQogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICJzdG9yYWdlIjogewogICAgICAgICAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiVGhlIHN0b3JhZ2UgYmFja2VuZCB0byB1c2UgZm9yIHRoZSBTdHJlYW0uIiwKICAgICAgICAgICAgICAgICAgInR5cGUiOiAic3RyaW5nIiwKICAgICAgICAgICAgICAgICAgImVudW0iOiBbCiAgICAgICAgICAgICAgICAgICAgImZpbGUiLAogICAgICAgICAgICAgICAgICAgICJtZW1vcnkiCiAgICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICAgICJkZWZhdWx0IjogImZpbGUiCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgIm51bV9yZXBsaWNhcyI6IHsKICAgICAgICAgICAgICAgICAgImRlc2NyaXB0aW9uIjogIkhvdyBtYW55IHJlcGxpY2FzIHRvIGtlZXAgZm9yIGVhY2ggbWVzc2FnZS4iLAogICAgICAgICAgICAgICAgICAidHlwZSI6ICJpbnRlZ2VyIiwKICAgICAgICAgICAgICAgICAgIm1pbmltdW0iOiAxLAogICAgICAgICAgICAgICAgICAiZGVmYXVsdCI6IDEsCiAgICAgICAgICAgICAgICAgICJtYXhpbXVtIjogNQogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICJub19hY2siOiB7CiAgICAgICAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJEaXNhYmxlcyBhY2tub3dsZWRnaW5nIG1lc3NhZ2VzIHRoYXQgYXJlIHJlY2VpdmVkIGJ5IHRoZSBTdHJlYW0uIiwKICAgICAgICAgICAgICAgICAgInR5cGUiOiAiYm9vbGVhbiIsCiAgICAgICAgICAgICAgICAgICJkZWZhdWx0IjogZmFsc2UKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAidGVtcGxhdGVfb3duZXIiOiB7CiAgICAgICAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJXaGVuIHRoZSBTdHJlYW0gaXMgbWFuYWdlZCBieSBhIFN0cmVhbSBUZW1wbGF0ZSB0aGlzIGlkZW50aWZpZXMgdGhlIHRlbXBsYXRlIHRoYXQgbWFuYWdlcyB0aGUgU3RyZWFtLiIsCiAgICAgICAgICAgICAgICAgICJ0eXBlIjogInN0cmluZyIKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAiZGlzY2FyZCI6IHsKICAgICAgICAgICAgICAgICAgImRlc2NyaXB0aW9uIjogIldoZW4gYSBTdHJlYW0gcmVhY2ggaXQncyBsaW1pdHMgZWl0aGVyIG9sZCBtZXNzYWdlcyBhcmUgZGVsZXRlZCBvciBuZXcgb25lcyBhcmUgZGVuaWVkIiwKICAgICAgICAgICAgICAgICAgInR5cGUiOiAic3RyaW5nIiwKICAgICAgICAgICAgICAgICAgImVudW0iOiBbCiAgICAgICAgICAgICAgICAgICAgIm9sZCIsCiAgICAgICAgICAgICAgICAgICAgIm5ldyIKICAgICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgICAgImRlZmF1bHQiOiAib2xkIgogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICJkdXBsaWNhdGVfd2luZG93IjogewogICAgICAgICAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiVGhlIHRpbWUgd2luZG93IHRvIHRyYWNrIGR1cGxpY2F0ZSBtZXNzYWdlcyBmb3IsIGV4cHJlc3NlZCBpbiBtaWNyb3NlY29uZHMuIDAgZm9yIGRlZmF1bHQiLAogICAgICAgICAgICAgICAgICAidHlwZSI6ICJpbnRlZ2VyIiwKICAgICAgICAgICAgICAgICAgIm1pbmltdW0iOiAwLAogICAgICAgICAgICAgICAgICAiZGVmYXVsdCI6IDAKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAicGxhY2VtZW50IjogewogICAgICAgICAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiUGxhY2VtZW50IGRpcmVjdGl2ZXMgdG8gY29uc2lkZXIgd2hlbiBwbGFjaW5nIHJlcGxpY2FzIG9mIHRoaXMgc3RyZWFtLCByYW5kb20gcGxhY2VtZW50IHdoZW4gdW5zZXQiLAogICAgICAgICAgICAgICAgICAidHlwZSI6ICJvYmplY3QiLAogICAgICAgICAgICAgICAgICAicmVxdWlyZWQiOiBbCiAgICAgICAgICAgICAgICAgICAgImNsdXN0ZXIiCiAgICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICAgICJwcm9wZXJ0aWVzIjogewogICAgICAgICAgICAgICAgICAgICJjbHVzdGVyIjogewogICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAic3RyaW5nIiwKICAgICAgICAgICAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJUaGUgZGVzaXJlZCBjbHVzdGVyIG5hbWUgdG8gcGxhY2UgdGhlIHN0cmVhbSIsCiAgICAgICAgICAgICAgICAgICAgICAibWluTGVuZ3RoIjogMQogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgInRhZ3MiOiB7CiAgICAgICAgICAgICAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiVGFncyByZXF1aXJlZCBvbiBzZXJ2ZXJzIGhvc3RpbmcgdGhpcyBzdHJlYW0iLAogICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAiYXJyYXkiLAogICAgICAgICAgICAgICAgICAgICAgIml0ZW1zIjogewogICAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJzdHJpbmciCiAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgIm1pcnJvciI6IHsKICAgICAgICAgICAgICAgICAgImRlc2NyaXB0aW9uIjogIk1haW50YWlucyBhIDE6MSBtaXJyb3Igb2YgYW5vdGhlciBzdHJlYW0gd2l0aCBuYW1lIG1hdGNoaW5nIHRoaXMgcHJvcGVydHkuICBXaGVuIGEgbWlycm9yIGlzIGNvbmZpZ3VyZWQgc3ViamVjdHMgYW5kIHNvdXJjZXMgbXVzdCBiZSBlbXB0eS4iLAogICAgICAgICAgICAgICAgICAidHlwZSI6ICJvYmplY3QiLAogICAgICAgICAgICAgICAgICAicmVxdWlyZWQiOiBbCiAgICAgICAgICAgICAgICAgICAgIm5hbWUiCiAgICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICAgICJwcm9wZXJ0aWVzIjogewogICAgICAgICAgICAgICAgICAgICJuYW1lIjogewogICAgICAgICAgICAgICAgICAgICAgImRlc2NyaXB0aW9uIjogIlN0cmVhbSBuYW1lIiwKICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogInN0cmluZyIsCiAgICAgICAgICAgICAgICAgICAgICAicGF0dGVybiI6ICJeW14uKj5dKyQiLAogICAgICAgICAgICAgICAgICAgICAgIm1pbkxlbmd0aCI6IDEKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICJvcHRfc3RhcnRfc2VxIjogewogICAgICAgICAgICAgICAgICAgICAgImRlc2NyaXB0aW9uIjogIlNlcXVlbmNlIHRvIHN0YXJ0IHJlcGxpY2F0aW5nIGZyb20iLAogICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAiaW50ZWdlciIsCiAgICAgICAgICAgICAgICAgICAgICAibWluaW11bSI6IDAKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICJvcHRfc3RhcnRfdGltZSI6IHsKICAgICAgICAgICAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJUaW1lIHN0YW1wIHRvIHN0YXJ0IHJlcGxpY2F0aW5nIGZyb20iLAogICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAic3RyaW5nIgogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgImZpbHRlcl9zdWJqZWN0IjogewogICAgICAgICAgICAgICAgICAgICAgImRlc2NyaXB0aW9uIjogIlJlcGxpY2F0ZSBvbmx5IGEgc3Vic2V0IG9mIG1lc3NhZ2VzIGJhc2VkIG9uIGZpbHRlciIsCiAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJzdHJpbmciCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgInNvdXJjZXMiOiB7CiAgICAgICAgICAgICAgICAgICJ0eXBlIjogImFycmF5IiwKICAgICAgICAgICAgICAgICAgImRlc2NyaXB0aW9uIjogIkxpc3Qgb2YgU3RyZWFtIG5hbWVzIHRvIHJlcGxpY2F0ZSBpbnRvIHRoaXMgU3RyZWFtIiwKICAgICAgICAgICAgICAgICAgIml0ZW1zIjogewogICAgICAgICAgICAgICAgICAgICJ0eXBlIjogIm9iamVjdCIsCiAgICAgICAgICAgICAgICAgICAgImRlc2NyaXB0aW9uIjogIkRlZmluZXMgYSBzb3VyY2Ugd2hlcmUgc3RyZWFtcyBzaG91bGQgYmUgcmVwbGljYXRlZCBmcm9tIiwKICAgICAgICAgICAgICAgICAgICAicmVxdWlyZWQiOiBbCiAgICAgICAgICAgICAgICAgICAgICAibmFtZSIKICAgICAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgICAgICJwcm9wZXJ0aWVzIjogewogICAgICAgICAgICAgICAgICAgICAgIm5hbWUiOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJTdHJlYW0gbmFtZSIsCiAgICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogInN0cmluZyIsCiAgICAgICAgICAgICAgICAgICAgICAgICJwYXR0ZXJuIjogIl5bXi4qPl0rJCIsCiAgICAgICAgICAgICAgICAgICAgICAgICJtaW5MZW5ndGgiOiAxCiAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgIm9wdF9zdGFydF9zZXEiOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJTZXF1ZW5jZSB0byBzdGFydCByZXBsaWNhdGluZyBmcm9tIiwKICAgICAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAiaW50ZWdlciIsCiAgICAgICAgICAgICAgICAgICAgICAgICJtaW5pbXVtIjogMAogICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICJvcHRfc3RhcnRfdGltZSI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgImRlc2NyaXB0aW9uIjogIlRpbWUgc3RhbXAgdG8gc3RhcnQgcmVwbGljYXRpbmcgZnJvbSIsCiAgICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogInN0cmluZyIKICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAiZmlsdGVyX3N1YmplY3QiOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJSZXBsaWNhdGUgb25seSBhIHN1YnNldCBvZiBtZXNzYWdlcyBiYXNlZCBvbiBmaWx0ZXIiLAogICAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJzdHJpbmciCiAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICBdCiAgICAgICAgfSwKICAgICAgICAic3RhdGUiOiB7CiAgICAgICAgICAidHlwZSI6ICJvYmplY3QiLAogICAgICAgICAgImRlc2NyaXB0aW9uIjogIkRldGFpbCBhYm91dCB0aGUgY3VycmVudCBTdGF0ZSBvZiB0aGUgU3RyZWFtIiwKICAgICAgICAgICJhbGxPZiI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICJ0eXBlIjogIm9iamVjdCIsCiAgICAgICAgICAgICAgImFkZGl0aW9uYWxQcm9wZXJ0aWVzIjogZmFsc2UsCiAgICAgICAgICAgICAgInJlcXVpcmVkIjogWwogICAgICAgICAgICAgICAgIm1lc3NhZ2VzIiwKICAgICAgICAgICAgICAgICJieXRlcyIsCiAgICAgICAgICAgICAgICAiZmlyc3Rfc2VxIiwKICAgICAgICAgICAgICAgICJsYXN0X3NlcSIsCiAgICAgICAgICAgICAgICAiY29uc3VtZXJfY291bnQiCiAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAicHJvcGVydGllcyI6IHsKICAgICAgICAgICAgICAgICJtZXNzYWdlcyI6IHsKICAgICAgICAgICAgICAgICAgInR5cGUiOiAiaW50ZWdlciIsCiAgICAgICAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJOdW1iZXIgb2YgbWVzc2FnZXMgc3RvcmVkIGluIHRoZSBTdHJlYW0iLAogICAgICAgICAgICAgICAgICAibWluaW11bSI6IDAKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAiYnl0ZXMiOiB7CiAgICAgICAgICAgICAgICAgICJ0eXBlIjogImludGVnZXIiLAogICAgICAgICAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiQ29tYmluZWQgc2l6ZSBvZiBhbGwgbWVzc2FnZXMgaW4gdGhlIFN0cmVhbSIsCiAgICAgICAgICAgICAgICAgICJtaW5pbXVtIjogMAogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICJmaXJzdF9zZXEiOiB7CiAgICAgICAgICAgICAgICAgICJ0eXBlIjogImludGVnZXIiLAogICAgICAgICAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiU2VxdWVuY2UgbnVtYmVyIG9mIHRoZSBmaXJzdCBtZXNzYWdlIGluIHRoZSBTdHJlYW0iLAogICAgICAgICAgICAgICAgICAibWluaW11bSI6IDAKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAiZmlyc3RfdHMiOiB7CiAgICAgICAgICAgICAgICAgICJ0eXBlIjogInN0cmluZyIsCiAgICAgICAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJUaGUgdGltZXN0YW1wIG9mIHRoZSBmaXJzdCBtZXNzYWdlIGluIHRoZSBTdHJlYW0iCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgImxhc3Rfc2VxIjogewogICAgICAgICAgICAgICAgICAidHlwZSI6ICJpbnRlZ2VyIiwKICAgICAgICAgICAgICAgICAgImRlc2NyaXB0aW9uIjogIlNlcXVlbmNlIG51bWJlciBvZiB0aGUgbGFzdCBtZXNzYWdlIGluIHRoZSBTdHJlYW0iLAogICAgICAgICAgICAgICAgICAibWluaW11bSI6IDAKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAibGFzdF90cyI6IHsKICAgICAgICAgICAgICAgICAgInR5cGUiOiAic3RyaW5nIiwKICAgICAgICAgICAgICAgICAgImRlc2NyaXB0aW9uIjogIlRoZSB0aW1lc3RhbXAgb2YgdGhlIGxhc3QgbWVzc2FnZSBpbiB0aGUgU3RyZWFtIgogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICJkZWxldGVkIjogewogICAgICAgICAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiSURzIG9mIG1lc3NhZ2VzIHRoYXQgd2VyZSBkZWxldGVkIHVzaW5nIHRoZSBNZXNzYWdlIERlbGV0ZSBBUEkiLAogICAgICAgICAgICAgICAgICAidHlwZSI6ICJhcnJheSIsCiAgICAgICAgICAgICAgICAgICJtaW5MZW5ndGgiOiAwLAogICAgICAgICAgICAgICAgICAiaXRlbXMiOiB7CiAgICAgICAgICAgICAgICAgICAgInR5cGUiOiAiaW50ZWdlciIsCiAgICAgICAgICAgICAgICAgICAgIm1pbmltdW0iOiAwCiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAibG9zdCI6IHsKICAgICAgICAgICAgICAgICAgInR5cGUiOiAib2JqZWN0IiwKICAgICAgICAgICAgICAgICAgImRlc2NyaXB0aW9uIjogIlJlY29yZHMgbWVzc2FnZXMgdGhhdCB3ZXJlIGRhbWFnZWQgYW5kIHVucmVjb3ZlcmFibGUiLAogICAgICAgICAgICAgICAgICAicHJvcGVydGllcyI6IHsKICAgICAgICAgICAgICAgICAgICAibXNncyI6IHsKICAgICAgICAgICAgICAgICAgICAgICJ0eXBlIjogImludGVnZXIiLAogICAgICAgICAgICAgICAgICAgICAgImRlc2NyaXB0aW9uIjogIlRoZSBudW1iZXIgb2YgbWVzc2FnZXMgdGhhdCB3ZXJlIGxvc3QiCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAiYnl0ZXMiOiB7CiAgICAgICAgICAgICAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiVGhlIG51bWJlciBvZiBieXRlcyB0aGF0IHdlcmUgbG9zdCIsCiAgICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJpbnRlZ2VyIgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICJjb25zdW1lcl9jb3VudCI6IHsKICAgICAgICAgICAgICAgICAgInR5cGUiOiAiaW50ZWdlciIsCiAgICAgICAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJOdW1iZXIgb2YgQ29uc3VtZXJzIGF0dGFjaGVkIHRvIHRoZSBTdHJlYW0iLAogICAgICAgICAgICAgICAgICAibWluaW11bSI6IDAKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgICJjcmVhdGVkIjogewogICAgICAgICAgImRlc2NyaXB0aW9uIjogIlRpbWVzdGFtcCB3aGVuIHRoZSBzdHJlYW0gd2FzIGNyZWF0ZWQiLAogICAgICAgICAgInR5cGUiOiAic3RyaW5nIgogICAgICAgIH0sCiAgICAgICAgImNsdXN0ZXIiOiB7CiAgICAgICAgICAidHlwZSI6ICJvYmplY3QiLAogICAgICAgICAgInByb3BlcnRpZXMiOiB7CiAgICAgICAgICAgICJuYW1lIjogewogICAgICAgICAgICAgICJ0eXBlIjogInN0cmluZyIsCiAgICAgICAgICAgICAgImRlc2NyaXB0aW9uIjogIlRoZSBjbHVzdGVyIG5hbWUiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJsZWFkZXIiOiB7CiAgICAgICAgICAgICAgInR5cGUiOiAic3RyaW5nIiwKICAgICAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiVGhlIHNlcnZlciBuYW1lIG9mIHRoZSBSQUZUIGxlYWRlciIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgInJlcGxpY2FzIjogewogICAgICAgICAgICAgICJ0eXBlIjogImFycmF5IiwKICAgICAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiVGhlIG1lbWJlcnMgb2YgdGhlIFJBRlQgY2x1c3RlciIsCiAgICAgICAgICAgICAgIml0ZW1zIjogewogICAgICAgICAgICAgICAgInR5cGUiOiAib2JqZWN0IiwKICAgICAgICAgICAgICAgICJyZXF1aXJlZCI6IFsKICAgICAgICAgICAgICAgICAgIm5hbWUiLAogICAgICAgICAgICAgICAgICAiY3VycmVudCIsCiAgICAgICAgICAgICAgICAgICJhY3RpdmUiCiAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgInByb3BlcnRpZXMiOiB7CiAgICAgICAgICAgICAgICAgICJuYW1lIjogewogICAgICAgICAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJUaGUgc2VydmVyIG5hbWUgb2YgdGhlIHBlZXIiLAogICAgICAgICAgICAgICAgICAgICJ0eXBlIjogInN0cmluZyIsCiAgICAgICAgICAgICAgICAgICAgIm1pbmltdW0iOiAxCiAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICJjdXJyZW50IjogewogICAgICAgICAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJJbmRpY2F0ZXMgaWYgdGhlIHNlcnZlciBpcyB1cCB0byBkYXRlIGFuZCBzeW5jaHJvbmlzZWQiLAogICAgICAgICAgICAgICAgICAgICJ0eXBlIjogImJvb2xlYW4iLAogICAgICAgICAgICAgICAgICAgICJkZWZhdWx0IjogZmFsc2UKICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgImFjdGl2ZSI6IHsKICAgICAgICAgICAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiTmFub3NlY29uZHMgc2luY2UgdGhpcyBwZWVyIHdhcyBsYXN0IHNlZW4iLAogICAgICAgICAgICAgICAgICAgICJ0eXBlIjogIm51bWJlciIKICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgIm9mZmxpbmUiOiB7CiAgICAgICAgICAgICAgICAgICAgImRlc2NyaXB0aW9uIjogIkluZGljYXRlcyB0aGUgbm9kZSBpcyBjb25zaWRlcmVkIG9mZmxpbmUgYnkgdGhlIGdyb3VwIiwKICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJib29sZWFuIiwKICAgICAgICAgICAgICAgICAgICAiZGVmYXVsdCI6IGZhbHNlCiAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICJsYWciOiB7CiAgICAgICAgICAgICAgICAgICAgImRlc2NyaXB0aW9uIjogIkhvdyBtYW55IHVuY29tbWl0dGVkIG9wZXJhdGlvbnMgdGhpcyBwZWVyIGlzIGJlaGluZCB0aGUgbGVhZGVyIiwKICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJpbnRlZ2VyIiwKICAgICAgICAgICAgICAgICAgICAibWluaW11bSI6IDAKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0sCiAgICAgICAgIm1pcnJvciI6IHsKICAgICAgICAgICJyZXF1aXJlZCI6IFsKICAgICAgICAgICAgIm5hbWUiLAogICAgICAgICAgICAibGFnIiwKICAgICAgICAgICAgImFjdGl2ZSIKICAgICAgICAgIF0sCiAgICAgICAgICAidHlwZSI6ICJvYmplY3QiLAogICAgICAgICAgImRlc2NyaXB0aW9uIjogIkluZm9ybWF0aW9uIGFib3V0IGFuIHVwc3RyZWFtIHN0cmVhbSBzb3VyY2UgaW4gYSBtaXJyb3IiLAogICAgICAgICAgInByb3BlcnRpZXMiOiB7CiAgICAgICAgICAgICJuYW1lIjogewogICAgICAgICAgICAgICJ0eXBlIjogInN0cmluZyIsCiAgICAgICAgICAgICAgImRlc2NyaXB0aW9uIjogIlRoZSBuYW1lIG9mIHRoZSBTdHJlYW0gYmVpbmcgcmVwbGljYXRlZCIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgImxhZyI6IHsKICAgICAgICAgICAgICAidHlwZSI6ICJudW1iZXIiLAogICAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJIb3cgbWFueSBtZXNzYWdlcyBiZWhpbmQgdGhlIG1pcnJvciBvcGVyYXRpb24gaXMiLAogICAgICAgICAgICAgICJtaW5pbXVtIjogMAogICAgICAgICAgICB9LAogICAgICAgICAgICAiYWN0aXZlIjogewogICAgICAgICAgICAgICJ0eXBlIjogIm51bWJlciIsCiAgICAgICAgICAgICAgImRlc2NyaXB0aW9uIjogIldoZW4gbGFzdCB0aGUgbWlycm9yIGhhZCBhY3Rpdml0eSwgaW4gbmFub3NlY29uZHMiLAogICAgICAgICAgICAgICJtaW5pbXVtIjogMAogICAgICAgICAgICB9LAogICAgICAgICAgICAiZXJyb3IiOiB7CiAgICAgICAgICAgICAgInR5cGUiOiAib2JqZWN0IiwKICAgICAgICAgICAgICAicmVxdWlyZWQiOiBbCiAgICAgICAgICAgICAgICAiY29kZSIKICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICJwcm9wZXJ0aWVzIjogewogICAgICAgICAgICAgICAgImNvZGUiOiB7CiAgICAgICAgICAgICAgICAgICJ0eXBlIjogImludGVnZXIiLAogICAgICAgICAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiSFRUUCBsaWtlIGVycm9yIGNvZGUgaW4gdGhlIDMwMCB0byA1MDAgcmFuZ2UiLAogICAgICAgICAgICAgICAgICAibWluaW11bSI6IDMwMCwKICAgICAgICAgICAgICAgICAgIm1heGltdW0iOiA2OTkKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAiZGVzY3JpcHRpb24iOiB7CiAgICAgICAgICAgICAgICAgICJ0eXBlIjogInN0cmluZyIsCiAgICAgICAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJBIGh1bWFuIGZyaWVuZGx5IGRlc2NyaXB0aW9uIG9mIHRoZSBlcnJvciIKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9LAogICAgICAgICJzb3VyY2VzIjogewogICAgICAgICAgInR5cGUiOiAiYXJyYXkiLAogICAgICAgICAgImRlc2NyaXB0aW9uIjogIlN0cmVhbXMgYmVpbmcgc291cmNlZCBpbnRvIHRoaXMgU3RyZWFtIiwKICAgICAgICAgICJpdGVtcyI6IHsKICAgICAgICAgICAgInJlcXVpcmVkIjogWwogICAgICAgICAgICAgICJuYW1lIiwKICAgICAgICAgICAgICAibGFnIiwKICAgICAgICAgICAgICAiYWN0aXZlIgogICAgICAgICAgICBdLAogICAgICAgICAgICAidHlwZSI6ICJvYmplY3QiLAogICAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiSW5mb3JtYXRpb24gYWJvdXQgYW4gdXBzdHJlYW0gc3RyZWFtIHNvdXJjZSBpbiBhIG1pcnJvciIsCiAgICAgICAgICAgICJwcm9wZXJ0aWVzIjogewogICAgICAgICAgICAgICJuYW1lIjogewogICAgICAgICAgICAgICAgInR5cGUiOiAic3RyaW5nIiwKICAgICAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJUaGUgbmFtZSBvZiB0aGUgU3RyZWFtIGJlaW5nIHJlcGxpY2F0ZWQiCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAibGFnIjogewogICAgICAgICAgICAgICAgInR5cGUiOiAibnVtYmVyIiwKICAgICAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJIb3cgbWFueSBtZXNzYWdlcyBiZWhpbmQgdGhlIG1pcnJvciBvcGVyYXRpb24gaXMiLAogICAgICAgICAgICAgICAgIm1pbmltdW0iOiAwCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAiYWN0aXZlIjogewogICAgICAgICAgICAgICAgInR5cGUiOiAibnVtYmVyIiwKICAgICAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJXaGVuIGxhc3QgdGhlIG1pcnJvciBoYWQgYWN0aXZpdHksIGluIG5hbm9zZWNvbmRzIiwKICAgICAgICAgICAgICAgICJtaW5pbXVtIjogMAogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgImVycm9yIjogewogICAgICAgICAgICAgICAgInR5cGUiOiAib2JqZWN0IiwKICAgICAgICAgICAgICAgICJyZXF1aXJlZCI6IFsKICAgICAgICAgICAgICAgICAgImNvZGUiCiAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgInByb3BlcnRpZXMiOiB7CiAgICAgICAgICAgICAgICAgICJjb2RlIjogewogICAgICAgICAgICAgICAgICAgICJ0eXBlIjogImludGVnZXIiLAogICAgICAgICAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJIVFRQIGxpa2UgZXJyb3IgY29kZSBpbiB0aGUgMzAwIHRvIDUwMCByYW5nZSIsCiAgICAgICAgICAgICAgICAgICAgIm1pbmltdW0iOiAzMDAsCiAgICAgICAgICAgICAgICAgICAgIm1heGltdW0iOiA2OTkKICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgImRlc2NyaXB0aW9uIjogewogICAgICAgICAgICAgICAgICAgICJ0eXBlIjogInN0cmluZyIsCiAgICAgICAgICAgICAgICAgICAgImRlc2NyaXB0aW9uIjogIkEgaHVtYW4gZnJpZW5kbHkgZGVzY3JpcHRpb24gb2YgdGhlIGVycm9yIgogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9CiAgICB9LAogICAgewogICAgICAidHlwZSI6ICJvYmplY3QiLAogICAgICAicmVxdWlyZWQiOiBbCiAgICAgICAgImVycm9yIgogICAgICBdLAogICAgICAicHJvcGVydGllcyI6IHsKICAgICAgICAiZXJyb3IiOiB7CiAgICAgICAgICAidHlwZSI6ICJvYmplY3QiLAogICAgICAgICAgInJlcXVpcmVkIjogWwogICAgICAgICAgICAiY29kZSIKICAgICAgICAgIF0sCiAgICAgICAgICAicHJvcGVydGllcyI6IHsKICAgICAgICAgICAgImNvZGUiOiB7CiAgICAgICAgICAgICAgInR5cGUiOiAiaW50ZWdlciIsCiAgICAgICAgICAgICAgImRlc2NyaXB0aW9uIjogIkhUVFAgbGlrZSBlcnJvciBjb2RlIGluIHRoZSAzMDAgdG8gNTAwIHJhbmdlIiwKICAgICAgICAgICAgICAibWluaW11bSI6IDMwMCwKICAgICAgICAgICAgICAibWF4aW11bSI6IDY5OQogICAgICAgICAgICB9LAogICAgICAgICAgICAiZGVzY3JpcHRpb24iOiB7CiAgICAgICAgICAgICAgInR5cGUiOiAic3RyaW5nIiwKICAgICAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiQSBodW1hbiBmcmllbmRseSBkZXNjcmlwdGlvbiBvZiB0aGUgZXJyb3IiCiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0KICAgIH0KICBdLAogICJwcm9wZXJ0aWVzIjogewogICAgInR5cGUiOiB7CiAgICAgICJ0eXBlIjogInN0cmluZyIsCiAgICAgICJjb25zdCI6ICJpby5uYXRzLmpldHN0cmVhbS5hcGkudjEuc3RyZWFtX2NyZWF0ZV9yZXNwb25zZSIKICAgIH0KICB9Cn0K")
	schemas["io.nats.jetstream.api.v1.stream_delete_response"], _ = base64.StdEncoding.DecodeString("ewogICIkc2NoZW1hIjogImh0dHA6Ly9qc29uLXNjaGVtYS5vcmcvZHJhZnQtMDcvc2NoZW1hIyIsCiAgIiRpZCI6ICJodHRwczovL25hdHMuaW8vc2NoZW1hcy9qZXRzdHJlYW0vYXBpL3YxL3N0cmVhbV9kZWxldGVfcmVzcG9uc2UuanNvbiIsCiAgImRlc2NyaXB0aW9uIjogIkEgcmVzcG9uc2UgZnJvbSB0aGUgSmV0U3RyZWFtICRKUy5BUEkuU1RSRUFNLkRFTEVURSBBUEkiLAogICJ0aXRsZSI6ICJpby5uYXRzLmpldHN0cmVhbS5hcGkudjEuc3RyZWFtX2RlbGV0ZV9yZXNwb25zZSIsCiAgInR5cGUiOiAib2JqZWN0IiwKICAicmVxdWlyZWQiOiBbCiAgICAidHlwZSIKICBdLAogICJvbmVPZiI6IFsKICAgIHsKICAgICAgInR5cGUiOiAib2JqZWN0IiwKICAgICAgInJlcXVpcmVkIjogWwogICAgICAgICJlcnJvciIKICAgICAgXSwKICAgICAgInByb3BlcnRpZXMiOiB7CiAgICAgICAgImVycm9yIjogewogICAgICAgICAgInR5cGUiOiAib2JqZWN0IiwKICAgICAgICAgICJyZXF1aXJlZCI6IFsKICAgICAgICAgICAgImNvZGUiCiAgICAgICAgICBdLAogICAgICAgICAgInByb3BlcnRpZXMiOiB7CiAgICAgICAgICAgICJjb2RlIjogewogICAgICAgICAgICAgICJ0eXBlIjogImludGVnZXIiLAogICAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJIVFRQIGxpa2UgZXJyb3IgY29kZSBpbiB0aGUgMzAwIHRvIDUwMCByYW5nZSIsCiAgICAgICAgICAgICAgIm1pbmltdW0iOiAzMDAsCiAgICAgICAgICAgICAgIm1heGltdW0iOiA2OTkKICAgICAgICAgICAgfSwKICAgICAgICAgICAgImRlc2NyaXB0aW9uIjogewogICAgICAgICAgICAgICJ0eXBlIjogInN0cmluZyIsCiAgICAgICAgICAgICAgImRlc2NyaXB0aW9uIjogIkEgaHVtYW4gZnJpZW5kbHkgZGVzY3JpcHRpb24gb2YgdGhlIGVycm9yIgogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9CiAgICB9LAogICAgewogICAgICAicmVxdWlyZWQiOiBbCiAgICAgICAgInN1Y2Nlc3MiCiAgICAgIF0sCiAgICAgICJ0eXBlIjogIm9iamVjdCIsCiAgICAgICJwcm9wZXJ0aWVzIjogewogICAgICAgICJzdWNjZXNzIjogewogICAgICAgICAgInR5cGUiOiAiYm9vbGVhbiIKICAgICAgICB9CiAgICAgIH0KICAgIH0KICBdLAogICJwcm9wZXJ0aWVzIjogewogICAgInR5cGUiOiB7CiAgICAgICJ0eXBlIjogInN0cmluZyIsCiAgICAgICJjb25zdCI6ICJpby5uYXRzLmpldHN0cmVhbS5hcGkudjEuc3RyZWFtX2RlbGV0ZV9yZXNwb25zZSIKICAgIH0KICB9Cn0K")
	schemas["io.nats.jetstream.api.v1.stream_info_response"], _ = base64.StdEncoding.DecodeString("")
	schemas["io.nats.jetstream.api.v1.stream_list_request"], _ = base64.StdEncoding.DecodeString("ewogICIkc2NoZW1hIjogImh0dHA6Ly9qc29uLXNjaGVtYS5vcmcvZHJhZnQtMDcvc2NoZW1hIyIsCiAgIiRpZCI6ICJodHRwczovL25hdHMuaW8vc2NoZW1hcy9qZXRzdHJlYW0vYXBpL3YxL3N0cmVhbV9saXN0X3JlcXVlc3QuanNvbiIsCiAgImRlc2NyaXB0aW9uIjogIkEgcmVxdWVzdCB0byB0aGUgSmV0U3RyZWFtICRKUy5BUEkuU1RSRUFNLkxJU1QgQVBJIiwKICAidGl0bGUiOiAiaW8ubmF0cy5qZXRzdHJlYW0uYXBpLnYxLnN0cmVhbV9saXN0X3JlcXVlc3QiLAogICJ0eXBlIjogIm9iamVjdCIsCiAgImFsbE9mIjogWwogICAgewogICAgICAidHlwZSI6ICJvYmplY3QiLAogICAgICAiYWRkaXRpb25hbFByb3BlcnRpZXMiOiBmYWxzZSwKICAgICAgInJlcXVpcmVkIjogWwogICAgICAgICJvZmZzZXQiCiAgICAgIF0sCiAgICAgICJwcm9wZXJ0aWVzIjogewogICAgICAgICJvZmZzZXQiOiB7CiAgICAgICAgICAidHlwZSI6ICJpbnRlZ2VyIiwKICAgICAgICAgICJtaW5pbXVtIjogMAogICAgICAgIH0KICAgICAgfQogICAgfQogIF0KfQo=")
	schemas["io.nats.jetstream.api.v1.stream_list_response"], _ = base64.StdEncoding.DecodeString("")
	schemas["io.nats.jetstream.api.v1.stream_msg_delete_response"], _ = base64.StdEncoding.DecodeString("ewogICIkc2NoZW1hIjogImh0dHA6Ly9qc29uLXNjaGVtYS5vcmcvZHJhZnQtMDcvc2NoZW1hIyIsCiAgIiRpZCI6ICJodHRwczovL25hdHMuaW8vc2NoZW1hcy9qZXRzdHJlYW0vYXBpL3YxL3N0cmVhbV9tc2dfZGVsZXRlX3Jlc3BvbnNlLmpzb24iLAogICJkZXNjcmlwdGlvbiI6ICJBIHJlc3BvbnNlIGZyb20gdGhlIEpldFN0cmVhbSAkSlMuQVBJLlNUUkVBTS5NU0cuREVMRVRFIEFQSSIsCiAgInRpdGxlIjogImlvLm5hdHMuamV0c3RyZWFtLmFwaS52MS5zdHJlYW1fbXNnX2RlbGV0ZV9yZXNwb25zZSIsCiAgInR5cGUiOiAib2JqZWN0IiwKICAicmVxdWlyZWQiOiBbCiAgICAidHlwZSIKICBdLAogICJvbmVPZiI6IFsKICAgIHsKICAgICAgInR5cGUiOiAib2JqZWN0IiwKICAgICAgInJlcXVpcmVkIjogWwogICAgICAgICJlcnJvciIKICAgICAgXSwKICAgICAgInByb3BlcnRpZXMiOiB7CiAgICAgICAgImVycm9yIjogewogICAgICAgICAgInR5cGUiOiAib2JqZWN0IiwKICAgICAgICAgICJyZXF1aXJlZCI6IFsKICAgICAgICAgICAgImNvZGUiCiAgICAgICAgICBdLAogICAgICAgICAgInByb3BlcnRpZXMiOiB7CiAgICAgICAgICAgICJjb2RlIjogewogICAgICAgICAgICAgICJ0eXBlIjogImludGVnZXIiLAogICAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJIVFRQIGxpa2UgZXJyb3IgY29kZSBpbiB0aGUgMzAwIHRvIDUwMCByYW5nZSIsCiAgICAgICAgICAgICAgIm1pbmltdW0iOiAzMDAsCiAgICAgICAgICAgICAgIm1heGltdW0iOiA2OTkKICAgICAgICAgICAgfSwKICAgICAgICAgICAgImRlc2NyaXB0aW9uIjogewogICAgICAgICAgICAgICJ0eXBlIjogInN0cmluZyIsCiAgICAgICAgICAgICAgImRlc2NyaXB0aW9uIjogIkEgaHVtYW4gZnJpZW5kbHkgZGVzY3JpcHRpb24gb2YgdGhlIGVycm9yIgogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9CiAgICB9LAogICAgewogICAgICAidHlwZSI6ICJvYmplY3QiLAogICAgICAicmVxdWlyZWQiOiBbCiAgICAgICAgInN1Y2Nlc3MiCiAgICAgIF0sCiAgICAgICJwcm9wZXJ0aWVzIjogewogICAgICAgICJzdWNjZXNzIjogewogICAgICAgICAgInR5cGUiOiAiYm9vbGVhbiIKICAgICAgICB9CiAgICAgIH0KICAgIH0KICBdLAogICJwcm9wZXJ0aWVzIjogewogICAgInR5cGUiOiB7CiAgICAgICJ0eXBlIjogInN0cmluZyIsCiAgICAgICJjb25zdCI6ICJpby5uYXRzLmpldHN0cmVhbS5hcGkudjEuc3RyZWFtX21zZ19kZWxldGVfcmVzcG9uc2UiCiAgICB9CiAgfQp9Cg==")
	schemas["io.nats.jetstream.api.v1.stream_msg_get_request"], _ = base64.StdEncoding.DecodeString("ewogICIkc2NoZW1hIjogImh0dHA6Ly9qc29uLXNjaGVtYS5vcmcvZHJhZnQtMDcvc2NoZW1hIyIsCiAgIiRpZCI6ICJodHRwczovL25hdHMuaW8vc2NoZW1hcy9qZXRzdHJlYW0vYXBpL3YxL3N0cmVhbV9tc2dfZ2V0X3JlcXVlc3QuanNvbiIsCiAgImRlc2NyaXB0aW9uIjogIkEgcmVxdWVzdCB0byB0aGUgSmV0U3RyZWFtICRKUy5BUEkuU1RSRUFNLk1TRy5HRVQgQVBJIiwKICAidGl0bGUiOiAiaW8ubmF0cy5qZXRzdHJlYW0uYXBpLnYxLnN0cmVhbV9tc2dfZ2V0X3JlcXVlc3QiLAogICJ0eXBlIjogIm9iamVjdCIsCiAgInJlcXVpcmVkIjogWwogICAgInNlcSIKICBdLAogICJwcm9wZXJ0aWVzIjogewogICAgInNlcSI6IHsKICAgICAgInR5cGUiOiAiaW50ZWdlciIsCiAgICAgICJkZXNjcmlwdGlvbiI6ICJTdHJlYW0gc2VxdWVuY2UgbnVtYmVyIG9mIHRoZSBtZXNzYWdlIHRvIHJldHJpZXZlIgogICAgfQogIH0KfQo=")
	schemas["io.nats.jetstream.api.v1.stream_msg_get_response"], _ = base64.StdEncoding.DecodeString("ewogICIkc2NoZW1hIjogImh0dHA6Ly9qc29uLXNjaGVtYS5vcmcvZHJhZnQtMDcvc2NoZW1hIyIsCiAgIiRpZCI6ICJodHRwczovL25hdHMuaW8vc2NoZW1hcy9qZXRzdHJlYW0vYXBpL3YxL3N0cmVhbV9tc2dfZ2V0X3Jlc3BvbnNlLmpzb24iLAogICJkZXNjcmlwdGlvbiI6ICJBIHJlc3BvbnNlIGZyb20gdGhlIEpldFN0cmVhbSAkSlMuQVBJLlNUUkVBTS5NU0cuR0VUIEFQSSIsCiAgInRpdGxlIjogImlvLm5hdHMuamV0c3RyZWFtLmFwaS52MS5zdHJlYW1fbXNnX2dldF9yZXNwb25zZSIsCiAgInR5cGUiOiAib2JqZWN0IiwKICAicmVxdWlyZWQiOiBbCiAgICAidHlwZSIKICBdLAogICJvbmVPZiI6IFsKICAgIHsKICAgICAgInR5cGUiOiAib2JqZWN0IiwKICAgICAgInJlcXVpcmVkIjogWwogICAgICAgICJlcnJvciIKICAgICAgXSwKICAgICAgInByb3BlcnRpZXMiOiB7CiAgICAgICAgImVycm9yIjogewogICAgICAgICAgInR5cGUiOiAib2JqZWN0IiwKICAgICAgICAgICJyZXF1aXJlZCI6IFsKICAgICAgICAgICAgImNvZGUiCiAgICAgICAgICBdLAogICAgICAgICAgInByb3BlcnRpZXMiOiB7CiAgICAgICAgICAgICJjb2RlIjogewogICAgICAgICAgICAgICJ0eXBlIjogImludGVnZXIiLAogICAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJIVFRQIGxpa2UgZXJyb3IgY29kZSBpbiB0aGUgMzAwIHRvIDUwMCByYW5nZSIsCiAgICAgICAgICAgICAgIm1pbmltdW0iOiAzMDAsCiAgICAgICAgICAgICAgIm1heGltdW0iOiA2OTkKICAgICAgICAgICAgfSwKICAgICAgICAgICAgImRlc2NyaXB0aW9uIjogewogICAgICAgICAgICAgICJ0eXBlIjogInN0cmluZyIsCiAgICAgICAgICAgICAgImRlc2NyaXB0aW9uIjogIkEgaHVtYW4gZnJpZW5kbHkgZGVzY3JpcHRpb24gb2YgdGhlIGVycm9yIgogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9CiAgICB9LAogICAgewogICAgICAidHlwZSI6ICJvYmplY3QiLAogICAgICAicmVxdWlyZWQiOiBbCiAgICAgICAgIm1lc3NhZ2UiCiAgICAgIF0sCiAgICAgICJwcm9wZXJ0aWVzIjogewogICAgICAgICJtZXNzYWdlIjogewogICAgICAgICAgInR5cGUiOiAib2JqZWN0IiwKICAgICAgICAgICJhZGRpdGlvbmFsUHJvcGVydGllcyI6IGZhbHNlLAogICAgICAgICAgInJlcXVpcmVkIjogWwogICAgICAgICAgICAic3ViamVjdCIsCiAgICAgICAgICAgICJzZXEiLAogICAgICAgICAgICAiZGF0YSIsCiAgICAgICAgICAgICJ0aW1lIgogICAgICAgICAgXSwKICAgICAgICAgICJwcm9wZXJ0aWVzIjogewogICAgICAgICAgICAic3ViamVjdCI6IHsKICAgICAgICAgICAgICAidHlwZSI6ICJzdHJpbmciLAogICAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJUaGUgc3ViamVjdCB0aGUgbWVzc2FnZSB3YXMgb3JpZ2luYWxseSByZWNlaXZlZCBvbiIsCiAgICAgICAgICAgICAgIm1pbkxlbmd0aCI6IDEKICAgICAgICAgICAgfSwKICAgICAgICAgICAgInNlcSI6IHsKICAgICAgICAgICAgICAidHlwZSI6ICJpbnRlZ2VyIiwKICAgICAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiVGhlIHNlcXVlbmNlIG51bWJlciBvZiB0aGUgbWVzc2FnZSBpbiB0aGUgU3RyZWFtIiwKICAgICAgICAgICAgICAibWluaW11bSI6IDAKICAgICAgICAgICAgfSwKICAgICAgICAgICAgImRhdGEiOiB7CiAgICAgICAgICAgICAgInR5cGUiOiAic3RyaW5nIiwKICAgICAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiVGhlIGJhc2U2NCBlbmNvZGVkIHBheWxvYWQgb2YgdGhlIG1lc3NhZ2UgYm9keSIsCiAgICAgICAgICAgICAgIm1pbkxlbmd0aCI6IDAKICAgICAgICAgICAgfSwKICAgICAgICAgICAgInRpbWUiOiB7CiAgICAgICAgICAgICAgInR5cGUiOiAic3RyaW5nIiwKICAgICAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiVGhlIHRpbWUgdGhlIG1lc3NhZ2Ugd2FzIHJlY2VpdmVkIgogICAgICAgICAgICB9LAogICAgICAgICAgICAiaGRycyI6IHsKICAgICAgICAgICAgICAidHlwZSI6ICJzdHJpbmciLAogICAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJCYXNlNjQgZW5jb2RlZCBoZWFkZXJzIGZvciB0aGUgbWVzc2FnZSIKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfQogICAgfQogIF0sCiAgInByb3BlcnRpZXMiOiB7CiAgICAidHlwZSI6IHsKICAgICAgInR5cGUiOiAic3RyaW5nIiwKICAgICAgImNvbnN0IjogImlvLm5hdHMuamV0c3RyZWFtLmFwaS52MS5zdHJlYW1fbXNnX2dldF9yZXNwb25zZSIKICAgIH0KICB9Cn0K")
	schemas["io.nats.jetstream.api.v1.stream_names_request"], _ = base64.StdEncoding.DecodeString("ewogICIkc2NoZW1hIjogImh0dHA6Ly9qc29uLXNjaGVtYS5vcmcvZHJhZnQtMDcvc2NoZW1hIyIsCiAgIiRpZCI6ICJodHRwczovL25hdHMuaW8vc2NoZW1hcy9qZXRzdHJlYW0vYXBpL3YxL3N0cmVhbV9uYW1lc19yZXF1ZXN0Lmpzb24iLAogICJkZXNjcmlwdGlvbiI6ICJBIHJlcXVlc3QgdG8gdGhlIEpldFN0cmVhbSAkSlMuQVBJLlNUUkVBTS5OQU1FUyBBUEkiLAogICJ0aXRsZSI6ICJpby5uYXRzLmpldHN0cmVhbS5hcGkudjEuc3RyZWFtX25hbWVzX3JlcXVlc3QiLAogICJ0eXBlIjogIm9iamVjdCIsCiAgImFsbE9mIjogWwogICAgewogICAgICAidHlwZSI6ICJvYmplY3QiLAogICAgICAiYWRkaXRpb25hbFByb3BlcnRpZXMiOiBmYWxzZSwKICAgICAgInJlcXVpcmVkIjogWwogICAgICAgICJvZmZzZXQiCiAgICAgIF0sCiAgICAgICJwcm9wZXJ0aWVzIjogewogICAgICAgICJvZmZzZXQiOiB7CiAgICAgICAgICAidHlwZSI6ICJpbnRlZ2VyIiwKICAgICAgICAgICJtaW5pbXVtIjogMAogICAgICAgIH0KICAgICAgfQogICAgfQogIF0KfQo=")
	schemas["io.nats.jetstream.api.v1.stream_names_response"], _ = base64.StdEncoding.DecodeString("ewogICIkc2NoZW1hIjogImh0dHA6Ly9qc29uLXNjaGVtYS5vcmcvZHJhZnQtMDcvc2NoZW1hIyIsCiAgIiRpZCI6ICJodHRwczovL25hdHMuaW8vc2NoZW1hcy9qZXRzdHJlYW0vYXBpL3YxL3N0cmVhbV9uYW1lc19yZXNwb25zZS5qc29uIiwKICAiZGVzY3JpcHRpb24iOiAiQSByZXNwb25zZSBmcm9tIHRoZSBKZXRTdHJlYW0gJEpTLkFQSS5TVFJFQU0uTkFNRVMgQVBJIiwKICAidGl0bGUiOiAiaW8ubmF0cy5qZXRzdHJlYW0uYXBpLnYxLnN0cmVhbV9uYW1lc19yZXNwb25zZSIsCiAgInR5cGUiOiAib2JqZWN0IiwKICAicmVxdWlyZWQiOiBbCiAgICAidHlwZSIKICBdLAogICJhbGxPZiI6IFsKICAgIHsKICAgICAgInR5cGUiOiAib2JqZWN0IiwKICAgICAgInJlcXVpcmVkIjogWwogICAgICAgICJ0b3RhbCIsCiAgICAgICAgIm9mZnNldCIsCiAgICAgICAgImxpbWl0IgogICAgICBdLAogICAgICAicHJvcGVydGllcyI6IHsKICAgICAgICAidG90YWwiOiB7CiAgICAgICAgICAidHlwZSI6ICJpbnRlZ2VyIiwKICAgICAgICAgICJtaW5pbXVtIjogMAogICAgICAgIH0sCiAgICAgICAgIm9mZnNldCI6IHsKICAgICAgICAgICJ0eXBlIjogImludGVnZXIiLAogICAgICAgICAgIm1pbmltdW0iOiAwCiAgICAgICAgfSwKICAgICAgICAibGltaXQiOiB7CiAgICAgICAgICAidHlwZSI6ICJpbnRlZ2VyIiwKICAgICAgICAgICJtaW5pbXVtIjogMAogICAgICAgIH0KICAgICAgfQogICAgfQogIF0sCiAgIm9uZU9mIjogWwogICAgewogICAgICAidHlwZSI6ICJvYmplY3QiLAogICAgICAicmVxdWlyZWQiOiBbCiAgICAgICAgImVycm9yIgogICAgICBdLAogICAgICAicHJvcGVydGllcyI6IHsKICAgICAgICAiZXJyb3IiOiB7CiAgICAgICAgICAidHlwZSI6ICJvYmplY3QiLAogICAgICAgICAgInJlcXVpcmVkIjogWwogICAgICAgICAgICAiY29kZSIKICAgICAgICAgIF0sCiAgICAgICAgICAicHJvcGVydGllcyI6IHsKICAgICAgICAgICAgImNvZGUiOiB7CiAgICAgICAgICAgICAgInR5cGUiOiAiaW50ZWdlciIsCiAgICAgICAgICAgICAgImRlc2NyaXB0aW9uIjogIkhUVFAgbGlrZSBlcnJvciBjb2RlIGluIHRoZSAzMDAgdG8gNTAwIHJhbmdlIiwKICAgICAgICAgICAgICAibWluaW11bSI6IDMwMCwKICAgICAgICAgICAgICAibWF4aW11bSI6IDY5OQogICAgICAgICAgICB9LAogICAgICAgICAgICAiZGVzY3JpcHRpb24iOiB7CiAgICAgICAgICAgICAgInR5cGUiOiAic3RyaW5nIiwKICAgICAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiQSBodW1hbiBmcmllbmRseSBkZXNjcmlwdGlvbiBvZiB0aGUgZXJyb3IiCiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0KICAgIH0sCiAgICB7CiAgICAgICJ0eXBlIjogIm9iamVjdCIsCiAgICAgICJyZXF1aXJlZCI6IFsKICAgICAgICAic3RyZWFtcyIKICAgICAgXSwKICAgICAgInByb3BlcnRpZXMiOiB7CiAgICAgICAgImNvbnN1bWVycyI6IHsKICAgICAgICAgICJ0eXBlIjogImFycmF5IiwKICAgICAgICAgICJpdGVtcyI6IHsKICAgICAgICAgICAgInR5cGUiOiAic3RyaW5nIgogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfQogICAgfQogIF0sCiAgInByb3BlcnRpZXMiOiB7CiAgICAidHlwZSI6IHsKICAgICAgInR5cGUiOiAic3RyaW5nIiwKICAgICAgImNvbnN0IjogImlvLm5hdHMuamV0c3RyZWFtLmFwaS52MS5zdHJlYW1fbmFtZXNfcmVzcG9uc2UiCiAgICB9CiAgfQp9Cg==")
	schemas["io.nats.jetstream.api.v1.stream_purge_response"], _ = base64.StdEncoding.DecodeString("ewogICIkc2NoZW1hIjogImh0dHA6Ly9qc29uLXNjaGVtYS5vcmcvZHJhZnQtMDcvc2NoZW1hIyIsCiAgIiRpZCI6ICJodHRwczovL25hdHMuaW8vc2NoZW1hcy9qZXRzdHJlYW0vYXBpL3YxL3N0cmVhbV9wdXJnZV9yZXNwb25zZS5qc29uIiwKICAiZGVzY3JpcHRpb24iOiAiQSByZXNwb25zZSBmcm9tIHRoZSBKZXRTdHJlYW0gJEpTLkFQSS5TVFJFQU0uUFVSR0UgQVBJIiwKICAidGl0bGUiOiAiaW8ubmF0cy5qZXRzdHJlYW0uYXBpLnYxLnN0cmVhbV9wdXJnZV9yZXNwb25zZSIsCiAgInR5cGUiOiAib2JqZWN0IiwKICAicmVxdWlyZWQiOiBbCiAgICAidHlwZSIKICBdLAogICJvbmVPZiI6IFsKICAgIHsKICAgICAgInR5cGUiOiAib2JqZWN0IiwKICAgICAgInJlcXVpcmVkIjogWwogICAgICAgICJlcnJvciIKICAgICAgXSwKICAgICAgInByb3BlcnRpZXMiOiB7CiAgICAgICAgImVycm9yIjogewogICAgICAgICAgInR5cGUiOiAib2JqZWN0IiwKICAgICAgICAgICJyZXF1aXJlZCI6IFsKICAgICAgICAgICAgImNvZGUiCiAgICAgICAgICBdLAogICAgICAgICAgInByb3BlcnRpZXMiOiB7CiAgICAgICAgICAgICJjb2RlIjogewogICAgICAgICAgICAgICJ0eXBlIjogImludGVnZXIiLAogICAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJIVFRQIGxpa2UgZXJyb3IgY29kZSBpbiB0aGUgMzAwIHRvIDUwMCByYW5nZSIsCiAgICAgICAgICAgICAgIm1pbmltdW0iOiAzMDAsCiAgICAgICAgICAgICAgIm1heGltdW0iOiA2OTkKICAgICAgICAgICAgfSwKICAgICAgICAgICAgImRlc2NyaXB0aW9uIjogewogICAgICAgICAgICAgICJ0eXBlIjogInN0cmluZyIsCiAgICAgICAgICAgICAgImRlc2NyaXB0aW9uIjogIkEgaHVtYW4gZnJpZW5kbHkgZGVzY3JpcHRpb24gb2YgdGhlIGVycm9yIgogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9CiAgICB9LAogICAgewogICAgICAicmVxdWlyZWQiOiBbCiAgICAgICAgInN1Y2Nlc3MiLAogICAgICAgICJwdXJnZWQiCiAgICAgIF0sCiAgICAgICJ0eXBlIjogIm9iamVjdCIsCiAgICAgICJwcm9wZXJ0aWVzIjogewogICAgICAgICJzdWNjZXNzIjogewogICAgICAgICAgInR5cGUiOiAiYm9vbGVhbiIKICAgICAgICB9LAogICAgICAgICJwdXJnZWQiOiB7CiAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiTnVtYmVyIG9mIG1lc3NhZ2VzIHB1cmdlZCBmcm9tIHRoZSBTdHJlYW0iLAogICAgICAgICAgInR5cGUiOiAiaW50ZWdlciIsCiAgICAgICAgICAibWluaW11bSI6IDAKICAgICAgICB9CiAgICAgIH0KICAgIH0KICBdLAogICJwcm9wZXJ0aWVzIjogewogICAgInR5cGUiOiB7CiAgICAgICJ0eXBlIjogInN0cmluZyIsCiAgICAgICJjb25zdCI6ICJpby5uYXRzLmpldHN0cmVhbS5hcGkudjEuc3RyZWFtX3B1cmdlX3Jlc3BvbnNlIgogICAgfQogIH0KfQo=")
	schemas["io.nats.jetstream.api.v1.stream_snapshot_response"], _ = base64.StdEncoding.DecodeString("")
	schemas["io.nats.jetstream.api.v1.stream_snapshot_request"], _ = base64.StdEncoding.DecodeString("ewogICIkc2NoZW1hIjogImh0dHA6Ly9qc29uLXNjaGVtYS5vcmcvZHJhZnQtMDcvc2NoZW1hIyIsCiAgIiRpZCI6ICJodHRwczovL25hdHMuaW8vc2NoZW1hcy9qZXRzdHJlYW0vYXBpL3YxL3N0cmVhbV9zbmFwc2hvdF9yZXF1ZXN0Lmpzb24iLAogICJkZXNjcmlwdGlvbiI6ICJBIHJlcXVlc3QgdG8gdGhlIEpldFN0cmVhbSAkSlMuQVBJLlNUUkVBTS5TTkFQU0hPVCBBUEkiLAogICJ0aXRsZSI6ICJpby5uYXRzLmpldHN0cmVhbS5hcGkudjEuc3RyZWFtX3NuYXBzaG90X3JlcXVlc3QiLAogICJ0eXBlIjogIm9iamVjdCIsCiAgInJlcXVpcmVkIjogWwogICAgImRlbGl2ZXJfc3ViamVjdCIKICBdLAogICJhZGRpdGlvbmFsUHJvcGVydGllcyI6IGZhbHNlLAogICJwcm9wZXJ0aWVzIjogewogICAgImRlbGl2ZXJfc3ViamVjdCI6IHsKICAgICAgInR5cGUiOiAic3RyaW5nIiwKICAgICAgImRlc2NyaXB0aW9uIjogIlRoZSBOQVRTIHN1YmplY3Qgd2hlcmUgdGhlIHNuYXBzaG90IHdpbGwgYmUgZGVsaXZlcmVkIiwKICAgICAgIm1pbkxlbmd0aCI6IDEKICAgIH0sCiAgICAibm9fY29uc3VtZXJzIjogewogICAgICAidHlwZSI6ICJib29sZWFuIiwKICAgICAgImRlc2NyaXB0aW9uIjogIldoZW4gdHJ1ZSBjb25zdW1lciBzdGF0ZXMgYW5kIGNvbmZpZ3VyYXRpb25zIHdpbGwgbm90IGJlIHByZXNlbnQgaW4gdGhlIHNuYXBzaG90IgogICAgfSwKICAgICJjaHVua19zaXplIjogewogICAgICAidHlwZSI6ICJpbnRlZ2VyIiwKICAgICAgImRlc2NyaXB0aW9uIjogIlRoZSBzaXplIG9mIGRhdGEgY2h1bmtzIHRvIHNlbmQgdG8gZGVsaXZlcl9zdWJqZWN0IiwKICAgICAgIm1pbmltdW0iOiAxMDI0CiAgICB9LAogICAgImpzY2siOiB7CiAgICAgICJ0eXBlIjogImJvb2xlYW4iLAogICAgICAiZGVzY3JpcHRpb24iOiAiQ2hlY2sgYWxsIG1lc3NhZ2UncyBjaGVja3N1bXMgcHJpb3IgdG8gc25hcHNob3QiLAogICAgICAiZGVmYXVsdCI6IGZhbHNlCiAgICB9CiAgfQp9Cg==")
	schemas["io.nats.jetstream.api.v1.stream_restore_request"], _ = base64.StdEncoding.DecodeString("")
	schemas["io.nats.jetstream.api.v1.stream_restore_response"], _ = base64.StdEncoding.DecodeString("ewogICIkc2NoZW1hIjogImh0dHA6Ly9qc29uLXNjaGVtYS5vcmcvZHJhZnQtMDcvc2NoZW1hIyIsCiAgIiRpZCI6ICJodHRwczovL25hdHMuaW8vc2NoZW1hcy9qZXRzdHJlYW0vYXBpL3YxL3N0cmVhbV9yZXN0b3JlX3Jlc3BvbnNlLmpzb24iLAogICJkZXNjcmlwdGlvbiI6ICJBIHJlc3BvbnNlIGZyb20gdGhlIEpldFN0cmVhbSAkSlMuQVBJLlNUUkVBTS5SRVNUT1JFIEFQSSIsCiAgInRpdGxlIjogImlvLm5hdHMuamV0c3RyZWFtLmFwaS52MS5zdHJlYW1fcmVzdG9yZV9yZXNwb25zZSIsCiAgInR5cGUiOiAib2JqZWN0IiwKICAib25lT2YiOiBbCiAgICB7CiAgICAgICJ0eXBlIjogIm9iamVjdCIsCiAgICAgICJyZXF1aXJlZCI6IFsKICAgICAgICAiZXJyb3IiCiAgICAgIF0sCiAgICAgICJwcm9wZXJ0aWVzIjogewogICAgICAgICJlcnJvciI6IHsKICAgICAgICAgICJ0eXBlIjogIm9iamVjdCIsCiAgICAgICAgICAicmVxdWlyZWQiOiBbCiAgICAgICAgICAgICJjb2RlIgogICAgICAgICAgXSwKICAgICAgICAgICJwcm9wZXJ0aWVzIjogewogICAgICAgICAgICAiY29kZSI6IHsKICAgICAgICAgICAgICAidHlwZSI6ICJpbnRlZ2VyIiwKICAgICAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiSFRUUCBsaWtlIGVycm9yIGNvZGUgaW4gdGhlIDMwMCB0byA1MDAgcmFuZ2UiLAogICAgICAgICAgICAgICJtaW5pbXVtIjogMzAwLAogICAgICAgICAgICAgICJtYXhpbXVtIjogNjk5CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6IHsKICAgICAgICAgICAgICAidHlwZSI6ICJzdHJpbmciLAogICAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJBIGh1bWFuIGZyaWVuZGx5IGRlc2NyaXB0aW9uIG9mIHRoZSBlcnJvciIKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfQogICAgfSwKICAgIHsKICAgICAgInJlcXVpcmVkIjogWwogICAgICAgICJkZWxpdmVyX3N1YmplY3QiCiAgICAgIF0sCiAgICAgICJ0eXBlIjogIm9iamVjdCIsCiAgICAgICJwcm9wZXJ0aWVzIjogewogICAgICAgICJkZWxpdmVyX3N1YmplY3QiOiB7CiAgICAgICAgICAidHlwZSI6ICJzdHJpbmciLAogICAgICAgICAgImRlc2NyaXB0aW9uIjogIlRoZSBTdWJqZWN0IHRvIHNlbmQgcmVzdG9yZSBjaHVua3MgdG8iLAogICAgICAgICAgIm1pbkxlbmd0aCI6IDEKICAgICAgICB9CiAgICAgIH0KICAgIH0KICBdLAogICJwcm9wZXJ0aWVzIjogewogICAgInR5cGUiOiB7CiAgICAgICJ0eXBlIjogInN0cmluZyIsCiAgICAgICJjb25zdCI6ICJpby5uYXRzLmpldHN0cmVhbS5hcGkudjEuc3RyZWFtX3Jlc3RvcmVfcmVzcG9uc2UiCiAgICB9CiAgfQp9Cg==")
	schemas["io.nats.jetstream.api.v1.stream_template_create_request"], _ = base64.StdEncoding.DecodeString("")
	schemas["io.nats.jetstream.api.v1.stream_template_create_response"], _ = base64.StdEncoding.DecodeString("")
	schemas["io.nats.jetstream.api.v1.stream_template_delete_response"], _ = base64.StdEncoding.DecodeString("ewogICIkc2NoZW1hIjogImh0dHA6Ly9qc29uLXNjaGVtYS5vcmcvZHJhZnQtMDcvc2NoZW1hIyIsCiAgIiRpZCI6ICJodHRwczovL25hdHMuaW8vc2NoZW1hcy9qZXRzdHJlYW0vYXBpL3YxL3N0cmVhbV90ZW1wbGF0ZV9kZWxldGVfcmVzcG9uc2UuanNvbiIsCiAgImRlc2NyaXB0aW9uIjogIkEgcmVzcG9uc2UgZnJvbSB0aGUgSmV0U3RyZWFtICRKUy5BUEkuU1RSRUFNLlRFTVBMQVRFLkRFTEVURSBBUEkiLAogICJ0aXRsZSI6ICJpby5uYXRzLmpldHN0cmVhbS5hcGkudjEuc3RyZWFtX3RlbXBsYXRlX2RlbGV0ZV9yZXNwb25zZSIsCiAgInR5cGUiOiAib2JqZWN0IiwKICAicmVxdWlyZWQiOiBbCiAgICAidHlwZSIKICBdLAogICJvbmVPZiI6IFsKICAgIHsKICAgICAgInR5cGUiOiAib2JqZWN0IiwKICAgICAgInJlcXVpcmVkIjogWwogICAgICAgICJlcnJvciIKICAgICAgXSwKICAgICAgInByb3BlcnRpZXMiOiB7CiAgICAgICAgImVycm9yIjogewogICAgICAgICAgInR5cGUiOiAib2JqZWN0IiwKICAgICAgICAgICJyZXF1aXJlZCI6IFsKICAgICAgICAgICAgImNvZGUiCiAgICAgICAgICBdLAogICAgICAgICAgInByb3BlcnRpZXMiOiB7CiAgICAgICAgICAgICJjb2RlIjogewogICAgICAgICAgICAgICJ0eXBlIjogImludGVnZXIiLAogICAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJIVFRQIGxpa2UgZXJyb3IgY29kZSBpbiB0aGUgMzAwIHRvIDUwMCByYW5nZSIsCiAgICAgICAgICAgICAgIm1pbmltdW0iOiAzMDAsCiAgICAgICAgICAgICAgIm1heGltdW0iOiA2OTkKICAgICAgICAgICAgfSwKICAgICAgICAgICAgImRlc2NyaXB0aW9uIjogewogICAgICAgICAgICAgICJ0eXBlIjogInN0cmluZyIsCiAgICAgICAgICAgICAgImRlc2NyaXB0aW9uIjogIkEgaHVtYW4gZnJpZW5kbHkgZGVzY3JpcHRpb24gb2YgdGhlIGVycm9yIgogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9CiAgICB9LAogICAgewogICAgICAicmVxdWlyZWQiOiBbCiAgICAgICAgInN1Y2Nlc3MiCiAgICAgIF0sCiAgICAgICJ0eXBlIjogIm9iamVjdCIsCiAgICAgICJwcm9wZXJ0aWVzIjogewogICAgICAgICJzdWNjZXNzIjogewogICAgICAgICAgInR5cGUiOiAiYm9vbGVhbiIKICAgICAgICB9CiAgICAgIH0KICAgIH0KICBdLAogICJwcm9wZXJ0aWVzIjogewogICAgInR5cGUiOiB7CiAgICAgICJ0eXBlIjogInN0cmluZyIsCiAgICAgICJjb25zdCI6ICJpby5uYXRzLmpldHN0cmVhbS5hcGkudjEuc3RyZWFtX3RlbXBsYXRlX2RlbGV0ZV9yZXNwb25zZSIKICAgIH0KICB9Cn0K")
	schemas["io.nats.jetstream.api.v1.stream_template_info_response"], _ = base64.StdEncoding.DecodeString("")
	schemas["io.nats.jetstream.api.v1.stream_template_names_response"], _ = base64.StdEncoding.DecodeString("ewogICIkc2NoZW1hIjogImh0dHA6Ly9qc29uLXNjaGVtYS5vcmcvZHJhZnQtMDcvc2NoZW1hIyIsCiAgIiRpZCI6ICJodHRwczovL25hdHMuaW8vc2NoZW1hcy9qZXRzdHJlYW0vYXBpL3YxL3N0cmVhbV90ZW1wbGF0ZV9uYW1lc19yZXNwb25zZS5qc29uIiwKICAiZGVzY3JpcHRpb24iOiAiQSByZXNwb25zZSBmcm9tIHRoZSBKZXRTdHJlYW0gJEpTLkFQSS5TVFJFQU0uVEVNUExBVEUuTkFNRVMgQVBJIiwKICAidGl0bGUiOiAiaW8ubmF0cy5qZXRzdHJlYW0uYXBpLnYxLnN0cmVhbV90ZW1wbGF0ZV9uYW1lc19yZXNwb25zZSIsCiAgInR5cGUiOiAib2JqZWN0IiwKICAicmVxdWlyZWQiOiBbCiAgICAidHlwZSIKICBdLAogICJhbGxPZiI6IFsKICAgIHsKICAgICAgInR5cGUiOiAib2JqZWN0IiwKICAgICAgInJlcXVpcmVkIjogWwogICAgICAgICJ0b3RhbCIsCiAgICAgICAgIm9mZnNldCIsCiAgICAgICAgImxpbWl0IgogICAgICBdLAogICAgICAicHJvcGVydGllcyI6IHsKICAgICAgICAidG90YWwiOiB7CiAgICAgICAgICAidHlwZSI6ICJpbnRlZ2VyIiwKICAgICAgICAgICJtaW5pbXVtIjogMAogICAgICAgIH0sCiAgICAgICAgIm9mZnNldCI6IHsKICAgICAgICAgICJ0eXBlIjogImludGVnZXIiLAogICAgICAgICAgIm1pbmltdW0iOiAwCiAgICAgICAgfSwKICAgICAgICAibGltaXQiOiB7CiAgICAgICAgICAidHlwZSI6ICJpbnRlZ2VyIiwKICAgICAgICAgICJtaW5pbXVtIjogMAogICAgICAgIH0KICAgICAgfQogICAgfQogIF0sCiAgIm9uZU9mIjogWwogICAgewogICAgICAidHlwZSI6ICJvYmplY3QiLAogICAgICAicmVxdWlyZWQiOiBbCiAgICAgICAgImVycm9yIgogICAgICBdLAogICAgICAicHJvcGVydGllcyI6IHsKICAgICAgICAiZXJyb3IiOiB7CiAgICAgICAgICAidHlwZSI6ICJvYmplY3QiLAogICAgICAgICAgInJlcXVpcmVkIjogWwogICAgICAgICAgICAiY29kZSIKICAgICAgICAgIF0sCiAgICAgICAgICAicHJvcGVydGllcyI6IHsKICAgICAgICAgICAgImNvZGUiOiB7CiAgICAgICAgICAgICAgInR5cGUiOiAiaW50ZWdlciIsCiAgICAgICAgICAgICAgImRlc2NyaXB0aW9uIjogIkhUVFAgbGlrZSBlcnJvciBjb2RlIGluIHRoZSAzMDAgdG8gNTAwIHJhbmdlIiwKICAgICAgICAgICAgICAibWluaW11bSI6IDMwMCwKICAgICAgICAgICAgICAibWF4aW11bSI6IDY5OQogICAgICAgICAgICB9LAogICAgICAgICAgICAiZGVzY3JpcHRpb24iOiB7CiAgICAgICAgICAgICAgInR5cGUiOiAic3RyaW5nIiwKICAgICAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiQSBodW1hbiBmcmllbmRseSBkZXNjcmlwdGlvbiBvZiB0aGUgZXJyb3IiCiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0KICAgIH0sCiAgICB7CiAgICAgICJ0eXBlIjogIm9iamVjdCIsCiAgICAgICJyZXF1aXJlZCI6IFsKICAgICAgICAic3RyZWFtcyIKICAgICAgXSwKICAgICAgInByb3BlcnRpZXMiOiB7CiAgICAgICAgImNvbnN1bWVycyI6IHsKICAgICAgICAgICJ0eXBlIjogImFycmF5IiwKICAgICAgICAgICJpdGVtcyI6IHsKICAgICAgICAgICAgInR5cGUiOiAic3RyaW5nIgogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfQogICAgfQogIF0sCiAgInByb3BlcnRpZXMiOiB7CiAgICAidHlwZSI6IHsKICAgICAgInR5cGUiOiAic3RyaW5nIiwKICAgICAgImNvbnN0IjogImlvLm5hdHMuamV0c3RyZWFtLmFwaS52MS5zdHJlYW1fdGVtcGxhdGVfbmFtZXNfcmVzcG9uc2UiCiAgICB9CiAgfQp9Cg==")
	schemas["io.nats.jetstream.api.v1.stream_template_names_request"], _ = base64.StdEncoding.DecodeString("ewogICIkc2NoZW1hIjogImh0dHA6Ly9qc29uLXNjaGVtYS5vcmcvZHJhZnQtMDcvc2NoZW1hIyIsCiAgIiRpZCI6ICJodHRwczovL25hdHMuaW8vc2NoZW1hcy9qZXRzdHJlYW0vYXBpL3YxL3N0cmVhbV90ZW1wbGF0ZV9uYW1lc19yZXF1ZXN0Lmpzb24iLAogICJkZXNjcmlwdGlvbiI6ICJBIHJlcXVlc3QgdG8gdGhlIEpldFN0cmVhbSAkSlMuQVBJLkNPTlNVTUVSLkxJU1QgQVBJIiwKICAidGl0bGUiOiAiaW8ubmF0cy5qZXRzdHJlYW0uYXBpLnYxLnN0cmVhbV90ZW1wbGF0ZV9uYW1lc19yZXF1ZXN0IiwKICAidHlwZSI6ICJvYmplY3QiLAogICJhbGxPZiI6IFsKICAgIHsKICAgICAgInR5cGUiOiAib2JqZWN0IiwKICAgICAgImFkZGl0aW9uYWxQcm9wZXJ0aWVzIjogZmFsc2UsCiAgICAgICJyZXF1aXJlZCI6IFsKICAgICAgICAib2Zmc2V0IgogICAgICBdLAogICAgICAicHJvcGVydGllcyI6IHsKICAgICAgICAib2Zmc2V0IjogewogICAgICAgICAgInR5cGUiOiAiaW50ZWdlciIsCiAgICAgICAgICAibWluaW11bSI6IDAKICAgICAgICB9CiAgICAgIH0KICAgIH0KICBdCn0K")
	schemas["io.nats.jetstream.api.v1.stream_update_response"], _ = base64.StdEncoding.DecodeString("")
	schemas["io.nats.jetstream.api.v1.stream_remove_peer_request"], _ = base64.StdEncoding.DecodeString("ewogICIkc2NoZW1hIjogImh0dHA6Ly9qc29uLXNjaGVtYS5vcmcvZHJhZnQtMDcvc2NoZW1hIyIsCiAgIiRpZCI6ICJodHRwczovL25hdHMuaW8vc2NoZW1hcy9qZXRzdHJlYW0vYXBpL3YxL3N0cmVhbV9yZW1vdmVfcGVlcl9yZXF1ZXN0Lmpzb24iLAogICJkZXNjcmlwdGlvbiI6ICJBIHJlcXVlc3QgdG8gdGhlIEpldFN0cmVhbSAkSlMuQVBJLlNUUkVBTS5QRUVSLlJFTU9WRSBBUEkiLAogICJ0aXRsZSI6ICJpby5uYXRzLmpldHN0cmVhbS5hcGkudjEuc3RyZWFtX3JlbW92ZV9wZWVyX3JlcXVlc3QiLAogICJ0eXBlIjogIm9iamVjdCIsCiAgInJlcXVpcmVkIjogWwogICAgInBlZXIiCiAgXSwKICAiYWRkaXRpb25hbFByb3BlcnRpZXMiOiBmYWxzZSwKICAicHJvcGVydGllcyI6IHsKICAgICJwZWVyIjogewogICAgICAidHlwZSI6ICJzdHJpbmciLAogICAgICAiZGVzY3JpcHRpb24iOiAiU2VydmVyIG5hbWUgb2YgdGhlIHBlZXIgdG8gcmVtb3ZlIiwKICAgICAgIm1pbkxlbmd0aCI6IDEKICAgIH0KICB9Cn0K")
	schemas["io.nats.jetstream.api.v1.stream_remove_peer_response"], _ = base64.StdEncoding.DecodeString("ewogICIkc2NoZW1hIjogImh0dHA6Ly9qc29uLXNjaGVtYS5vcmcvZHJhZnQtMDcvc2NoZW1hIyIsCiAgIiRpZCI6ICJodHRwczovL25hdHMuaW8vc2NoZW1hcy9qZXRzdHJlYW0vYXBpL3YxL3N0cmVhbV9yZW1vdmVfcGVlcl9yZXNwb25zZS5qc29uIiwKICAiZGVzY3JpcHRpb24iOiAiQSByZXNwb25zZSBmcm9tIHRoZSBKZXRTdHJlYW0gJEpTLkFQSS5TVFJFQU0uUEVFUi5SRU1PVkUgQVBJIiwKICAidGl0bGUiOiAiaW8ubmF0cy5qZXRzdHJlYW0uYXBpLnYxLnN0cmVhbV9yZW1vdmVfcGVlcl9yZXNwb25zZSIsCiAgInR5cGUiOiAib2JqZWN0IiwKICAib25lT2YiOiBbCiAgICB7CiAgICAgICJ0eXBlIjogIm9iamVjdCIsCiAgICAgICJyZXF1aXJlZCI6IFsKICAgICAgICAiZXJyb3IiCiAgICAgIF0sCiAgICAgICJwcm9wZXJ0aWVzIjogewogICAgICAgICJlcnJvciI6IHsKICAgICAgICAgICJ0eXBlIjogIm9iamVjdCIsCiAgICAgICAgICAicmVxdWlyZWQiOiBbCiAgICAgICAgICAgICJjb2RlIgogICAgICAgICAgXSwKICAgICAgICAgICJwcm9wZXJ0aWVzIjogewogICAgICAgICAgICAiY29kZSI6IHsKICAgICAgICAgICAgICAidHlwZSI6ICJpbnRlZ2VyIiwKICAgICAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiSFRUUCBsaWtlIGVycm9yIGNvZGUgaW4gdGhlIDMwMCB0byA1MDAgcmFuZ2UiLAogICAgICAgICAgICAgICJtaW5pbXVtIjogMzAwLAogICAgICAgICAgICAgICJtYXhpbXVtIjogNjk5CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6IHsKICAgICAgICAgICAgICAidHlwZSI6ICJzdHJpbmciLAogICAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJBIGh1bWFuIGZyaWVuZGx5IGRlc2NyaXB0aW9uIG9mIHRoZSBlcnJvciIKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfQogICAgfSwKICAgIHsKICAgICAgInJlcXVpcmVkIjogWwogICAgICAgICJzdWNjZXNzIgogICAgICBdLAogICAgICAidHlwZSI6ICJvYmplY3QiLAogICAgICAicHJvcGVydGllcyI6IHsKICAgICAgICAic3VjY2VzcyI6IHsKICAgICAgICAgICJ0eXBlIjogImJvb2xlYW4iLAogICAgICAgICAgImRlc2NyaXB0aW9uIjogIklmIHRoZSBwZWVyIHdhcyBzdWNjZXNzZnVsbHkgcmVtb3ZlZCIsCiAgICAgICAgICAiZGVmYXVsdCI6IGZhbHNlCiAgICAgICAgfQogICAgICB9CiAgICB9CiAgXSwKICAicHJvcGVydGllcyI6IHsKICAgICJ0eXBlIjogewogICAgICAidHlwZSI6ICJzdHJpbmciLAogICAgICAiY29uc3QiOiAiaW8ubmF0cy5qZXRzdHJlYW0uYXBpLnYxLnN0cmVhbV9yZW1vdmVfcGVlcl9yZXNwb25zZSIKICAgIH0KICB9Cn0K")
	schemas["io.nats.jetstream.api.v1.stream_leader_stepdown_response"], _ = base64.StdEncoding.DecodeString("ewogICIkc2NoZW1hIjogImh0dHA6Ly9qc29uLXNjaGVtYS5vcmcvZHJhZnQtMDcvc2NoZW1hIyIsCiAgIiRpZCI6ICJodHRwczovL25hdHMuaW8vc2NoZW1hcy9qZXRzdHJlYW0vYXBpL3YxL3N0cmVhbV9sZWFkZXJfc3RlcGRvd25fcmVzcG9uc2UuanNvbiIsCiAgImRlc2NyaXB0aW9uIjogIkEgcmVzcG9uc2UgZnJvbSB0aGUgSmV0U3RyZWFtICRKUy5BUEkuU1RSRUFNLkxFQURFUi5TVEVQRE9XTiBBUEkiLAogICJ0aXRsZSI6ICJpby5uYXRzLmpldHN0cmVhbS5hcGkudjEuc3RyZWFtX2xlYWRlcl9zdGVwZG93bl9yZXNwb25zZSIsCiAgInR5cGUiOiAib2JqZWN0IiwKICAib25lT2YiOiBbCiAgICB7CiAgICAgICJ0eXBlIjogIm9iamVjdCIsCiAgICAgICJyZXF1aXJlZCI6IFsKICAgICAgICAiZXJyb3IiCiAgICAgIF0sCiAgICAgICJwcm9wZXJ0aWVzIjogewogICAgICAgICJlcnJvciI6IHsKICAgICAgICAgICJ0eXBlIjogIm9iamVjdCIsCiAgICAgICAgICAicmVxdWlyZWQiOiBbCiAgICAgICAgICAgICJjb2RlIgogICAgICAgICAgXSwKICAgICAgICAgICJwcm9wZXJ0aWVzIjogewogICAgICAgICAgICAiY29kZSI6IHsKICAgICAgICAgICAgICAidHlwZSI6ICJpbnRlZ2VyIiwKICAgICAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiSFRUUCBsaWtlIGVycm9yIGNvZGUgaW4gdGhlIDMwMCB0byA1MDAgcmFuZ2UiLAogICAgICAgICAgICAgICJtaW5pbXVtIjogMzAwLAogICAgICAgICAgICAgICJtYXhpbXVtIjogNjk5CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6IHsKICAgICAgICAgICAgICAidHlwZSI6ICJzdHJpbmciLAogICAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJBIGh1bWFuIGZyaWVuZGx5IGRlc2NyaXB0aW9uIG9mIHRoZSBlcnJvciIKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfQogICAgfSwKICAgIHsKICAgICAgInJlcXVpcmVkIjogWwogICAgICAgICJzdWNjZXNzIgogICAgICBdLAogICAgICAidHlwZSI6ICJvYmplY3QiLAogICAgICAicHJvcGVydGllcyI6IHsKICAgICAgICAic3VjY2VzcyI6IHsKICAgICAgICAgICJ0eXBlIjogImJvb2xlYW4iLAogICAgICAgICAgImRlc2NyaXB0aW9uIjogIklmIHRoZSBsZWFkZXIgc3VjY2Vzc2Z1bGx5IHN0b29kIGRvd24iLAogICAgICAgICAgImRlZmF1bHQiOiBmYWxzZQogICAgICAgIH0KICAgICAgfQogICAgfQogIF0sCiAgInByb3BlcnRpZXMiOiB7CiAgICAidHlwZSI6IHsKICAgICAgInR5cGUiOiAic3RyaW5nIiwKICAgICAgImNvbnN0IjogImlvLm5hdHMuamV0c3RyZWFtLmFwaS52MS5zdHJlYW1fbGVhZGVyX3N0ZXBkb3duX3Jlc3BvbnNlIgogICAgfQogIH0KfQo=")
	schemas["io.nats.jetstream.api.v1.pub_ack_response"], _ = base64.StdEncoding.DecodeString("ewogICIkc2NoZW1hIjogImh0dHA6Ly9qc29uLXNjaGVtYS5vcmcvZHJhZnQtMDcvc2NoZW1hIyIsCiAgIiRpZCI6ICJodHRwczovL25hdHMuaW8vc2NoZW1hcy9qZXRzdHJlYW0vYXBpL3YxL3B1Yl9hY2tfcmVzcG9uc2UuanNvbiIsCiAgImRlc2NyaXB0aW9uIjogIkEgcmVzcG9uc2UgcmVjZWl2ZWQgd2hlbiBwdWJsaXNoaW5nIGEgbWVzc2FnZSIsCiAgInRpdGxlIjogImlvLm5hdHMuamV0c3RyZWFtLmFwaS52MS5wdWJfYWNrX3Jlc3BvbnNlIiwKICAidHlwZSI6ICJvYmplY3QiLAogICJyZXF1aXJlZCI6IFsKICAgICJzdHJlYW0iCiAgXSwKICAiYWRkaXRpb25hbFByb3BlcnRpZXMiOiBmYWxzZSwKICAicHJvcGVydGllcyI6IHsKICAgICJlcnJvciI6IHsKICAgICAgInR5cGUiOiAib2JqZWN0IiwKICAgICAgInJlcXVpcmVkIjogWwogICAgICAgICJjb2RlIgogICAgICBdLAogICAgICAicHJvcGVydGllcyI6IHsKICAgICAgICAiY29kZSI6IHsKICAgICAgICAgICJ0eXBlIjogImludGVnZXIiLAogICAgICAgICAgImRlc2NyaXB0aW9uIjogIkhUVFAgbGlrZSBlcnJvciBjb2RlIGluIHRoZSAzMDAgdG8gNTAwIHJhbmdlIiwKICAgICAgICAgICJtaW5pbXVtIjogMzAwLAogICAgICAgICAgIm1heGltdW0iOiA2OTkKICAgICAgICB9LAogICAgICAgICJkZXNjcmlwdGlvbiI6IHsKICAgICAgICAgICJ0eXBlIjogInN0cmluZyIsCiAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiQSBodW1hbiBmcmllbmRseSBkZXNjcmlwdGlvbiBvZiB0aGUgZXJyb3IiCiAgICAgICAgfQogICAgICB9CiAgICB9LAogICAgInN0cmVhbSI6IHsKICAgICAgInR5cGUiOiAic3RyaW5nIiwKICAgICAgImRlc2NyaXB0aW9uIjogIlRoZSBuYW1lIG9mIHRoZSBzdHJlYW0gdGhhdCByZWNlaXZlZCB0aGUgbWVzc2FnZSIsCiAgICAgICJtaW5MZW5ndGgiOiAxCiAgICB9LAogICAgInNlcSI6IHsKICAgICAgInR5cGUiOiAiaW50ZWdlciIsCiAgICAgICJkZXNjcmlwdGlvbiI6ICJJZiBzdWNjZXNzZnVsIHRoaXMgd2lsbCBiZSB0aGUgc2VxdWVuY2UgdGhlIG1lc3NhZ2UgaXMgc3RvcmVkIGF0IiwKICAgICAgIm1pbmltdW0iOiAwLAogICAgICAibWF4aW11bSI6IDE4NDQ2NzQ0MDczNzA5NTUyMDAwCiAgICB9LAogICAgImR1cGxpY2F0ZSI6IHsKICAgICAgInR5cGUiOiAiYm9vbGVhbiIsCiAgICAgICJkZXNjcmlwdGlvbiI6ICJJbmRpY2F0ZXMgdGhhdCB0aGUgbWVzc2FnZSB3YXMgbm90IHN0b3JlZCBkdWUgdG8gdGhlIE5hdHMtTXNnLUlkIGhlYWRlciBhbmQgZHVwbGljYXRlIHRyYWNraW5nIiwKICAgICAgImRlZmF1bHQiOiBmYWxzZQogICAgfQogIH0KfQo=")
	schemas["io.nats.jetstream.api.v1.meta_leader_stepdown_request"], _ = base64.StdEncoding.DecodeString("ewogICIkc2NoZW1hIjogImh0dHA6Ly9qc29uLXNjaGVtYS5vcmcvZHJhZnQtMDcvc2NoZW1hIyIsCiAgIiRpZCI6ICJodHRwczovL25hdHMuaW8vc2NoZW1hcy9qZXRzdHJlYW0vYXBpL3YxL21ldGFfbGVhZGVyX3N0ZXBkb3duX3JlcXVlc3QuanNvbiIsCiAgImRlc2NyaXB0aW9uIjogIkEgcmVzcG9uc2UgZnJvbSB0aGUgSmV0U3RyZWFtICRKUy5BUEkuTUVUQS5MRUFERVIuU1RFUERPV04gQVBJIiwKICAidGl0bGUiOiAiaW8ubmF0cy5qZXRzdHJlYW0uYXBpLnYxLm1ldGFfbGVhZGVyX3N0ZXBkb3duX3JlcXVlc3QiLAogICJ0eXBlIjogIm9iamVjdCIsCiAgInByb3BlcnRpZXMiOiB7CiAgICAicGxhY2VtZW50IjogewogICAgICAidHlwZSI6ICJvYmplY3QiLAogICAgICAiZGVzY3JpcHRpb24iOiAiUGxhY2VtZW50IHJlcXVpcmVtZW50cyBmb3IgYSBzdHJlYW0iLAogICAgICAicmVxdWlyZWQiOiBbCiAgICAgICAgImNsdXN0ZXIiCiAgICAgIF0sCiAgICAgICJwcm9wZXJ0aWVzIjogewogICAgICAgICJjbHVzdGVyIjogewogICAgICAgICAgInR5cGUiOiAic3RyaW5nIiwKICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJUaGUgZGVzaXJlZCBjbHVzdGVyIG5hbWUgdG8gcGxhY2UgdGhlIHN0cmVhbSIsCiAgICAgICAgICAibWluTGVuZ3RoIjogMQogICAgICAgIH0sCiAgICAgICAgInRhZ3MiOiB7CiAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiVGFncyByZXF1aXJlZCBvbiBzZXJ2ZXJzIGhvc3RpbmcgdGhpcyBzdHJlYW0iLAogICAgICAgICAgInR5cGUiOiAiYXJyYXkiLAogICAgICAgICAgIml0ZW1zIjogewogICAgICAgICAgICAidHlwZSI6ICJzdHJpbmciCiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9CiAgICB9CiAgfQp9Cg==")
	schemas["io.nats.jetstream.api.v1.meta_leader_stepdown_response"], _ = base64.StdEncoding.DecodeString("ewogICIkc2NoZW1hIjogImh0dHA6Ly9qc29uLXNjaGVtYS5vcmcvZHJhZnQtMDcvc2NoZW1hIyIsCiAgIiRpZCI6ICJodHRwczovL25hdHMuaW8vc2NoZW1hcy9qZXRzdHJlYW0vYXBpL3YxL21ldGFfbGVhZGVyX3N0ZXBkb3duX3Jlc3BvbnNlLmpzb24iLAogICJkZXNjcmlwdGlvbiI6ICJBIHJlc3BvbnNlIGZyb20gdGhlIEpldFN0cmVhbSAkSlMuQVBJLk1FVEEuTEVBREVSLlNURVBET1dOIEFQSSIsCiAgInRpdGxlIjogImlvLm5hdHMuamV0c3RyZWFtLmFwaS52MS5tZXRhX2xlYWRlcl9zdGVwZG93bl9yZXNwb25zZSIsCiAgInR5cGUiOiAib2JqZWN0IiwKICAib25lT2YiOiBbCiAgICB7CiAgICAgICJ0eXBlIjogIm9iamVjdCIsCiAgICAgICJyZXF1aXJlZCI6IFsKICAgICAgICAiZXJyb3IiCiAgICAgIF0sCiAgICAgICJwcm9wZXJ0aWVzIjogewogICAgICAgICJlcnJvciI6IHsKICAgICAgICAgICJ0eXBlIjogIm9iamVjdCIsCiAgICAgICAgICAicmVxdWlyZWQiOiBbCiAgICAgICAgICAgICJjb2RlIgogICAgICAgICAgXSwKICAgICAgICAgICJwcm9wZXJ0aWVzIjogewogICAgICAgICAgICAiY29kZSI6IHsKICAgICAgICAgICAgICAidHlwZSI6ICJpbnRlZ2VyIiwKICAgICAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiSFRUUCBsaWtlIGVycm9yIGNvZGUgaW4gdGhlIDMwMCB0byA1MDAgcmFuZ2UiLAogICAgICAgICAgICAgICJtaW5pbXVtIjogMzAwLAogICAgICAgICAgICAgICJtYXhpbXVtIjogNjk5CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6IHsKICAgICAgICAgICAgICAidHlwZSI6ICJzdHJpbmciLAogICAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJBIGh1bWFuIGZyaWVuZGx5IGRlc2NyaXB0aW9uIG9mIHRoZSBlcnJvciIKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfQogICAgfSwKICAgIHsKICAgICAgInJlcXVpcmVkIjogWwogICAgICAgICJzdWNjZXNzIgogICAgICBdLAogICAgICAidHlwZSI6ICJvYmplY3QiLAogICAgICAicHJvcGVydGllcyI6IHsKICAgICAgICAic3VjY2VzcyI6IHsKICAgICAgICAgICJ0eXBlIjogImJvb2xlYW4iLAogICAgICAgICAgImRlc2NyaXB0aW9uIjogIklmIHRoZSBsZWFkZXIgc3VjY2Vzc2Z1bGx5IHN0b29kIGRvd24iLAogICAgICAgICAgImRlZmF1bHQiOiBmYWxzZQogICAgICAgIH0KICAgICAgfQogICAgfQogIF0sCiAgInByb3BlcnRpZXMiOiB7CiAgICAidHlwZSI6IHsKICAgICAgInR5cGUiOiAic3RyaW5nIiwKICAgICAgImNvbnN0IjogImlvLm5hdHMuamV0c3RyZWFtLmFwaS52MS5tZXRhX2xlYWRlcl9zdGVwZG93bl9yZXNwb25zZSIKICAgIH0KICB9Cn0K")
}
